# Yuelin's Compiler
	
.data
	global:
	1 2 3 1 2 3 4 5 6 1 2 3 4 1 2 5 6 1 2 7 8
	.space 4
	STR_1: .asciiz "19373749\n"
	STR_2: .asciiz "\n"
	STR_3: .asciiz "yes\n"
	STR_4: .asciiz "no\n"
.text
	la $gp, global
	j FUNC_main
FUNC_vfun1:
	# RETURN VOID
	jr $ra
	
FUNC_vfun2:
	# RETURN VOID
	jr $ra
	
FUNC_vfun3:
	# RETURN VOID
	jr $ra
	
FUNC_vfun4:
	# RETURN VOID
	jr $ra
	
FUNC_vfun5:
	# RETURN VOID
	jr $ra
	
FUNC_vfun6:
	# RETURN VOID
	jr $ra
	
FUNC_vfun7:
	# RETURN VOID
	jr $ra
	
FUNC_ifun1:
	# RETURN 0
	li $2, 0
	jr $ra
	
FUNC_ifun2:
	# ADD, INT(tmp_int_0[temp]), INT(a[sp-0x4]), INT(a[sp-0x4])
	lw $5, -0x4($29)
	addu $6, $5, $5
	# RETURN INT(tmp_int_0[temp])
	move $2, $6
	sw $5, -0x4($29)
	sw $6, -0x8($29)
	jr $ra
	
FUNC_ifun3:
	# ADD, INT(tmp_int_1[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	lw $7, -0x4($29)
	lw $8, -0x8($29)
	addu $9, $7, $8
	# RETURN INT(tmp_int_1[temp])
	move $2, $9
	sw $7, -0x4($29)
	sw $8, -0x8($29)
	sw $9, -0xc($29)
	jr $ra
	
FUNC_ifun4:
	# MUL, INT(tmp_int_2[temp]), 0, 4
	li $10, 0
	# ADD, INT(tmp_int_2[temp]), INT(tmp_int_2[temp]), 0
	addiu $10, $10, 0
	# OFFSET (ARRAY(a[sp-0x4])+INT(tmp_int_2[temp]))->POINTER(tmp_pointer_0[temp])
	lw $3, -0x4($29)
	addu $11, $3, $10
	# LOAD POINTER(tmp_pointer_0[temp]), INT(tmp_int_3[temp])
	lw $12, 0x0($11)
	# RETURN INT(tmp_int_3[temp])
	move $2, $12
	sw $12, -0x8($29)
	jr $ra
	
FUNC_ifun5:
	# MUL, INT(tmp_int_4[temp]), 0, 4
	li $13, 0
	# ADD, INT(tmp_int_4[temp]), INT(tmp_int_4[temp]), 0
	addiu $13, $13, 0
	# OFFSET (ARRAY(a[sp-0x4])+INT(tmp_int_4[temp]))->POINTER(tmp_pointer_1[temp])
	lw $3, -0x4($29)
	addu $14, $3, $13
	# LOAD POINTER(tmp_pointer_1[temp]), INT(tmp_int_5[temp])
	lw $15, 0x0($14)
	# MUL, INT(tmp_int_7[temp]), 0, 4
	li $16, 0
	# ADD, INT(tmp_int_7[temp]), INT(tmp_int_7[temp]), 0
	addiu $16, $16, 0
	# OFFSET (ARRAY(b[sp-0x8])+INT(tmp_int_7[temp]))->POINTER(tmp_pointer_2[temp])
	lw $3, -0x8($29)
	addu $17, $3, $16
	# LOAD POINTER(tmp_pointer_2[temp]), INT(tmp_int_8[temp])
	lw $18, 0x0($17)
	# ADD, INT(tmp_int_6[temp]), INT(tmp_int_5[temp]), INT(tmp_int_8[temp])
	addu $19, $15, $18
	# RETURN INT(tmp_int_6[temp])
	move $2, $19
	sw $19, -0xc($29)
	jr $ra
	
FUNC_ifun6:
	# MUL, INT(tmp_int_9[temp]), 0, 4
	li $20, 0
	# ADD, INT(tmp_int_9[temp]), INT(tmp_int_9[temp]), 0
	addiu $20, $20, 0
	# MUL, INT(tmp_int_10[temp]), 0, 8
	li $21, 0
	# ADD, INT(tmp_int_10[temp]), INT(tmp_int_10[temp]), INT(tmp_int_9[temp])
	addu $21, $21, $20
	# OFFSET (ARRAY(a[sp-0x4])+INT(tmp_int_10[temp]))->POINTER(tmp_pointer_3[temp])
	lw $3, -0x4($29)
	addu $22, $3, $21
	# LOAD POINTER(tmp_pointer_3[temp]), INT(tmp_int_11[temp])
	lw $23, 0x0($22)
	# RETURN INT(tmp_int_11[temp])
	move $2, $23
	sw $23, -0x8($29)
	jr $ra
	
FUNC_ifun7:
	# MUL, INT(tmp_int_12[temp]), 0, 4
	li $24, 0
	# ADD, INT(tmp_int_12[temp]), INT(tmp_int_12[temp]), 0
	addiu $24, $24, 0
	# MUL, INT(tmp_int_13[temp]), 0, 8
	li $25, 0
	# ADD, INT(tmp_int_13[temp]), INT(tmp_int_13[temp]), INT(tmp_int_12[temp])
	addu $25, $25, $24
	# OFFSET (ARRAY(a[sp-0x4])+INT(tmp_int_13[temp]))->POINTER(tmp_pointer_4[temp])
	lw $3, -0x4($29)
	addu $26, $3, $25
	# LOAD POINTER(tmp_pointer_4[temp]), INT(tmp_int_14[temp])
	lw $27, 0x0($26)
	# MUL, INT(tmp_int_16[temp]), 0, 4
	li $5, 0
	# ADD, INT(tmp_int_16[temp]), INT(tmp_int_16[temp]), 0
	addiu $5, $5, 0
	# MUL, INT(tmp_int_17[temp]), 0, 8
	li $6, 0
	# ADD, INT(tmp_int_17[temp]), INT(tmp_int_17[temp]), INT(tmp_int_16[temp])
	addu $6, $6, $5
	# OFFSET (ARRAY(b[sp-0x8])+INT(tmp_int_17[temp]))->POINTER(tmp_pointer_5[temp])
	lw $3, -0x8($29)
	addu $7, $3, $6
	# LOAD POINTER(tmp_pointer_5[temp]), INT(tmp_int_18[temp])
	lw $8, 0x0($7)
	# ADD, INT(tmp_int_15[temp]), INT(tmp_int_14[temp]), INT(tmp_int_18[temp])
	addu $9, $27, $8
	# RETURN INT(tmp_int_15[temp])
	move $2, $9
	sw $9, -0xc($29)
	jr $ra
	
FUNC_main:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# DEF, INT(a[sp-0x4]), 0
	li $10, 0
	# DEF, INT(b[sp-0x8]), 0
	li $11, 0
	# DEF, INT(c[sp-0xc]), 0
	li $12, 0
	# OFFSET (ARRAY(array1[sp-0x14])+0)->POINTER(tmp_pointer_6[temp])
	addiu $13, $29, -20
	# STORE POINTER(tmp_pointer_6[temp]), 1
	li $3, 1
	sw $3, 0x0($13)
	# OFFSET (ARRAY(array1[sp-0x14])+4)->POINTER(tmp_pointer_7[temp])
	addiu $14, $29, -16
	# STORE POINTER(tmp_pointer_7[temp]), 2
	li $3, 2
	sw $3, 0x0($14)
	# OFFSET (ARRAY(array2[sp-0x1c])+0)->POINTER(tmp_pointer_8[temp])
	addiu $16, $29, -28
	# STORE POINTER(tmp_pointer_8[temp]), 3
	li $3, 3
	sw $3, 0x0($16)
	# OFFSET (ARRAY(array2[sp-0x1c])+4)->POINTER(tmp_pointer_9[temp])
	addiu $17, $29, -24
	# STORE POINTER(tmp_pointer_9[temp]), 4
	li $3, 4
	sw $3, 0x0($17)
	# OFFSET (ARRAY(array3[sp-0x24])+0)->POINTER(tmp_pointer_10[temp])
	addiu $15, $29, -36
	# STORE POINTER(tmp_pointer_10[temp]), 5
	li $3, 5
	sw $3, 0x0($15)
	# OFFSET (ARRAY(array3[sp-0x24])+4)->POINTER(tmp_pointer_11[temp])
	addiu $18, $29, -32
	# STORE POINTER(tmp_pointer_11[temp]), 6
	li $3, 6
	sw $3, 0x0($18)
	# OFFSET (ARRAY(arrays1[sp-0x34])+0)->POINTER(tmp_pointer_12[temp])
	addiu $19, $29, -52
	# STORE POINTER(tmp_pointer_12[temp]), 1
	li $3, 1
	sw $3, 0x0($19)
	# OFFSET (ARRAY(arrays1[sp-0x34])+4)->POINTER(tmp_pointer_13[temp])
	addiu $20, $29, -48
	# STORE POINTER(tmp_pointer_13[temp]), 2
	li $3, 2
	sw $3, 0x0($20)
	# OFFSET (ARRAY(arrays1[sp-0x34])+8)->POINTER(tmp_pointer_14[temp])
	addiu $21, $29, -44
	# STORE POINTER(tmp_pointer_14[temp]), 3
	li $3, 3
	sw $3, 0x0($21)
	# OFFSET (ARRAY(arrays1[sp-0x34])+12)->POINTER(tmp_pointer_15[temp])
	addiu $22, $29, -40
	# STORE POINTER(tmp_pointer_15[temp]), 4
	li $3, 4
	sw $3, 0x0($22)
	# OFFSET (ARRAY(arrays2[sp-0x44])+0)->POINTER(tmp_pointer_16[temp])
	addiu $23, $29, -68
	# STORE POINTER(tmp_pointer_16[temp]), 1
	li $3, 1
	sw $3, 0x0($23)
	# OFFSET (ARRAY(arrays2[sp-0x44])+4)->POINTER(tmp_pointer_17[temp])
	addiu $24, $29, -64
	# STORE POINTER(tmp_pointer_17[temp]), 2
	li $3, 2
	sw $3, 0x0($24)
	# OFFSET (ARRAY(arrays2[sp-0x44])+8)->POINTER(tmp_pointer_18[temp])
	addiu $25, $29, -60
	# STORE POINTER(tmp_pointer_18[temp]), 5
	li $3, 5
	sw $3, 0x0($25)
	# OFFSET (ARRAY(arrays2[sp-0x44])+12)->POINTER(tmp_pointer_19[temp])
	addiu $26, $29, -56
	# STORE POINTER(tmp_pointer_19[temp]), 6
	li $3, 6
	sw $3, 0x0($26)
	# OFFSET (ARRAY(arrays3[sp-0x54])+0)->POINTER(tmp_pointer_20[temp])
	addiu $5, $29, -84
	# STORE POINTER(tmp_pointer_20[temp]), 1
	li $3, 1
	sw $3, 0x0($5)
	# OFFSET (ARRAY(arrays3[sp-0x54])+4)->POINTER(tmp_pointer_21[temp])
	addiu $6, $29, -80
	# STORE POINTER(tmp_pointer_21[temp]), 2
	li $3, 2
	sw $3, 0x0($6)
	# OFFSET (ARRAY(arrays3[sp-0x54])+8)->POINTER(tmp_pointer_22[temp])
	addiu $7, $29, -76
	# STORE POINTER(tmp_pointer_22[temp]), 7
	li $3, 7
	sw $3, 0x0($7)
	# OFFSET (ARRAY(arrays3[sp-0x54])+12)->POINTER(tmp_pointer_23[temp])
	addiu $27, $29, -72
	# STORE POINTER(tmp_pointer_23[temp]), 8
	li $3, 8
	sw $3, 0x0($27)
	# ASS, INT(a[sp-0x4]), 1
	li $10, 1
	# MUL, INT(tmp_int_20[temp]), INT(a[sp-0x4]), INT(a[sp-0x4])
	mult $10 $10
	mflo $8
	# MUL, INT(tmp_int_19[temp]), INT(tmp_int_20[temp]), 4
	li $3, 4
	mult $8 $3
	mflo $9
	# ADD, INT(tmp_int_19[temp]), INT(tmp_int_19[temp]), 0
	addiu $9, $9, 0
	# OFFSET (ARRAY(array1[sp-0x14])+INT(tmp_int_19[temp]))->POINTER(tmp_pointer_24[temp])
	addiu $3, $29, -20
	addu $13, $3, $9
	# STORE POINTER(tmp_pointer_24[temp]), 3
	li $3, 3
	sw $3, 0x0($13)
	# MUL, INT(tmp_int_21[temp]), 1, 4
	li $14, 4
	# ADD, INT(tmp_int_21[temp]), INT(tmp_int_21[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(array1[sp-0x14])+INT(tmp_int_21[temp]))->POINTER(tmp_pointer_25[temp])
	addiu $3, $29, -20
	addu $16, $3, $14
	# LOAD POINTER(tmp_pointer_25[temp]), INT(tmp_int_22[temp])
	lw $17, 0x0($16)
	# MUL, INT(tmp_int_24[temp]), 0, 4
	li $15, 0
	# ADD, INT(tmp_int_24[temp]), INT(tmp_int_24[temp]), 0
	addiu $15, $15, 0
	# OFFSET (ARRAY(array1[sp-0x14])+INT(tmp_int_24[temp]))->POINTER(tmp_pointer_26[temp])
	addiu $3, $29, -20
	addu $18, $3, $15
	# LOAD POINTER(tmp_pointer_26[temp]), INT(tmp_int_25[temp])
	lw $19, 0x0($18)
	# ADD, INT(tmp_int_23[temp]), INT(tmp_int_22[temp]), INT(tmp_int_25[temp])
	addu $20, $17, $19
	# PRINT_INT INT(tmp_int_23[temp])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_14
	sw $20, -0x5c($29)
	sw $10, -0x4($29)
	sw $11, -0x8($29)
	sw $12, -0xc($29)
	j B_14
B_14:
	# JUMP B_15
	j B_15
B_15:
	# ADD, INT(tmp_int_26[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	lw $21, -0x4($29)
	lw $22, -0x8($29)
	addu $23, $21, $22
	# JUMP L_OR_EXP_16
	sw $21, -0x4($29)
	sw $22, -0x8($29)
	sw $23, -0x60($29)
	j L_OR_EXP_16
L_OR_EXP_16:
	# JUMP L_AND_EXP_18
	j L_AND_EXP_18
L_AND_EXP_18:
	# ASS, INT(tmp_int_27[temp]), 1
	li $24, 1
	# Branch 1 ? AND_20 : AND_END_19
	sw $24, -0x64($29)
	li $3, 1
	bne $3, $0, AND_20
	j AND_END_19
AND_20:
	# JUMP AND_END_19
	j AND_END_19
AND_END_19:
	# ASS, INT(tmp_int_28[temp]), INT(tmp_int_27[sp-0x64])
	lw $25, -0x64($29)
	move $26, $25
	# Branch INT(tmp_int_28[temp]) ? OR_END_17 : OR_21
	sw $25, -0x64($29)
	sw $26, -0x68($29)
	lw $3, -0x68($29)
	bne $3, $0, OR_END_17
	j OR_21
OR_21:
	# JUMP OR_END_17
	j OR_END_17
OR_END_17:
	# Branch INT(tmp_int_28[sp-0x68]) ? IF_BODY_22 : IF_END_23
	lw $3, -0x68($29)
	bne $3, $0, IF_BODY_22
	j IF_END_23
IF_BODY_22:
	# JUMP B_24
	j B_24
B_24:
	# ASS, INT(a[sp-0x4]), INT(a[sp-0x4])
	lw $5, -0x4($29)
	move $5, $5
	# JUMP B_25
	sw $5, -0x4($29)
	j B_25
B_25:
	# JUMP IF_END_23
	j IF_END_23
IF_END_23:
	# JUMP L_OR_EXP_26
	j L_OR_EXP_26
L_OR_EXP_26:
	# JUMP L_AND_EXP_28
	j L_AND_EXP_28
L_AND_EXP_28:
	# LT, INT(tmp_int_29[temp]), 1, 0
	li $6, 0
	# ASS, INT(tmp_int_30[temp]), INT(tmp_int_29[temp])
	move $7, $6
	# Branch INT(tmp_int_29[temp]) ? AND_30 : AND_END_29
	sw $6, -0x6c($29)
	sw $7, -0x70($29)
	lw $3, -0x6c($29)
	bne $3, $0, AND_30
	j AND_END_29
AND_30:
	# JUMP AND_END_29
	j AND_END_29
AND_END_29:
	# ASS, INT(tmp_int_31[temp]), INT(tmp_int_30[sp-0x70])
	lw $27, -0x70($29)
	move $8, $27
	# Branch INT(tmp_int_31[temp]) ? OR_END_27 : OR_31
	sw $8, -0x74($29)
	sw $27, -0x70($29)
	lw $3, -0x74($29)
	bne $3, $0, OR_END_27
	j OR_31
OR_31:
	# JUMP OR_END_27
	j OR_END_27
OR_END_27:
	# Branch INT(tmp_int_31[sp-0x74]) ? IF_BODY_32 : IF_END_33
	lw $3, -0x74($29)
	bne $3, $0, IF_BODY_32
	j IF_END_33
IF_BODY_32:
	# JUMP B_34
	j B_34
B_34:
	# ASS, INT(a[sp-0x4]), 1
	li $9, 1
	# JUMP B_35
	sw $9, -0x4($29)
	j B_35
B_35:
	# JUMP IF_END_33
	j IF_END_33
IF_END_33:
	# JUMP L_OR_EXP_36
	j L_OR_EXP_36
L_OR_EXP_36:
	# JUMP L_AND_EXP_38
	j L_AND_EXP_38
L_AND_EXP_38:
	# GT, INT(tmp_int_32[temp]), 0, 1
	li $13, 0
	# ASS, INT(tmp_int_33[temp]), INT(tmp_int_32[temp])
	move $14, $13
	# Branch INT(tmp_int_32[temp]) ? AND_40 : AND_END_39
	sw $13, -0x78($29)
	sw $14, -0x7c($29)
	lw $3, -0x78($29)
	bne $3, $0, AND_40
	j AND_END_39
AND_40:
	# JUMP AND_END_39
	j AND_END_39
AND_END_39:
	# ASS, INT(tmp_int_34[temp]), INT(tmp_int_33[sp-0x7c])
	lw $16, -0x7c($29)
	move $15, $16
	# Branch INT(tmp_int_34[temp]) ? OR_END_37 : OR_41
	sw $16, -0x7c($29)
	sw $15, -0x80($29)
	lw $3, -0x80($29)
	bne $3, $0, OR_END_37
	j OR_41
OR_41:
	# JUMP OR_END_37
	j OR_END_37
OR_END_37:
	# Branch INT(tmp_int_34[sp-0x80]) ? IF_BODY_42 : IF_END_43
	lw $3, -0x80($29)
	bne $3, $0, IF_BODY_42
	j IF_END_43
IF_BODY_42:
	# JUMP B_44
	j B_44
B_44:
	# ASS, INT(a[sp-0x4]), 1
	li $18, 1
	# JUMP B_45
	sw $18, -0x4($29)
	j B_45
B_45:
	# JUMP IF_END_43
	j IF_END_43
IF_END_43:
	# JUMP L_OR_EXP_46
	j L_OR_EXP_46
L_OR_EXP_46:
	# JUMP L_AND_EXP_48
	j L_AND_EXP_48
L_AND_EXP_48:
	# LE, INT(tmp_int_35[temp]), 1, 0
	li $17, 0
	# ASS, INT(tmp_int_36[temp]), INT(tmp_int_35[temp])
	move $19, $17
	# Branch INT(tmp_int_35[temp]) ? AND_50 : AND_END_49
	sw $17, -0x84($29)
	sw $19, -0x88($29)
	lw $3, -0x84($29)
	bne $3, $0, AND_50
	j AND_END_49
AND_50:
	# JUMP AND_END_49
	j AND_END_49
AND_END_49:
	# ASS, INT(tmp_int_37[temp]), INT(tmp_int_36[sp-0x88])
	lw $20, -0x88($29)
	move $10, $20
	# Branch INT(tmp_int_37[temp]) ? OR_END_47 : OR_51
	sw $20, -0x88($29)
	sw $10, -0x8c($29)
	lw $3, -0x8c($29)
	bne $3, $0, OR_END_47
	j OR_51
OR_51:
	# JUMP OR_END_47
	j OR_END_47
OR_END_47:
	# Branch INT(tmp_int_37[sp-0x8c]) ? IF_BODY_52 : IF_END_53
	lw $3, -0x8c($29)
	bne $3, $0, IF_BODY_52
	j IF_END_53
IF_BODY_52:
	# JUMP B_54
	j B_54
B_54:
	# ASS, INT(a[sp-0x4]), 1
	li $11, 1
	# JUMP B_55
	sw $11, -0x4($29)
	j B_55
B_55:
	# JUMP IF_END_53
	j IF_END_53
IF_END_53:
	# JUMP L_OR_EXP_56
	j L_OR_EXP_56
L_OR_EXP_56:
	# JUMP L_AND_EXP_58
	j L_AND_EXP_58
L_AND_EXP_58:
	# GE, INT(tmp_int_38[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	lw $12, -0x4($29)
	lw $21, -0x8($29)
	sge $22, $12, $21
	# ASS, INT(tmp_int_39[temp]), INT(tmp_int_38[temp])
	move $23, $22
	# Branch INT(tmp_int_38[temp]) ? AND_60 : AND_END_59
	sw $21, -0x8($29)
	sw $22, -0x90($29)
	sw $23, -0x94($29)
	sw $12, -0x4($29)
	lw $3, -0x90($29)
	bne $3, $0, AND_60
	j AND_END_59
AND_60:
	# JUMP AND_END_59
	j AND_END_59
AND_END_59:
	# ASS, INT(tmp_int_40[temp]), INT(tmp_int_39[sp-0x94])
	lw $24, -0x94($29)
	move $25, $24
	# Branch INT(tmp_int_40[temp]) ? OR_END_57 : OR_61
	sw $24, -0x94($29)
	sw $25, -0x98($29)
	lw $3, -0x98($29)
	bne $3, $0, OR_END_57
	j OR_61
OR_61:
	# JUMP OR_END_57
	j OR_END_57
OR_END_57:
	# Branch INT(tmp_int_40[sp-0x98]) ? IF_BODY_62 : IF_ELSE_64
	lw $3, -0x98($29)
	bne $3, $0, IF_BODY_62
	j IF_ELSE_64
IF_BODY_62:
	# JUMP B_65
	j B_65
B_65:
	# ADD, INT(tmp_int_41[temp]), INT(a[sp-0x4]), INT(a[sp-0x4])
	lw $26, -0x4($29)
	addu $5, $26, $26
	# ASS, INT(a[sp-0x4]), INT(tmp_int_41[temp])
	move $26, $5
	# JUMP B_66
	sw $26, -0x4($29)
	j B_66
B_66:
	# JUMP IF_END_63
	j IF_END_63
IF_ELSE_64:
	# JUMP B_67
	j B_67
B_67:
	# ADD, INT(tmp_int_42[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	lw $6, -0x4($29)
	lw $7, -0x8($29)
	addu $8, $6, $7
	# ASS, INT(a[sp-0x4]), INT(tmp_int_42[temp])
	move $6, $8
	# JUMP B_68
	sw $6, -0x4($29)
	sw $7, -0x8($29)
	j B_68
B_68:
	# JUMP IF_END_63
	j IF_END_63
IF_END_63:
	# PRINT_INT INT(a[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP L_OR_EXP_69
	j L_OR_EXP_69
L_OR_EXP_69:
	# JUMP L_AND_EXP_71
	j L_AND_EXP_71
L_AND_EXP_71:
	# EQ, INT(tmp_int_43[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	lw $27, -0x4($29)
	lw $9, -0x8($29)
	seq $13, $27, $9
	# ASS, INT(tmp_int_44[temp]), INT(tmp_int_43[temp])
	move $14, $13
	# Branch INT(tmp_int_43[temp]) ? AND_73 : AND_END_72
	sw $9, -0x8($29)
	sw $27, -0x4($29)
	sw $13, -0x9c($29)
	sw $14, -0xa0($29)
	lw $3, -0x9c($29)
	bne $3, $0, AND_73
	j AND_END_72
AND_73:
	# JUMP AND_END_72
	j AND_END_72
AND_END_72:
	# ASS, INT(tmp_int_45[temp]), INT(tmp_int_44[sp-0xa0])
	lw $16, -0xa0($29)
	move $15, $16
	# Branch INT(tmp_int_45[temp]) ? OR_END_70 : OR_74
	sw $16, -0xa0($29)
	sw $15, -0xa4($29)
	lw $3, -0xa4($29)
	bne $3, $0, OR_END_70
	j OR_74
OR_74:
	# JUMP OR_END_70
	j OR_END_70
OR_END_70:
	# Branch INT(tmp_int_45[sp-0xa4]) ? IF_BODY_75 : IF_END_76
	lw $3, -0xa4($29)
	bne $3, $0, IF_BODY_75
	j IF_END_76
IF_BODY_75:
	# JUMP B_77
	j B_77
B_77:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_78
	j B_78
B_78:
	# JUMP IF_END_76
	j IF_END_76
IF_END_76:
	# JUMP L_OR_EXP_79
	j L_OR_EXP_79
L_OR_EXP_79:
	# JUMP L_AND_EXP_81
	j L_AND_EXP_81
L_AND_EXP_81:
	# NEQ, INT(tmp_int_46[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	lw $18, -0x4($29)
	lw $17, -0x8($29)
	sne $19, $18, $17
	# ASS, INT(tmp_int_47[temp]), INT(tmp_int_46[temp])
	move $20, $19
	# Branch INT(tmp_int_46[temp]) ? AND_83 : AND_END_82
	sw $17, -0x8($29)
	sw $18, -0x4($29)
	sw $19, -0xa8($29)
	sw $20, -0xac($29)
	lw $3, -0xa8($29)
	bne $3, $0, AND_83
	j AND_END_82
AND_83:
	# JUMP AND_END_82
	j AND_END_82
AND_END_82:
	# ASS, INT(tmp_int_48[temp]), INT(tmp_int_47[sp-0xac])
	lw $10, -0xac($29)
	move $11, $10
	# Branch INT(tmp_int_48[temp]) ? OR_END_80 : OR_84
	sw $10, -0xac($29)
	sw $11, -0xb0($29)
	lw $3, -0xb0($29)
	bne $3, $0, OR_END_80
	j OR_84
OR_84:
	# JUMP OR_END_80
	j OR_END_80
OR_END_80:
	# Branch INT(tmp_int_48[sp-0xb0]) ? IF_BODY_85 : IF_END_86
	lw $3, -0xb0($29)
	bne $3, $0, IF_BODY_85
	j IF_END_86
IF_BODY_85:
	# JUMP B_87
	j B_87
B_87:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP B_88
	j B_88
B_88:
	# JUMP IF_END_86
	j IF_END_86
IF_END_86:
	# DEF, INT(i[sp-0x58]), 2
	li $21, 2
	# JUMP WHILE_89
	sw $21, -0x58($29)
	j WHILE_89
WHILE_89:
	# JUMP L_OR_EXP_92
	j L_OR_EXP_92
L_OR_EXP_92:
	# JUMP L_AND_EXP_94
	j L_AND_EXP_94
L_AND_EXP_94:
	# ASS, INT(tmp_int_49[temp]), 1
	li $22, 1
	# Branch 1 ? AND_96 : AND_END_95
	sw $22, -0xb4($29)
	li $3, 1
	bne $3, $0, AND_96
	j AND_END_95
AND_96:
	# JUMP AND_END_95
	j AND_END_95
AND_END_95:
	# ASS, INT(tmp_int_50[temp]), INT(tmp_int_49[sp-0xb4])
	lw $23, -0xb4($29)
	move $12, $23
	# Branch INT(tmp_int_50[temp]) ? OR_END_93 : OR_97
	sw $23, -0xb4($29)
	sw $12, -0xb8($29)
	lw $3, -0xb8($29)
	bne $3, $0, OR_END_93
	j OR_97
OR_97:
	# JUMP OR_END_93
	j OR_END_93
OR_END_93:
	# Branch INT(tmp_int_50[sp-0xb8]) ? WHILE_BODY_90 : WHILE_END_91
	lw $3, -0xb8($29)
	bne $3, $0, WHILE_BODY_90
	j WHILE_END_91
WHILE_BODY_90:
	# JUMP B_98
	j B_98
B_98:
	# JUMP L_OR_EXP_99
	j L_OR_EXP_99
	# JUMP B_109
	j B_109
L_OR_EXP_99:
	# JUMP L_AND_EXP_101
	j L_AND_EXP_101
L_AND_EXP_101:
	# NEQ, INT(tmp_int_51[temp]), INT(i[sp-0x58]), 0
	lw $24, -0x58($29)
	sne $25, $24, 0
	# ASS, INT(tmp_int_52[temp]), INT(tmp_int_51[temp])
	move $5, $25
	# Branch INT(tmp_int_51[temp]) ? AND_103 : AND_END_102
	sw $5, -0xbc($29)
	sw $24, -0x58($29)
	sw $25, -0xc0($29)
	lw $3, -0xc0($29)
	bne $3, $0, AND_103
	j AND_END_102
AND_103:
	# JUMP AND_END_102
	j AND_END_102
AND_END_102:
	# ASS, INT(tmp_int_53[temp]), INT(tmp_int_52[sp-0xbc])
	lw $26, -0xbc($29)
	move $8, $26
	# Branch INT(tmp_int_53[temp]) ? OR_END_100 : OR_104
	sw $8, -0xc4($29)
	sw $26, -0xbc($29)
	lw $3, -0xc4($29)
	bne $3, $0, OR_END_100
	j OR_104
OR_104:
	# JUMP OR_END_100
	j OR_END_100
OR_END_100:
	# Branch INT(tmp_int_53[sp-0xc4]) ? IF_BODY_105 : IF_END_106
	lw $3, -0xc4($29)
	bne $3, $0, IF_BODY_105
	j IF_END_106
IF_BODY_105:
	# JUMP B_107
	j B_107
B_107:
	# SUB, INT(tmp_int_54[temp]), INT(i[sp-0x58]), 1
	lw $6, -0x58($29)
	addiu $7, $6, -1
	# ASS, INT(i[sp-0x58]), INT(tmp_int_54[temp])
	move $6, $7
	# JUMP WHILE_89
	sw $6, -0x58($29)
	j WHILE_89
	# JUMP B_108
	j B_108
B_108:
	# JUMP IF_END_106
	j IF_END_106
IF_END_106:
	# JUMP WHILE_END_91
	j WHILE_END_91
B_109:
	# JUMP WHILE_89
	j WHILE_89
WHILE_END_91:
	# ASS, INT(a[sp-0x4]), INT(b[sp-0x8])
	lw $9, -0x8($29)
	move $27, $9
	# ASS, INT(a[sp-0x4]), 2
	li $27, 2
	# ADD, INT(tmp_int_55[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $13, $27, $9
	# ASS, INT(a[sp-0x4]), INT(tmp_int_55[temp])
	move $27, $13
	# NEG, INT(tmp_int_56[temp]), INT(a[sp-0x4])
	subu $14, $0, $27
	# ASS, INT(a[sp-0x4]), INT(tmp_int_56[temp])
	move $27, $14
	# Call FUNC_ifun1; Params: ; RET INT(tmp_int_57[temp])
	sw $9, -0x8($29)
	sw $27, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -200
	move $29, $4
	jal FUNC_ifun1
	addiu $29, $29, 200
	lw $31, 0x0($29)
	move $16, $2
	# ASS, INT(a[sp-0x4]), INT(tmp_int_57[temp])
	move $15, $16
	# MUL, INT(tmp_int_58[temp]), 1, 4
	li $17, 4
	# ADD, INT(tmp_int_58[temp]), INT(tmp_int_58[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array1[sp-0x14])+INT(tmp_int_58[temp]))->POINTER(tmp_pointer_27[temp])
	addiu $3, $29, -20
	addu $18, $3, $17
	# Call FUNC_ifun2; Params: INT(b[sp-0x8]); RET INT(tmp_int_59[temp])
	sw $18, -0xc8($29)
	sw $15, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -204
	lw $3, -0x8($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_ifun2
	addiu $29, $29, 204
	lw $31, 0x0($29)
	move $19, $2
	# STORE POINTER(tmp_pointer_27[sp-0xc8]), INT(tmp_int_59[temp])
	lw $20, -0xc8($29)
	sw $19, 0x0($20)
	# MUL, INT(tmp_int_60[temp]), 1, 4
	li $10, 4
	# ADD, INT(tmp_int_60[temp]), INT(tmp_int_60[temp]), 0
	addiu $10, $10, 0
	# OFFSET (ARRAY(array1[sp-0x14])+INT(tmp_int_60[temp]))->POINTER(tmp_pointer_28[temp])
	addiu $3, $29, -20
	addu $11, $3, $10
	# LOAD POINTER(tmp_pointer_28[temp]), INT(tmp_int_61[temp])
	lw $21, 0x0($11)
	# PRINT_INT INT(tmp_int_61[temp])
	li $2, 1
	move $4, $21
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# MUL, INT(tmp_int_62[temp]), 0, 4
	li $22, 0
	# ADD, INT(tmp_int_62[temp]), INT(tmp_int_62[temp]), 0
	addiu $22, $22, 0
	# MUL, INT(tmp_int_63[temp]), 0, 8
	li $23, 0
	# ADD, INT(tmp_int_63[temp]), INT(tmp_int_63[temp]), INT(tmp_int_62[temp])
	addu $23, $23, $22
	# OFFSET (ARRAY(arrays1[sp-0x34])+INT(tmp_int_63[temp]))->POINTER(tmp_pointer_29[temp])
	addiu $3, $29, -52
	addu $12, $3, $23
	# Call FUNC_ifun3; Params: INT(a[sp-0x4]), INT(b[sp-0x8]); RET INT(tmp_int_64[temp])
	sw $20, -0xc8($29)
	sw $21, -0xcc($29)
	sw $12, -0xd0($29)
	sw $31, 0x0($29)
	addiu $4, $29, -212
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_ifun3
	addiu $29, $29, 212
	lw $31, 0x0($29)
	move $5, $2
	# STORE POINTER(tmp_pointer_29[sp-0xd0]), INT(tmp_int_64[temp])
	lw $24, -0xd0($29)
	sw $5, 0x0($24)
	# MUL, INT(tmp_int_65[temp]), 0, 4
	li $25, 0
	# ADD, INT(tmp_int_65[temp]), INT(tmp_int_65[temp]), 0
	addiu $25, $25, 0
	# MUL, INT(tmp_int_66[temp]), 0, 8
	li $8, 0
	# ADD, INT(tmp_int_66[temp]), INT(tmp_int_66[temp]), INT(tmp_int_65[temp])
	addu $8, $8, $25
	# OFFSET (ARRAY(arrays1[sp-0x34])+INT(tmp_int_66[temp]))->POINTER(tmp_pointer_30[temp])
	addiu $3, $29, -52
	addu $26, $3, $8
	# LOAD POINTER(tmp_pointer_30[temp]), INT(tmp_int_67[temp])
	lw $7, 0x0($26)
	# PRINT_INT INT(tmp_int_67[temp])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# MUL, INT(tmp_int_69[temp]), 1, 4
	li $6, 4
	# ADD, INT(tmp_int_69[temp]), INT(tmp_int_69[temp]), 0
	addiu $6, $6, 0
	# MUL, INT(tmp_int_70[temp]), 1, 8
	li $13, 8
	# ADD, INT(tmp_int_70[temp]), INT(tmp_int_70[temp]), INT(tmp_int_69[temp])
	addu $13, $13, $6
	# OFFSET (ARRAY(arrays1[sp-0x34])+INT(tmp_int_70[temp]))->POINTER(tmp_pointer_31[temp])
	addiu $3, $29, -52
	addu $14, $3, $13
	# LOAD POINTER(tmp_pointer_31[temp]), INT(tmp_int_71[temp])
	lw $9, 0x0($14)
	# MUL, INT(tmp_int_68[temp]), INT(a[sp-0x4]), INT(tmp_int_71[temp])
	lw $27, -0x4($29)
	mult $27 $9
	mflo $16
	# ASS, INT(a[sp-0x4]), INT(tmp_int_68[temp])
	move $27, $16
	# MUL, INT(tmp_int_73[temp]), 0, 4
	li $17, 0
	# ADD, INT(tmp_int_73[temp]), INT(tmp_int_73[temp]), 0
	addiu $17, $17, 0
	# MUL, INT(tmp_int_74[temp]), 1, 8
	li $18, 8
	# ADD, INT(tmp_int_74[temp]), INT(tmp_int_74[temp]), INT(tmp_int_73[temp])
	addu $18, $18, $17
	# OFFSET (ARRAY(arrays2[sp-0x44])+INT(tmp_int_74[temp]))->POINTER(tmp_pointer_32[temp])
	addiu $3, $29, -68
	addu $15, $3, $18
	# LOAD POINTER(tmp_pointer_32[temp]), INT(tmp_int_75[temp])
	lw $19, 0x0($15)
	# DIV, INT(tmp_int_72[temp]), INT(a[sp-0x4]), INT(tmp_int_75[temp])
	div $27 $19
	mflo $10
	# ASS, INT(a[sp-0x4]), INT(tmp_int_72[temp])
	move $27, $10
	# MUL, INT(tmp_int_77[temp]), 1, 4
	li $11, 4
	# ADD, INT(tmp_int_77[temp]), INT(tmp_int_77[temp]), 0
	addiu $11, $11, 0
	# MUL, INT(tmp_int_78[temp]), 0, 8
	li $22, 0
	# ADD, INT(tmp_int_78[temp]), INT(tmp_int_78[temp]), INT(tmp_int_77[temp])
	addu $22, $22, $11
	# OFFSET (ARRAY(arrays3[sp-0x54])+INT(tmp_int_78[temp]))->POINTER(tmp_pointer_33[temp])
	addiu $3, $29, -84
	addu $23, $3, $22
	# LOAD POINTER(tmp_pointer_33[temp]), INT(tmp_int_79[temp])
	lw $20, 0x0($23)
	# MOD, INT(tmp_int_76[temp]), INT(a[sp-0x4]), INT(tmp_int_79[temp])
	div $27 $20
	mfhi $21
	# ASS, INT(a[sp-0x4]), INT(tmp_int_76[temp])
	move $27, $21
	# PRINT_INT INT(a[sp-0x4])
	li $2, 1
	move $4, $27
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# MUL, INT(tmp_int_80[temp]), 0, 8
	li $12, 0
	# ADD, INT(tmp_int_80[temp]), INT(tmp_int_80[temp]), 0
	addiu $12, $12, 0
	# OFFSET (ARRAY(arrays3[sp-0x54])+INT(tmp_int_80[temp]))->POINTER(tmp_pointer_34[temp])
	addiu $3, $29, -84
	addu $5, $3, $12
	# Call FUNC_ifun4; Params: POINTER(tmp_pointer_34[temp]); RET INT(tmp_int_81[temp])
	sw $5, -0xd4($29)
	sw $7, -0xd8($29)
	sw $24, -0xd0($29)
	sw $27, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -220
	lw $3, -0xd4($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_ifun4
	addiu $29, $29, 220
	lw $31, 0x0($29)
	move $25, $2
	# ASS, INT(a[sp-0x4]), INT(tmp_int_81[temp])
	move $8, $25
	# PRINT_INT INT(a[sp-0x4])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# OFFSET (ARRAY(arrays1[sp-0x34])+0)->POINTER(tmp_pointer_35[temp])
	addiu $26, $29, -52
	# OFFSET (ARRAY(arrays2[sp-0x44])+0)->POINTER(tmp_pointer_36[temp])
	addiu $6, $29, -68
	# Call FUNC_ifun7; Params: POINTER(tmp_pointer_35[temp]), POINTER(tmp_pointer_36[temp]); RET INT(tmp_int_82[temp])
	sw $6, -0xdc($29)
	sw $8, -0x4($29)
	sw $26, -0xe0($29)
	sw $31, 0x0($29)
	addiu $4, $29, -228
	lw $3, -0xe0($29)
	sw $3, -0x4($4)
	lw $3, -0xdc($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_ifun7
	addiu $29, $29, 228
	lw $31, 0x0($29)
	move $13, $2
	# ASS, INT(a[sp-0x4]), INT(tmp_int_82[temp])
	move $14, $13
	# PRINT_INT INT(a[sp-0x4])
	li $2, 1
	move $4, $14
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# MUL, INT(tmp_int_84[temp]), 0, 4
	li $9, 0
	# ADD, INT(tmp_int_84[temp]), INT(tmp_int_84[temp]), 0
	addiu $9, $9, 0
	# OFFSET (ARRAY(array1[sp-0x14])+INT(tmp_int_84[temp]))->POINTER(tmp_pointer_37[temp])
	addiu $3, $29, -20
	addu $16, $3, $9
	# LOAD POINTER(tmp_pointer_37[temp]), INT(tmp_int_85[temp])
	lw $17, 0x0($16)
	# ADD, INT(tmp_int_83[temp]), INT(a[sp-0x4]), INT(tmp_int_85[temp])
	addu $18, $14, $17
	# MUL, INT(tmp_int_87[temp]), 0, 4
	li $15, 0
	# ADD, INT(tmp_int_87[temp]), INT(tmp_int_87[temp]), 0
	addiu $15, $15, 0
	# OFFSET (ARRAY(array2[sp-0x1c])+INT(tmp_int_87[temp]))->POINTER(tmp_pointer_38[temp])
	addiu $3, $29, -28
	addu $19, $3, $15
	# LOAD POINTER(tmp_pointer_38[temp]), INT(tmp_int_88[temp])
	lw $10, 0x0($19)
	# SUB, INT(tmp_int_86[temp]), INT(tmp_int_83[temp]), INT(tmp_int_88[temp])
	subu $11, $18, $10
	# ASS, INT(a[sp-0x4]), INT(tmp_int_86[temp])
	move $14, $11
	# PRINT_INT INT(a[sp-0x4])
	li $2, 1
	move $4, $14
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
