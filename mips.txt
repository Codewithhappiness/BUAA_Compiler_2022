# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "\n"
.text
	la $gp, global
	j FUNC_main
FUNC_main:
	# DEF, INT(a[sp-0x4]), 0
	li $5, 0
	# DEF, INT(b[sp-0x8]), 0
	li $6, 0
	# OFFSET (ARRAY(arr[sp-0x10])+0)->POINTER(tmp_pointer_0[temp])
	addiu $7, $29, -16
	# STORE POINTER(tmp_pointer_0[temp]), 1
	li $3, 1
	sw $3, 0x0($7)
	# OFFSET (ARRAY(arr[sp-0x10])+4)->POINTER(tmp_pointer_1[temp])
	addiu $8, $29, -12
	# STORE POINTER(tmp_pointer_1[temp]), 2
	li $3, 2
	sw $3, 0x0($8)
	# MUL, INT(tmp_int_0[temp]), 1, 4
	li $9, 4
	# ADD, INT(tmp_int_0[temp]), INT(tmp_int_0[temp]), 0
	addiu $9, $9, 0
	# OFFSET (ARRAY(arr[sp-0x10])+INT(tmp_int_0[temp]))->POINTER(tmp_pointer_2[temp])
	addiu $3, $29, -16
	addu $10, $3, $9
	# LOAD POINTER(tmp_pointer_2[temp]), INT(tmp_int_1[temp])
	lw $11, 0x0($10)
	# PRINT_INT INT(tmp_int_1[temp])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
