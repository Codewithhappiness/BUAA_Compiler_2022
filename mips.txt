# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "19231177\n"
	STR_2: .asciiz "_ = "
	STR_3: .asciiz "; a = "
	STR_4: .asciiz "; b = "
	STR_5: .asciiz "; c = "
	STR_6: .asciiz ";\n"
	STR_7: .asciiz "+"
	STR_8: .asciiz "="
	STR_9: .asciiz "; "
	STR_10: .asciiz "-"
	STR_11: .asciiz "*"
	STR_12: .asciiz "/"
	STR_13: .asciiz "mod"
	STR_14: .asciiz "\n"
	STR_15: .asciiz "+("
	STR_16: .asciiz ")*"
	STR_17: .asciiz "mod("
	STR_18: .asciiz "all chars : !()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\n"
	STR_19: .asciiz "a"
	STR_20: .asciiz "b"
	STR_21: .asciiz "!+7+3="
	STR_22: .asciiz "! : error\n"
	STR_23: .asciiz "max: "
	STR_24: .asciiz " ; min : "
	STR_25: .asciiz " ; sum : "
.text
	la $gp, global
	j FUNC_main
FUNC_main:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# DEF, INT(_[sp-0x4]), 1
	li $5, 1
	# ASS, INT(a[sp-0x8]), 20
	li $6, 20
	# DEF, INT(c[sp-0x10]), 460
	li $8, 460
	# ASS, INT(b[sp-0xc]), 30
	li $7, 30
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(_[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(a[sp-0x8])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(b[sp-0xc])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# PRINT_INT INT(c[sp-0x10])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_6
	li $2, 4
	la $4, STR_6
	syscall
	# ADD, INT(tmp_int_0[temp]), INT(a[sp-0x8]), INT(b[sp-0xc])
	addu $17, $6, $7
	# ASS, INT(n1[sp-0x14]), INT(tmp_int_0[temp])
	move $18, $17
	# SUB, INT(tmp_int_1[temp]), INT(c[sp-0x10]), INT(_[sp-0x4])
	subu $19, $8, $5
	# ASS, INT(n2[sp-0x18]), INT(tmp_int_1[temp])
	move $20, $19
	# MUL, INT(tmp_int_2[temp]), INT(n1[sp-0x14]), INT(n2[sp-0x18])
	mult $18 $20
	mflo $21
	# ASS, INT(n3[sp-0x1c]), INT(tmp_int_2[temp])
	move $22, $21
	# DIV, INT(tmp_int_3[temp]), INT(n2[sp-0x18]), INT(n1[sp-0x14])
	div $20 $18
	mflo $23
	# ASS, INT(n4[sp-0x20]), INT(tmp_int_3[temp])
	move $24, $23
	# MOD, INT(tmp_int_4[temp]), INT(n3[sp-0x1c]), INT(b[sp-0xc])
	div $22 $7
	mfhi $25
	# ASS, INT(n5[sp-0x24]), INT(tmp_int_4[temp])
	move $26, $25
	# PRINT_INT INT(a[sp-0x8])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(b[sp-0xc])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(c[sp-0x10])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(_[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $24
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(b[sp-0xc])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# ADD, INT(tmp_int_5[temp]), INT(n1[sp-0x14]), INT(n2[sp-0x18])
	addu $27, $18, $20
	# ADD, INT(tmp_int_6[temp]), INT(tmp_int_5[temp]), INT(n3[sp-0x1c])
	addu $17, $27, $22
	# DEF, INT(a1[sp-0x28]), INT(tmp_int_6[temp])
	move $8, $17
	# SUB, INT(tmp_int_7[temp]), INT(n2[sp-0x18]), INT(n3[sp-0x1c])
	subu $19, $20, $22
	# SUB, INT(tmp_int_8[temp]), INT(tmp_int_7[temp]), INT(n4[sp-0x20])
	subu $21, $19, $24
	# DEF, INT(a2[sp-0x2c]), INT(tmp_int_8[temp])
	move $5, $21
	# MUL, INT(tmp_int_9[temp]), INT(n3[sp-0x1c]), INT(n4[sp-0x20])
	mult $22 $24
	mflo $23
	# MUL, INT(tmp_int_10[temp]), INT(tmp_int_9[temp]), INT(n5[sp-0x24])
	mult $23 $26
	mflo $25
	# DEF, INT(a3[sp-0x30]), INT(tmp_int_10[temp])
	move $7, $25
	# DIV, INT(tmp_int_11[temp]), INT(n5[sp-0x24]), INT(n1[sp-0x14])
	div $26 $18
	mflo $27
	# DIV, INT(tmp_int_12[temp]), INT(tmp_int_11[temp]), INT(n4[sp-0x20])
	div $27 $24
	mflo $17
	# DEF, INT(a4[sp-0x34]), INT(tmp_int_12[temp])
	move $6, $17
	# MOD, INT(tmp_int_13[temp]), INT(n4[sp-0x20]), INT(n1[sp-0x14])
	div $24 $18
	mfhi $19
	# MOD, INT(tmp_int_14[temp]), INT(tmp_int_13[temp]), INT(n1[sp-0x14])
	div $19 $18
	mfhi $21
	# DEF, INT(a5[sp-0x38]), INT(tmp_int_14[temp])
	move $9, $21
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a1[sp-0x28])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $24
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a2[sp-0x2c])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $24
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a3[sp-0x30])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a4[sp-0x34])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $24
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a5[sp-0x38])
	li $2, 1
	move $4, $9
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# DEF, INT(m_1[sp-0x3c]), 10
	li $7, 10
	# DEF, INT(m_2[sp-0x40]), 17
	li $11, 17
	# DEF, INT(m_3[sp-0x44]), 23
	li $6, 23
	# DEF, INT(m_4[sp-0x48]), 37
	li $9, 37
	# DEF, INT(m_5[sp-0x4c]), 43
	li $12, 43
	# DEF, INT(m_6[sp-0x50]), 71
	li $10, 71
	# ADD, INT(tmp_int_15[temp]), INT(m_1[sp-0x3c]), INT(m_2[sp-0x40])
	addu $23, $7, $11
	# MUL, INT(tmp_int_17[temp]), INT(m_3[sp-0x44]), INT(m_4[sp-0x48])
	mult $6 $9
	mflo $25
	# DIV, INT(tmp_int_18[temp]), INT(tmp_int_17[temp]), INT(m_5[sp-0x4c])
	div $25 $12
	mflo $27
	# MOD, INT(tmp_int_19[temp]), INT(tmp_int_18[temp]), INT(m_6[sp-0x50])
	div $27 $10
	mfhi $17
	# SUB, INT(tmp_int_16[temp]), INT(tmp_int_15[temp]), INT(tmp_int_19[temp])
	subu $19, $23, $17
	# MUL, INT(tmp_int_21[temp]), INT(m_2[sp-0x40]), INT(m_3[sp-0x44])
	mult $11 $6
	mflo $21
	# SUB, INT(tmp_int_20[temp]), INT(tmp_int_16[temp]), INT(tmp_int_21[temp])
	subu $25, $19, $21
	# ADD, INT(tmp_int_22[temp]), INT(tmp_int_20[temp]), INT(m_5[sp-0x4c])
	addu $27, $25, $12
	# DEF, INT(r1[sp-0x54]), INT(tmp_int_22[temp])
	move $8, $27
	# SUB, INT(tmp_int_24[temp]), INT(m_2[sp-0x40]), INT(m_3[sp-0x44])
	subu $23, $11, $6
	# MUL, INT(tmp_int_25[temp]), INT(tmp_int_24[temp]), INT(m_4[sp-0x48])
	mult $23 $9
	mflo $17
	# DIV, INT(tmp_int_26[temp]), INT(tmp_int_25[temp]), INT(m_5[sp-0x4c])
	div $17 $12
	mflo $19
	# SUB, INT(tmp_int_28[temp]), INT(m_6[sp-0x50]), INT(m_4[sp-0x48])
	subu $21, $10, $9
	# MOD, INT(tmp_int_27[temp]), INT(tmp_int_26[temp]), INT(tmp_int_28[temp])
	div $19 $21
	mfhi $25
	# MUL, INT(tmp_int_29[temp]), INT(tmp_int_27[temp]), INT(r1[sp-0x54])
	mult $25 $8
	mflo $27
	# ADD, INT(tmp_int_23[temp]), INT(m_1[sp-0x3c]), INT(tmp_int_29[temp])
	addu $23, $7, $27
	# DEF, INT(r2[sp-0x58]), INT(tmp_int_23[temp])
	move $5, $23
	# ADD, INT(tmp_int_30[temp]), INT(m_1[sp-0x3c]), INT(m_2[sp-0x40])
	addu $17, $7, $11
	# MUL, INT(tmp_int_32[temp]), INT(m_3[sp-0x44]), INT(m_4[sp-0x48])
	mult $6 $9
	mflo $19
	# DIV, INT(tmp_int_33[temp]), INT(tmp_int_32[temp]), INT(m_5[sp-0x4c])
	div $19 $12
	mflo $21
	# MOD, INT(tmp_int_34[temp]), INT(tmp_int_33[temp]), INT(m_6[sp-0x50])
	div $21 $10
	mfhi $25
	# SUB, INT(tmp_int_31[temp]), INT(tmp_int_30[temp]), INT(tmp_int_34[temp])
	subu $27, $17, $25
	# MUL, INT(tmp_int_36[temp]), INT(m_2[sp-0x40]), INT(m_3[sp-0x44])
	mult $11 $6
	mflo $23
	# SUB, INT(tmp_int_35[temp]), INT(tmp_int_31[temp]), INT(tmp_int_36[temp])
	subu $19, $27, $23
	# ADD, INT(tmp_int_37[temp]), INT(tmp_int_35[temp]), INT(m_5[sp-0x4c])
	addu $21, $19, $12
	# PRINT_INT INT(m_1[sp-0x3c])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(m_2[sp-0x40])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_3[sp-0x44])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(m_4[sp-0x48])
	li $2, 1
	move $4, $9
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(m_5[sp-0x4c])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(m_6[sp-0x50])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_2[sp-0x40])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(m_3[sp-0x44])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(m_5[sp-0x4c])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(r1[sp-0x54])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(tmp_int_37[temp])
	li $2, 1
	move $4, $21
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# PRINT_INT INT(m_1[sp-0x3c])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_15
	li $2, 4
	la $4, STR_15
	syscall
	# PRINT_INT INT(m_2[sp-0x40])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_3[sp-0x44])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_16
	li $2, 4
	la $4, STR_16
	syscall
	# PRINT_INT INT(m_4[sp-0x48])
	li $2, 1
	move $4, $9
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(m_5[sp-0x4c])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_17
	li $2, 4
	la $4, STR_17
	syscall
	# PRINT_INT INT(m_6[sp-0x50])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_4[sp-0x48])
	li $2, 1
	move $4, $9
	syscall
	# PRINT_STR STR_16
	li $2, 4
	la $4, STR_16
	syscall
	# PRINT_INT INT(r1[sp-0x54])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(r2[sp-0x58])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# PRINT_STR STR_18
	li $2, 4
	la $4, STR_18
	syscall
	# DEF, INT(test_1[sp-0x5c]), 1
	li $7, 1
	# DEF, INT(i[sp-0x60]), 5
	li $5, 5
	# DEF, INT(old[sp-0x64]), INT(i[sp-0x60])
	move $6, $5
	# JUMP WHILE_0
WHILE_0:
	# JUMP L_OR_EXP_3
L_OR_EXP_3:
	# JUMP L_AND_EXP_4
L_AND_EXP_4:
	# GT, INT(tmp_int_38[temp]), INT(i[sp-0x60]), 0
	sgt $17, $5, 0
	# JUMP AND_END_5
	sw $17, -0x98($29)
AND_END_5:
	# JUMP OR_END_6
OR_END_6:
	# Branch INT(tmp_int_38[sp-0x98]) ? WHILE_BODY_1 : WHILE_END_2
	lw $3, -0x98($29)
	bne $3, $0, WHILE_BODY_1
	j WHILE_END_2
WHILE_BODY_1:
	# JUMP B_7
B_7:
	# MUL, INT(tmp_int_39[temp]), INT(test_1[sp-0x5c]), INT(i[sp-0x60])
	mult $7 $5
	mflo $25
	# ASS, INT(test_1[sp-0x5c]), INT(tmp_int_39[temp])
	move $7, $25
	# SUB, INT(tmp_int_40[temp]), INT(i[sp-0x60]), 1
	addiu $27, $5, -1
	# ASS, INT(i[sp-0x60]), INT(tmp_int_40[temp])
	move $5, $27
	# JUMP B_8
B_8:
	# JUMP WHILE_0
	j WHILE_0
WHILE_END_2:
	# JUMP L_OR_EXP_9
L_OR_EXP_9:
	# JUMP L_AND_EXP_10
L_AND_EXP_10:
	# EQ, INT(tmp_int_41[temp]), INT(test_1[sp-0x5c]), 120
	seq $23, $7, 120
	# JUMP AND_END_11
	sw $23, -0x9c($29)
AND_END_11:
	# JUMP OR_END_12
OR_END_12:
	# Branch INT(tmp_int_41[sp-0x9c]) ? IF_BODY_13 : IF_END_14
	lw $3, -0x9c($29)
	bne $3, $0, IF_BODY_13
	j IF_END_14
IF_BODY_13:
	# JUMP B_15
B_15:
	# ADD, INT(tmp_int_42[temp]), INT(test_1[sp-0x5c]), 7
	addiu $19, $7, 7
	# ASS, INT(test_1[sp-0x5c]), INT(tmp_int_42[temp])
	move $7, $19
	# JUMP B_16
B_16:
	# JUMP IF_END_14
IF_END_14:
	# JUMP L_OR_EXP_17
L_OR_EXP_17:
	# JUMP L_AND_EXP_18
L_AND_EXP_18:
	# GT, INT(tmp_int_43[temp]), INT(test_1[sp-0x5c]), 119
	sgt $21, $7, 119
	# EQ, INT(tmp_int_44[temp]), INT(tmp_int_43[temp]), 1
	seq $17, $21, 1
	# JUMP AND_END_19
	sw $17, -0xa0($29)
AND_END_19:
	# JUMP OR_END_20
OR_END_20:
	# Branch INT(tmp_int_44[sp-0xa0]) ? IF_BODY_21 : IF_END_22
	lw $3, -0xa0($29)
	bne $3, $0, IF_BODY_21
	j IF_END_22
IF_BODY_21:
	# JUMP B_23
B_23:
	# ADD, INT(tmp_int_45[temp]), INT(test_1[sp-0x5c]), 3
	addiu $25, $7, 3
	# ASS, INT(test_1[sp-0x5c]), INT(tmp_int_45[temp])
	move $7, $25
	# JUMP B_24
B_24:
	# JUMP IF_END_22
IF_END_22:
	# JUMP L_OR_EXP_25
L_OR_EXP_25:
	# JUMP L_AND_EXP_26
L_AND_EXP_26:
	# GE, INT(tmp_int_46[temp]), 0, 1
	li $27, 0
	# JUMP AND_END_27
	sw $27, -0xa4($29)
AND_END_27:
	# JUMP OR_END_28
OR_END_28:
	# Branch INT(tmp_int_46[sp-0xa4]) ? IF_BODY_29 : IF_END_30
	lw $3, -0xa4($29)
	bne $3, $0, IF_BODY_29
	j IF_END_30
IF_BODY_29:
	# JUMP B_31
B_31:
	# PRINT_STR STR_19
	li $2, 4
	la $4, STR_19
	syscall
	# JUMP B_32
B_32:
	# JUMP IF_END_30
IF_END_30:
	# JUMP L_OR_EXP_33
L_OR_EXP_33:
	# JUMP L_AND_EXP_34
L_AND_EXP_34:
	# LE, INT(tmp_int_47[temp]), 1, 0
	li $23, 0
	# JUMP AND_END_35
	sw $23, -0xa8($29)
AND_END_35:
	# JUMP OR_END_36
OR_END_36:
	# Branch INT(tmp_int_47[sp-0xa8]) ? IF_BODY_37 : IF_END_38
	lw $3, -0xa8($29)
	bne $3, $0, IF_BODY_37
	j IF_END_38
IF_BODY_37:
	# JUMP B_39
B_39:
	# PRINT_STR STR_19
	li $2, 4
	la $4, STR_19
	syscall
	# JUMP B_40
B_40:
	# JUMP IF_END_38
IF_END_38:
	# JUMP L_OR_EXP_41
L_OR_EXP_41:
	# JUMP L_AND_EXP_42
L_AND_EXP_42:
	# NOT, INT(tmp_int_48[temp]), 1
	seq $19, $0, 1
	# JUMP AND_END_43
	sw $19, -0xac($29)
AND_END_43:
	# JUMP OR_END_44
OR_END_44:
	# Branch INT(tmp_int_48[sp-0xac]) ? IF_BODY_45 : IF_END_46
	lw $3, -0xac($29)
	bne $3, $0, IF_BODY_45
	j IF_END_46
IF_BODY_45:
	# JUMP B_47
B_47:
	# PRINT_STR STR_20
	li $2, 4
	la $4, STR_20
	syscall
	# JUMP B_48
B_48:
	# JUMP IF_END_46
IF_END_46:
	# PRINT_INT INT(old[sp-0x64])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_21
	li $2, 4
	la $4, STR_21
	syscall
	# PRINT_INT INT(test_1[sp-0x5c])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# DEF, INT(nn_1[sp-0x68]), 1
	li $11, 1
	# DEF, INT(nn2[sp-0x6c]), -1
	li $9, -1
	# DEF, INT(nn3[sp-0x70]), -1
	li $7, -1
	# DEF, INT(nn4[sp-0x74]), -1
	li $12, -1
	# DEF, INT(nn5[sp-0x78]), 1
	li $8, 1
	# DEF, INT(nn6[sp-0x7c]), -1
	li $6, -1
	# DEF, INT(nn7[sp-0x80]), 1
	li $10, 1
	# DEF, INT(nn8[sp-0x84]), 1
	li $5, 1
	# JUMP L_OR_EXP_49
L_OR_EXP_49:
	# JUMP L_AND_EXP_50
L_AND_EXP_50:
	# ADD, INT(tmp_int_49[temp]), INT(nn_1[sp-0x68]), INT(nn2[sp-0x6c])
	addu $21, $11, $9
	# ADD, INT(tmp_int_50[temp]), INT(tmp_int_49[temp]), INT(nn3[sp-0x70])
	addu $17, $21, $7
	# ADD, INT(tmp_int_51[temp]), INT(tmp_int_50[temp]), INT(nn4[sp-0x74])
	addu $25, $17, $12
	# ADD, INT(tmp_int_52[temp]), INT(tmp_int_51[temp]), INT(nn5[sp-0x78])
	addu $27, $25, $8
	# ADD, INT(tmp_int_53[temp]), INT(tmp_int_52[temp]), INT(nn6[sp-0x7c])
	addu $23, $27, $6
	# ADD, INT(tmp_int_54[temp]), INT(tmp_int_53[temp]), INT(nn7[sp-0x80])
	addu $19, $23, $10
	# ADD, INT(tmp_int_55[temp]), INT(tmp_int_54[temp]), INT(nn8[sp-0x84])
	addu $21, $19, $5
	# NEQ, INT(tmp_int_56[temp]), INT(tmp_int_55[temp]), 0
	sne $17, $21, 0
	# JUMP AND_END_51
	sw $17, -0xb0($29)
AND_END_51:
	# JUMP OR_END_52
OR_END_52:
	# Branch INT(tmp_int_56[sp-0xb0]) ? IF_BODY_53 : IF_END_54
	lw $3, -0xb0($29)
	bne $3, $0, IF_BODY_53
	j IF_END_54
IF_BODY_53:
	# JUMP IF_END_54
IF_END_54:
	# JUMP L_OR_EXP_55
L_OR_EXP_55:
	# JUMP L_AND_EXP_56
L_AND_EXP_56:
	# ADD, INT(tmp_int_57[temp]), INT(nn_1[sp-0x68]), INT(nn2[sp-0x6c])
	addu $25, $11, $9
	# ADD, INT(tmp_int_58[temp]), INT(tmp_int_57[temp]), INT(nn3[sp-0x70])
	addu $27, $25, $7
	# ADD, INT(tmp_int_59[temp]), INT(tmp_int_58[temp]), INT(nn4[sp-0x74])
	addu $23, $27, $12
	# ADD, INT(tmp_int_60[temp]), INT(tmp_int_59[temp]), INT(nn5[sp-0x78])
	addu $19, $23, $8
	# ADD, INT(tmp_int_61[temp]), INT(tmp_int_60[temp]), INT(nn6[sp-0x7c])
	addu $21, $19, $6
	# ADD, INT(tmp_int_62[temp]), INT(tmp_int_61[temp]), INT(nn7[sp-0x80])
	addu $17, $21, $10
	# ADD, INT(tmp_int_63[temp]), INT(tmp_int_62[temp]), INT(nn8[sp-0x84])
	addu $25, $17, $5
	# NEQ, INT(tmp_int_64[temp]), INT(tmp_int_63[temp]), 0
	sne $27, $25, 0
	# JUMP AND_END_57
	sw $27, -0xb4($29)
AND_END_57:
	# JUMP OR_END_58
OR_END_58:
	# Branch INT(tmp_int_64[sp-0xb4]) ? IF_BODY_59 : IF_END_60
	lw $3, -0xb4($29)
	bne $3, $0, IF_BODY_59
	j IF_END_60
IF_BODY_59:
	# PRINT_STR STR_22
	li $2, 4
	la $4, STR_22
	syscall
	# JUMP IF_END_60
IF_END_60:
	# DEF, INT(max_int[sp-0x88]), 2147483647
	li $6, 2147483647
	# DEF, INT(min_int[sp-0x8c]), -2147483647
	li $5, -2147483647
	# ADD, INT(tmp_int_65[temp]), INT(max_int[sp-0x88]), INT(min_int[sp-0x8c])
	addu $23, $6, $5
	# PRINT_STR STR_23
	li $2, 4
	la $4, STR_23
	syscall
	# PRINT_INT INT(max_int[sp-0x88])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_24
	li $2, 4
	la $4, STR_24
	syscall
	# PRINT_INT INT(min_int[sp-0x8c])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_25
	li $2, 4
	la $4, STR_25
	syscall
	# PRINT_INT INT(tmp_int_65[temp])
	li $2, 1
	move $4, $23
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# DEF, INT(remain[sp-0x90]), 1
	li $6, 1
	# DEF, INT(remain_index[sp-0x94]), 0
	li $5, 0
	# JUMP WHILE_61
WHILE_61:
	# JUMP L_OR_EXP_64
L_OR_EXP_64:
	# JUMP L_AND_EXP_65
L_AND_EXP_65:
	# LT, INT(tmp_int_66[temp]), INT(remain_index[sp-0x94]), INT(remain[sp-0x90])
	slt $19, $5, $6
	# JUMP AND_END_66
	sw $19, -0xb8($29)
AND_END_66:
	# JUMP OR_END_67
OR_END_67:
	# Branch INT(tmp_int_66[sp-0xb8]) ? WHILE_BODY_62 : WHILE_END_63
	lw $3, -0xb8($29)
	bne $3, $0, WHILE_BODY_62
	j WHILE_END_63
WHILE_BODY_62:
	# JUMP B_68
B_68:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# ADD, INT(tmp_int_67[temp]), INT(remain_index[sp-0x94]), 1
	addiu $21, $5, 1
	# ASS, INT(remain_index[sp-0x94]), INT(tmp_int_67[temp])
	move $5, $21
	# JUMP B_69
B_69:
	# JUMP WHILE_61
	j WHILE_61
WHILE_END_63:
	# RETURN 0
	li $2, 10
	syscall
	
