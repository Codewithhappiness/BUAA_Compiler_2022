# Yuelin's Compiler

.data
	global:
	1 2 2 3 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	.space 4
	STR_1: .asciiz "19373630\n"
	STR_2: .asciiz "\n"

.text
	la $gp, global
	j FUNC_main
FUNC_output_id:
	# JUMP L_OR_EXP_0
L_OR_EXP_0:
	# JUMP L_AND_EXP_1
L_AND_EXP_1:
	# ASS, INT(ti_12579[temp]), 1
	li $17, 1
	# JUMP AND_3
AND_3:
	# ASS, INT(ti_12579[temp]), 0
	li $17, 0
	# JUMP AND_END_2
AND_END_2:
	# ASS, INT(ti_12580[temp]), INT(ti_12579[temp])
	move $18, $17
	# Branch INT(ti_12579[temp]) ? OR_END_5 : OR_6
	sw $18, -0x4($29)
	bne $17, $0, OR_END_5
OR_6:
	# JUMP L_AND_EXP_8
L_AND_EXP_8:
	# JUMP AND_END_9
AND_END_9:
	# ASS, INT(ti_12580[sp-0x4]), 0
	li $19, 0
	# OR, INT(ti_12580[sp-0x4]), INT(ti_12580[sp-0x4]), 1
	li $19, 1
	# Branch INT(ti_12580[sp-0x4]) ? OR_END_5 : OR_7
	sw $19, -0x4($29)
	bne $19, $0, OR_END_5
OR_7:
	# JUMP OR_END_5
OR_END_5:
	# Branch INT(ti_12580[sp-0x4]) ? IF_BODY_11 : IF_END_12
	lw $20, -0x4($29)
	beq $20, $0, IF_END_12
IF_BODY_11:
	# JUMP B_13
B_13:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_14
B_14:
	# JUMP IF_END_12
IF_END_12:
	# RETURN VOID
	jr $ra
	
FUNC_output_a_plus_b:
	lw $6, -0x4($29)
	lw $5, -0x8($29)
	# ADD, INT(ti_12581[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $6, $5
	# PRINT_INT INT(ti_12581[temp])
	li $2, 1
	move $4, $17
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_A_plus_B:
	lw $6, -0x4($29)
	lw $5, -0x8($29)
	# ADD, INT(ti_12582[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $6, $5
	# RETURN INT(ti_12582[temp])
	move $2, $17
	jr $ra
	
FUNC_return_one:
	# RETURN 1
	li $2, 1
	jr $ra
	
FUNC_factorial:
	lw $5, -0x4($29)
	# JUMP L_OR_EXP_19
L_OR_EXP_19:
	# JUMP L_AND_EXP_20
L_AND_EXP_20:
	# MUL, INT(ti_12583[temp]), INT(n[sp-0x4]), 4
	sll $17, $5, 2
	# ADD, INT(ti_12583[temp]), INT(ti_12583[temp]), 0
	# LOAD INT(ti_12584[temp]), INT(ti_12583[temp])[ARRAY(array[data+0x24])]
	addu $2, $28, $17
	lw $18, 0x24($2)
	# NEQ, INT(ti_12585[temp]), INT(ti_12584[temp]), 0
	sne $19, $18, 0
	# JUMP AND_END_21
AND_END_21:
	# JUMP OR_END_22
OR_END_22:
	# Branch INT(ti_12585[temp]) ? IF_BODY_23 : IF_ELSE_25
	beq $19, $0, IF_ELSE_25
IF_BODY_23:
	# JUMP B_26
B_26:
	# MUL, INT(ti_12586[temp]), INT(n[sp-0x4]), 4
	sll $20, $5, 2
	# ADD, INT(ti_12586[temp]), INT(ti_12586[temp]), 0
	# LOAD INT(ti_12587[temp]), INT(ti_12586[temp])[ARRAY(array[data+0x24])]
	addu $2, $28, $20
	lw $21, 0x24($2)
	# RETURN INT(ti_12587[temp])
	move $2, $21
	jr $ra
	# JUMP B_27
B_27:
	# JUMP IF_END_24
	j IF_END_24
IF_ELSE_25:
	# JUMP B_28
B_28:
	# SUB, INT(ti_12589[temp]), INT(n[sp-0x4]), 1
	addiu $22, $5, -1
	# MUL, INT(ti_12588[temp]), INT(ti_12589[temp]), 4
	sll $23, $22, 2
	# ADD, INT(ti_12588[temp]), INT(ti_12588[temp]), 0
	# SUB, INT(ti_12590[temp]), INT(n[sp-0x4]), 1
	addiu $24, $5, -1
	# Call FUNC_factorial; Params: INT(ti_12590[temp]); RET INT(ti_12591[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -16
	sw $24, -0x4($4)
	sw $23, -0x8($29)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 16
	lw $31, 0x0($29)
	move $25, $2
	lw $5, -0x4($29)
	# STORE INT(ti_12591[temp]), INT(ti_12588[sp-0x8])[ARRAY(array[data+0x24])]
	lw $26, -0x8($29)
	addu $2, $28, $26
	sw $25, 0x24($2)
	# MUL, INT(ti_12592[temp]), INT(n[sp-0x4]), 4
	sll $27, $5, 2
	# ADD, INT(ti_12592[temp]), INT(ti_12592[temp]), 0
	# SUB, INT(ti_12594[temp]), INT(n[sp-0x4]), 1
	addiu $17, $5, -1
	# MUL, INT(ti_12593[temp]), INT(ti_12594[temp]), 4
	sll $18, $17, 2
	# ADD, INT(ti_12593[temp]), INT(ti_12593[temp]), 0
	# LOAD INT(ti_12595[temp]), INT(ti_12593[temp])[ARRAY(array[data+0x24])]
	addu $2, $28, $18
	lw $19, 0x24($2)
	# MUL, INT(ti_12596[temp]), INT(ti_12595[temp]), INT(n[sp-0x4])
	mult $19, $5
	mflo $20
	# STORE INT(ti_12596[temp]), INT(ti_12592[temp])[ARRAY(array[data+0x24])]
	addu $2, $28, $27
	sw $20, 0x24($2)
	# MUL, INT(ti_12597[temp]), INT(n[sp-0x4]), 4
	sll $21, $5, 2
	# ADD, INT(ti_12597[temp]), INT(ti_12597[temp]), 0
	# LOAD INT(ti_12598[temp]), INT(ti_12597[temp])[ARRAY(array[data+0x24])]
	addu $2, $28, $21
	lw $22, 0x24($2)
	# RETURN INT(ti_12598[temp])
	move $2, $22
	jr $ra
	# JUMP B_29
B_29:
	# JUMP IF_END_24
IF_END_24:
	# RETURN 0
	li $2, 0
	jr $ra
	
FUNC_isPrime:
	lw $5, -0x4($29)
	# DEF, INT(i[sp-0x8]), 3
	li $6, 3
	# JUMP L_OR_EXP_31
L_OR_EXP_31:
	# JUMP L_AND_EXP_32
L_AND_EXP_32:
	# LE, INT(ti_12599[temp]), INT(n[sp-0x4]), 0
	sle $17, $5, 0
	# JUMP AND_END_33
AND_END_33:
	# JUMP OR_END_34
OR_END_34:
	# Branch INT(ti_12599[temp]) ? IF_BODY_35 : IF_END_36
	beq $17, $0, IF_END_36
IF_BODY_35:
	# JUMP B_37
B_37:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_38
B_38:
	# JUMP IF_END_36
IF_END_36:
	# JUMP L_OR_EXP_39
L_OR_EXP_39:
	# JUMP L_AND_EXP_40
L_AND_EXP_40:
	# MOD, INT(ti_12600[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_841
	andi $18, $5, 1
	j DIV_END_842
DIV_841:
	subu $5, $0, $5
	andi $18, $5, 1
	subu $18, $0, $18
DIV_END_842:
	# EQ, INT(ti_12601[temp]), INT(ti_12600[temp]), 0
	seq $19, $18, 0
	# JUMP AND_END_41
AND_END_41:
	# JUMP OR_END_42
OR_END_42:
	# Branch INT(ti_12601[temp]) ? IF_BODY_43 : IF_END_44
	beq $19, $0, IF_END_44
IF_BODY_43:
	# JUMP B_45
B_45:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_46
B_46:
	# JUMP IF_END_44
IF_END_44:
	# JUMP L_OR_EXP_50
L_OR_EXP_50:
	# JUMP L_AND_EXP_51
L_AND_EXP_51:
	# DIV, INT(ti_12602[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_843
	srl $20, $5, 1
	j DIV_END_844
DIV_843:
	subu $5, $0, $5
	srl $20, $5, 1
	subu $20, $0, $20
DIV_END_844:
	# LT, INT(ti_12603[temp]), INT(i[sp-0x8]), INT(ti_12602[temp])
	slt $21, $6, $20
	# JUMP AND_END_52
AND_END_52:
	# JUMP OR_END_53
OR_END_53:
	# Branch INT(ti_12603[temp]) ? DO_BODY_47 : DO_END_49
	beq $21, $0, DO_END_49
	# JUMP DO_BODY_47
DO_BODY_47:
	# JUMP B_54
B_54:
	# JUMP L_OR_EXP_55
	j L_OR_EXP_55
	# JUMP B_63
	j B_63
L_OR_EXP_55:
	# JUMP L_AND_EXP_56
L_AND_EXP_56:
	# MOD, INT(ti_12604[temp]), INT(n[sp-0x4]), INT(i[sp-0x8])
	div $5 $6
	mfhi $22
	# EQ, INT(ti_12605[temp]), INT(ti_12604[temp]), 0
	seq $23, $22, 0
	# JUMP AND_END_57
AND_END_57:
	# JUMP OR_END_58
OR_END_58:
	# Branch INT(ti_12605[temp]) ? IF_BODY_59 : IF_END_60
	beq $23, $0, IF_END_60
IF_BODY_59:
	# JUMP B_61
B_61:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_62
B_62:
	# JUMP IF_END_60
IF_END_60:
	# ADD, INT(i[sp-0x8]), INT(i[sp-0x8]), 2
	addiu $6, $6, 2
	# JUMP B_63
B_63:
	# JUMP DO_CHECK_48
DO_CHECK_48:
	# JUMP L_OR_EXP_64
L_OR_EXP_64:
	# JUMP L_AND_EXP_65
L_AND_EXP_65:
	# DIV, INT(ti_12607[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_845
	srl $24, $5, 1
	j DIV_END_846
DIV_845:
	subu $5, $0, $5
	srl $24, $5, 1
	subu $24, $0, $24
DIV_END_846:
	# LT, INT(ti_12608[temp]), INT(i[sp-0x8]), INT(ti_12607[temp])
	slt $25, $6, $24
	# JUMP AND_END_66
AND_END_66:
	# JUMP OR_END_67
OR_END_67:
	# Branch INT(ti_12608[temp]) ? DO_BODY_47 : DO_END_49
	bne $25, $0, DO_BODY_47
	# JUMP DO_END_49
DO_END_49:
	# RETURN 1
	li $2, 1
	jr $ra
	
FUNC_sumMatrix:
	lw $5, -0x4($29)
	# DEF, INT(i[sp-0x8]), 0
	li $6, 0
	# DEF, INT(sum[sp-0x10]), 0
	li $7, 0
	# JUMP L_OR_EXP_72
L_OR_EXP_72:
	# JUMP L_AND_EXP_73
L_AND_EXP_73:
	# LT, INT(ti_12609[temp]), INT(i[sp-0x8]), 10
	li $3, 10
	slt $17, $6, $3
	# JUMP AND_END_74
AND_END_74:
	# JUMP OR_END_75
OR_END_75:
	# Branch INT(ti_12609[temp]) ? DO_BODY_69 : DO_END_71
	beq $17, $0, DO_END_71
	# JUMP DO_BODY_69
DO_BODY_69:
	# JUMP B_76
B_76:
	# ASS, INT(j[sp-0xc]), 0
	li $8, 0
	# JUMP L_OR_EXP_80
	j L_OR_EXP_80
	# JUMP B_90
	j B_90
L_OR_EXP_80:
	# JUMP L_AND_EXP_81
L_AND_EXP_81:
	# LT, INT(ti_12610[temp]), INT(j[sp-0xc]), 10
	li $3, 10
	slt $18, $8, $3
	# JUMP AND_END_82
AND_END_82:
	# JUMP OR_END_83
OR_END_83:
	# Branch INT(ti_12610[temp]) ? DO_BODY_77 : DO_END_79
	beq $18, $0, DO_END_79
	# JUMP DO_BODY_77
DO_BODY_77:
	# JUMP B_84
B_84:
	# MUL, INT(ti_12611[temp]), INT(j[sp-0xc]), 4
	sll $19, $8, 2
	# ADD, INT(ti_12611[temp]), INT(ti_12611[temp]), 0
	# MUL, INT(ti_12612[temp]), INT(i[sp-0x8]), 40
	sll $30, $6, 5
	sll $3, $6, 3
	addu $20, $30, $3
	# ADD, INT(ti_12612[temp]), INT(ti_12612[temp]), INT(ti_12611[temp])
	addu $20, $20, $19
	# LOAD INT(ti_12613[temp]), INT(ti_12612[temp])[ARRAY(array_f[sp-0x4])]
	addu $2, $5, $20
	lw $21, 0x0($2)
	# ADD, INT(sum[sp-0x10]), INT(sum[sp-0x10]), INT(ti_12613[temp])
	addu $7, $7, $21
	# ADD, INT(j[sp-0xc]), INT(j[sp-0xc]), 1
	addiu $8, $8, 1
	# JUMP B_85
B_85:
	# JUMP DO_CHECK_78
DO_CHECK_78:
	# JUMP L_OR_EXP_86
L_OR_EXP_86:
	# JUMP L_AND_EXP_87
L_AND_EXP_87:
	# LT, INT(ti_12616[temp]), INT(j[sp-0xc]), 10
	li $3, 10
	slt $22, $8, $3
	# JUMP AND_END_88
AND_END_88:
	# JUMP OR_END_89
OR_END_89:
	# Branch INT(ti_12616[temp]) ? DO_BODY_77 : DO_END_79
	bne $22, $0, DO_BODY_77
	# JUMP DO_END_79
DO_END_79:
	# ADD, INT(i[sp-0x8]), INT(i[sp-0x8]), 1
	addiu $6, $6, 1
	# JUMP B_90
B_90:
	# JUMP DO_CHECK_70
DO_CHECK_70:
	# JUMP L_OR_EXP_91
L_OR_EXP_91:
	# JUMP L_AND_EXP_92
L_AND_EXP_92:
	# LT, INT(ti_12618[temp]), INT(i[sp-0x8]), 10
	li $3, 10
	slt $23, $6, $3
	# JUMP AND_END_93
AND_END_93:
	# JUMP OR_END_94
OR_END_94:
	# Branch INT(ti_12618[temp]) ? DO_BODY_69 : DO_END_71
	bne $23, $0, DO_BODY_69
	# JUMP DO_END_71
DO_END_71:
	# RETURN INT(sum[sp-0x10])
	move $2, $7
	jr $ra
	
FUNC_matrixMulti:
	lw $5, -0x4($29)
	lw $6, -0x8($29)
	lw $7, -0xc($29)
	# DEF, INT(i[sp-0x1a0]), 0
	li $9, 0
	# JUMP L_OR_EXP_99
L_OR_EXP_99:
	# JUMP L_AND_EXP_100
L_AND_EXP_100:
	# LT, INT(ti_12619[temp]), INT(i[sp-0x1a0]), 10
	li $3, 10
	slt $17, $9, $3
	# JUMP AND_END_101
AND_END_101:
	# JUMP OR_END_102
OR_END_102:
	# Branch INT(ti_12619[temp]) ? DO_BODY_96 : DO_END_98
	beq $17, $0, DO_END_98
	# JUMP DO_BODY_96
DO_BODY_96:
	# JUMP B_103
B_103:
	# ASS, INT(j[sp-0x1a4]), 0
	li $7, 0
	# JUMP L_OR_EXP_107
	j L_OR_EXP_107
	# JUMP B_130
	j B_130
L_OR_EXP_107:
	# JUMP L_AND_EXP_108
L_AND_EXP_108:
	# LT, INT(ti_12620[temp]), INT(j[sp-0x1a4]), 10
	li $3, 10
	slt $18, $7, $3
	# JUMP AND_END_109
AND_END_109:
	# JUMP OR_END_110
OR_END_110:
	# Branch INT(ti_12620[temp]) ? DO_BODY_104 : DO_END_106
	beq $18, $0, DO_END_106
	# JUMP DO_BODY_104
DO_BODY_104:
	# JUMP B_111
B_111:
	# ASS, INT(k[sp-0x1a8]), 0
	li $8, 0
	# MUL, INT(ti_12621[temp]), INT(j[sp-0x1a4]), 4
	sll $19, $7, 2
	# ADD, INT(ti_12621[temp]), INT(ti_12621[temp]), 0
	# MUL, INT(ti_12622[temp]), INT(i[sp-0x1a0]), 40
	sll $30, $9, 5
	sll $3, $9, 3
	addu $20, $30, $3
	# ADD, INT(ti_12622[temp]), INT(ti_12622[temp]), INT(ti_12621[temp])
	addu $20, $20, $19
	# STORE 0, INT(ti_12622[temp])[ARRAY(matrix_c[sp-0x19c])]
	li $3, 0
	addu $2, $29, $20
	sw $3, -0x19c($2)
	# JUMP L_OR_EXP_115
	j L_OR_EXP_115
	# JUMP B_125
	j B_125
L_OR_EXP_115:
	# JUMP L_AND_EXP_116
L_AND_EXP_116:
	# LT, INT(ti_12623[temp]), INT(k[sp-0x1a8]), 10
	li $3, 10
	slt $21, $8, $3
	# JUMP AND_END_117
AND_END_117:
	# JUMP OR_END_118
OR_END_118:
	# Branch INT(ti_12623[temp]) ? DO_BODY_112 : DO_END_114
	beq $21, $0, DO_END_114
	# JUMP DO_BODY_112
DO_BODY_112:
	# JUMP B_119
B_119:
	# MUL, INT(ti_12624[temp]), INT(j[sp-0x1a4]), 4
	sll $22, $7, 2
	# ADD, INT(ti_12624[temp]), INT(ti_12624[temp]), 0
	# MUL, INT(ti_12625[temp]), INT(i[sp-0x1a0]), 40
	sll $30, $9, 5
	sll $3, $9, 3
	addu $23, $30, $3
	# ADD, INT(ti_12625[temp]), INT(ti_12625[temp]), INT(ti_12624[temp])
	addu $23, $23, $22
	# MUL, INT(ti_12626[temp]), INT(j[sp-0x1a4]), 4
	sll $24, $7, 2
	# ADD, INT(ti_12626[temp]), INT(ti_12626[temp]), 0
	# MUL, INT(ti_12627[temp]), INT(i[sp-0x1a0]), 40
	sll $30, $9, 5
	sll $3, $9, 3
	addu $25, $30, $3
	# ADD, INT(ti_12627[temp]), INT(ti_12627[temp]), INT(ti_12626[temp])
	addu $25, $25, $24
	# LOAD INT(ti_12628[temp]), INT(ti_12627[temp])[ARRAY(matrix_c[sp-0x19c])]
	addu $2, $29, $25
	lw $26, -0x19c($2)
	# MUL, INT(ti_12629[temp]), INT(k[sp-0x1a8]), 4
	sll $27, $8, 2
	# ADD, INT(ti_12629[temp]), INT(ti_12629[temp]), 0
	# MUL, INT(ti_12630[temp]), INT(i[sp-0x1a0]), 40
	sll $30, $9, 5
	sll $3, $9, 3
	addu $17, $30, $3
	# ADD, INT(ti_12630[temp]), INT(ti_12630[temp]), INT(ti_12629[temp])
	addu $17, $17, $27
	# LOAD INT(ti_12631[temp]), INT(ti_12630[temp])[ARRAY(matrix_a[sp-0x4])]
	addu $2, $5, $17
	lw $18, 0x0($2)
	# MUL, INT(ti_12632[temp]), INT(j[sp-0x1a4]), 4
	sll $19, $7, 2
	# ADD, INT(ti_12632[temp]), INT(ti_12632[temp]), 0
	# MUL, INT(ti_12633[temp]), INT(k[sp-0x1a8]), 40
	sll $30, $8, 5
	sll $3, $8, 3
	addu $20, $30, $3
	# ADD, INT(ti_12633[temp]), INT(ti_12633[temp]), INT(ti_12632[temp])
	addu $20, $20, $19
	# LOAD INT(ti_12634[temp]), INT(ti_12633[temp])[ARRAY(matrix_b[sp-0x8])]
	addu $2, $6, $20
	lw $21, 0x0($2)
	# MUL, INT(ti_12635[temp]), INT(ti_12631[temp]), INT(ti_12634[temp])
	mult $18, $21
	mflo $22
	# ADD, INT(ti_12636[temp]), INT(ti_12628[temp]), INT(ti_12635[temp])
	addu $24, $26, $22
	# STORE INT(ti_12636[temp]), INT(ti_12625[temp])[ARRAY(matrix_c[sp-0x19c])]
	addu $2, $29, $23
	sw $24, -0x19c($2)
	# ADD, INT(k[sp-0x1a8]), INT(k[sp-0x1a8]), 1
	addiu $8, $8, 1
	# JUMP B_120
B_120:
	# JUMP DO_CHECK_113
DO_CHECK_113:
	# JUMP L_OR_EXP_121
L_OR_EXP_121:
	# JUMP L_AND_EXP_122
L_AND_EXP_122:
	# LT, INT(ti_12638[temp]), INT(k[sp-0x1a8]), 10
	li $3, 10
	slt $25, $8, $3
	# JUMP AND_END_123
AND_END_123:
	# JUMP OR_END_124
OR_END_124:
	# Branch INT(ti_12638[temp]) ? DO_BODY_112 : DO_END_114
	bne $25, $0, DO_BODY_112
	# JUMP DO_END_114
DO_END_114:
	# ADD, INT(j[sp-0x1a4]), INT(j[sp-0x1a4]), 1
	addiu $7, $7, 1
	# JUMP B_125
B_125:
	# JUMP DO_CHECK_105
DO_CHECK_105:
	# JUMP L_OR_EXP_126
L_OR_EXP_126:
	# JUMP L_AND_EXP_127
L_AND_EXP_127:
	# LT, INT(ti_12640[temp]), INT(j[sp-0x1a4]), 10
	li $3, 10
	slt $27, $7, $3
	# JUMP AND_END_128
AND_END_128:
	# JUMP OR_END_129
OR_END_129:
	# Branch INT(ti_12640[temp]) ? DO_BODY_104 : DO_END_106
	bne $27, $0, DO_BODY_104
	# JUMP DO_END_106
DO_END_106:
	# ADD, INT(i[sp-0x1a0]), INT(i[sp-0x1a0]), 1
	addiu $9, $9, 1
	# JUMP B_130
B_130:
	# JUMP DO_CHECK_97
DO_CHECK_97:
	# JUMP L_OR_EXP_131
L_OR_EXP_131:
	# JUMP L_AND_EXP_132
L_AND_EXP_132:
	# LT, INT(ti_12642[temp]), INT(i[sp-0x1a0]), 10
	li $3, 10
	slt $17, $9, $3
	# JUMP AND_END_133
AND_END_133:
	# JUMP OR_END_134
OR_END_134:
	# Branch INT(ti_12642[temp]) ? DO_BODY_96 : DO_END_98
	bne $17, $0, DO_BODY_96
	# JUMP DO_END_98
DO_END_98:
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+0)->POINTER(tp_1927[sp-0x1ac])
	addiu $19, $29, -412
	# ASS, ARRAY(INLINE_array_f_1[sp-0x1ac]), POINTER(tp_1927[sp-0x1ac])
	move $7, $19
	# STORE POINTER(tp_1927[sp-0x1ac]), -428[SPECIAL_SP(ts_1928[temp])]
	sw $19, -0x1ac($29)
	# JUMP INLINE_sumMatrix_BEGIN_1
INLINE_sumMatrix_BEGIN_1:
	# DEF, INT(INLINE_i_1[sp-0x1b0]), 0
	li $5, 0
	# DEF, INT(INLINE_sum_1[sp-0x1b8]), 0
	li $8, 0
	# JUMP L_OR_EXP_138
L_OR_EXP_138:
	# JUMP L_AND_EXP_139
L_AND_EXP_139:
	# LT, INT(ti_12644[temp]), INT(INLINE_i_1[sp-0x1b0]), 10
	li $3, 10
	slt $20, $5, $3
	# JUMP AND_END_140
AND_END_140:
	# JUMP OR_END_141
OR_END_141:
	# Branch INT(ti_12644[temp]) ? DO_BODY_135 : DO_END_137
	beq $20, $0, DO_END_137
	# JUMP DO_BODY_135
DO_BODY_135:
	# JUMP B_142
B_142:
	# ASS, INT(INLINE_j_1[sp-0x1b4]), 0
	li $6, 0
	# JUMP L_OR_EXP_146
	j L_OR_EXP_146
	# JUMP B_156
	j B_156
L_OR_EXP_146:
	# JUMP L_AND_EXP_147
L_AND_EXP_147:
	# LT, INT(ti_12645[temp]), INT(INLINE_j_1[sp-0x1b4]), 10
	li $3, 10
	slt $18, $6, $3
	# JUMP AND_END_148
AND_END_148:
	# JUMP OR_END_149
OR_END_149:
	# Branch INT(ti_12645[temp]) ? DO_BODY_143 : DO_END_145
	beq $18, $0, DO_END_145
	# JUMP DO_BODY_143
DO_BODY_143:
	# JUMP B_150
B_150:
	# MUL, INT(ti_12646[temp]), INT(INLINE_j_1[sp-0x1b4]), 4
	sll $21, $6, 2
	# ADD, INT(ti_12646[temp]), INT(ti_12646[temp]), 0
	# MUL, INT(ti_12647[temp]), INT(INLINE_i_1[sp-0x1b0]), 40
	sll $30, $5, 5
	sll $3, $5, 3
	addu $26, $30, $3
	# ADD, INT(ti_12647[temp]), INT(ti_12647[temp]), INT(ti_12646[temp])
	addu $26, $26, $21
	# LOAD INT(ti_12648[temp]), INT(ti_12647[temp])[ARRAY(INLINE_array_f_1[sp-0x1ac])]
	lw $23, -0x1ac($29)
	addu $2, $23, $26
	lw $22, 0x0($2)
	# ADD, INT(INLINE_sum_1[sp-0x1b8]), INT(INLINE_sum_1[sp-0x1b8]), INT(ti_12648[temp])
	addu $8, $8, $22
	# ADD, INT(INLINE_j_1[sp-0x1b4]), INT(INLINE_j_1[sp-0x1b4]), 1
	addiu $6, $6, 1
	# JUMP B_151
B_151:
	# JUMP DO_CHECK_144
DO_CHECK_144:
	# JUMP L_OR_EXP_152
L_OR_EXP_152:
	# JUMP L_AND_EXP_153
L_AND_EXP_153:
	# LT, INT(ti_12651[temp]), INT(INLINE_j_1[sp-0x1b4]), 10
	li $3, 10
	slt $24, $6, $3
	# JUMP AND_END_154
AND_END_154:
	# JUMP OR_END_155
OR_END_155:
	# Branch INT(ti_12651[temp]) ? DO_BODY_143 : DO_END_145
	sw $23, -0x1ac($29)
	bne $24, $0, DO_BODY_143
	# JUMP DO_END_145
DO_END_145:
	# ADD, INT(INLINE_i_1[sp-0x1b0]), INT(INLINE_i_1[sp-0x1b0]), 1
	addiu $5, $5, 1
	# JUMP B_156
B_156:
	# JUMP DO_CHECK_136
DO_CHECK_136:
	# JUMP L_OR_EXP_157
L_OR_EXP_157:
	# JUMP L_AND_EXP_158
L_AND_EXP_158:
	# LT, INT(ti_12653[temp]), INT(INLINE_i_1[sp-0x1b0]), 10
	li $3, 10
	slt $25, $5, $3
	# JUMP AND_END_159
AND_END_159:
	# JUMP OR_END_160
OR_END_160:
	# Branch INT(ti_12653[temp]) ? DO_BODY_135 : DO_END_137
	bne $25, $0, DO_BODY_135
	# JUMP DO_END_137
DO_END_137:
	# ASS, INT(ti_12643[temp]), INT(INLINE_sum_1[sp-0x1b8])
	move $27, $8
	# JUMP INLINE_sumMatrix_END_1
	sw $27, -0x1bc($29)
INLINE_sumMatrix_END_1:
	# RETURN INT(ti_12643[sp-0x1bc])
	lw $17, -0x1bc($29)
	move $2, $17
	jr $ra
	
FUNC_main:
	# JUMP INLINE_output_id_BEGIN_2
INLINE_output_id_BEGIN_2:
	# JUMP L_OR_EXP_163
L_OR_EXP_163:
	# JUMP L_AND_EXP_164
L_AND_EXP_164:
	# ASS, INT(ti_12654[temp]), 1
	li $17, 1
	# JUMP AND_166
AND_166:
	# ASS, INT(ti_12654[temp]), 0
	li $17, 0
	# JUMP AND_END_165
AND_END_165:
	# ASS, INT(ti_12655[temp]), INT(ti_12654[temp])
	move $18, $17
	# Branch INT(ti_12654[temp]) ? OR_END_168 : OR_169
	sw $18, -0x1dc($29)
	bne $17, $0, OR_END_168
OR_169:
	# JUMP L_AND_EXP_171
L_AND_EXP_171:
	# JUMP AND_END_172
AND_END_172:
	# ASS, INT(ti_12655[sp-0x1dc]), 0
	li $19, 0
	# OR, INT(ti_12655[sp-0x1dc]), INT(ti_12655[sp-0x1dc]), 1
	li $19, 1
	# Branch INT(ti_12655[sp-0x1dc]) ? OR_END_168 : OR_170
	sw $19, -0x1dc($29)
	bne $19, $0, OR_END_168
OR_170:
	# JUMP OR_END_168
OR_END_168:
	# Branch INT(ti_12655[sp-0x1dc]) ? IF_BODY_174 : IF_END_175
	lw $20, -0x1dc($29)
	beq $20, $0, IF_END_175
IF_BODY_174:
	# JUMP B_176
B_176:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_177
B_177:
	# JUMP IF_END_175
IF_END_175:
	# JUMP B_178
B_178:
	# JUMP INLINE_output_id_END_2
INLINE_output_id_END_2:
	# ASS, INT(INLINE_n_3[sp-0x4]), 89
	li $6, 89
	# JUMP INLINE_isPrime_BEGIN_3
INLINE_isPrime_BEGIN_3:
	# DEF, INT(INLINE_i_3[sp-0x8]), 3
	li $5, 3
	# JUMP L_OR_EXP_179
L_OR_EXP_179:
	# JUMP L_AND_EXP_180
L_AND_EXP_180:
	# LE, INT(ti_12657[temp]), INT(INLINE_n_3[sp-0x4]), 0
	sle $21, $6, 0
	# JUMP AND_END_181
AND_END_181:
	# JUMP OR_END_182
OR_END_182:
	# Branch INT(ti_12657[temp]) ? IF_BODY_183 : IF_END_184
	beq $21, $0, IF_END_184
IF_BODY_183:
	# JUMP B_185
B_185:
	# ASS, INT(ti_12656[temp]), 0
	li $22, 0
	# JUMP INLINE_isPrime_END_3
	sw $22, -0x1e0($29)
	j INLINE_isPrime_END_3
	# JUMP B_186
B_186:
	# JUMP IF_END_184
IF_END_184:
	# JUMP L_OR_EXP_187
L_OR_EXP_187:
	# JUMP L_AND_EXP_188
L_AND_EXP_188:
	# MOD, INT(ti_12658[temp]), INT(INLINE_n_3[sp-0x4]), 2
	bltz $6, DIV_847
	andi $23, $6, 1
	j DIV_END_848
DIV_847:
	subu $6, $0, $6
	andi $23, $6, 1
	subu $23, $0, $23
DIV_END_848:
	# EQ, INT(ti_12659[temp]), INT(ti_12658[temp]), 0
	seq $24, $23, 0
	# JUMP AND_END_189
AND_END_189:
	# JUMP OR_END_190
OR_END_190:
	# Branch INT(ti_12659[temp]) ? IF_BODY_191 : IF_END_192
	beq $24, $0, IF_END_192
IF_BODY_191:
	# JUMP B_193
B_193:
	# ASS, INT(ti_12656[sp-0x1e0]), 0
	li $25, 0
	# JUMP INLINE_isPrime_END_3
	sw $25, -0x1e0($29)
	j INLINE_isPrime_END_3
	# JUMP B_194
B_194:
	# JUMP IF_END_192
IF_END_192:
	# JUMP L_OR_EXP_198
L_OR_EXP_198:
	# JUMP L_AND_EXP_199
L_AND_EXP_199:
	# DIV, INT(ti_12660[temp]), INT(INLINE_n_3[sp-0x4]), 2
	bltz $6, DIV_849
	srl $26, $6, 1
	j DIV_END_850
DIV_849:
	subu $6, $0, $6
	srl $26, $6, 1
	subu $26, $0, $26
DIV_END_850:
	# LT, INT(ti_12661[temp]), INT(INLINE_i_3[sp-0x8]), INT(ti_12660[temp])
	slt $27, $5, $26
	# JUMP AND_END_200
AND_END_200:
	# JUMP OR_END_201
OR_END_201:
	# Branch INT(ti_12661[temp]) ? DO_BODY_195 : DO_END_197
	beq $27, $0, DO_END_197
	# JUMP DO_BODY_195
DO_BODY_195:
	# JUMP B_202
B_202:
	# JUMP L_OR_EXP_203
	j L_OR_EXP_203
	# JUMP B_211
	j B_211
L_OR_EXP_203:
	# JUMP L_AND_EXP_204
L_AND_EXP_204:
	# MOD, INT(ti_12662[temp]), INT(INLINE_n_3[sp-0x4]), INT(INLINE_i_3[sp-0x8])
	div $6 $5
	mfhi $17
	# EQ, INT(ti_12663[temp]), INT(ti_12662[temp]), 0
	seq $18, $17, 0
	# JUMP AND_END_205
AND_END_205:
	# JUMP OR_END_206
OR_END_206:
	# Branch INT(ti_12663[temp]) ? IF_BODY_207 : IF_END_208
	beq $18, $0, IF_END_208
IF_BODY_207:
	# JUMP B_209
B_209:
	# ASS, INT(ti_12656[sp-0x1e0]), 0
	li $19, 0
	# JUMP INLINE_isPrime_END_3
	sw $19, -0x1e0($29)
	j INLINE_isPrime_END_3
	# JUMP B_210
B_210:
	# JUMP IF_END_208
IF_END_208:
	# ADD, INT(INLINE_i_3[sp-0x8]), INT(INLINE_i_3[sp-0x8]), 2
	addiu $5, $5, 2
	# JUMP B_211
B_211:
	# JUMP DO_CHECK_196
DO_CHECK_196:
	# JUMP L_OR_EXP_212
L_OR_EXP_212:
	# JUMP L_AND_EXP_213
L_AND_EXP_213:
	# DIV, INT(ti_12665[temp]), INT(INLINE_n_3[sp-0x4]), 2
	bltz $6, DIV_851
	srl $20, $6, 1
	j DIV_END_852
DIV_851:
	subu $6, $0, $6
	srl $20, $6, 1
	subu $20, $0, $20
DIV_END_852:
	# LT, INT(ti_12666[temp]), INT(INLINE_i_3[sp-0x8]), INT(ti_12665[temp])
	slt $21, $5, $20
	# JUMP AND_END_214
AND_END_214:
	# JUMP OR_END_215
OR_END_215:
	# Branch INT(ti_12666[temp]) ? DO_BODY_195 : DO_END_197
	bne $21, $0, DO_BODY_195
	# JUMP DO_END_197
DO_END_197:
	# ASS, INT(ti_12656[sp-0x1e0]), 1
	li $22, 1
	# JUMP INLINE_isPrime_END_3
	sw $22, -0x1e0($29)
INLINE_isPrime_END_3:
	# PRINT_INT INT(ti_12656[sp-0x1e0])
	li $2, 1
	lw $23, -0x1e0($29)
	move $4, $23
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP L_OR_EXP_217
L_OR_EXP_217:
	# JUMP L_AND_EXP_218
L_AND_EXP_218:
	# GE, INT(ti_12667[temp]), 2, INT(int_c[data+0x10])
	lw $24, 0x10($28)
	sle $25, $24, 2
	# JUMP AND_END_219
AND_END_219:
	# JUMP OR_END_220
OR_END_220:
	# Branch INT(ti_12667[temp]) ? IF_BODY_221 : IF_END_222
	sw $24, 0x10($28)
	beq $25, $0, IF_END_222
IF_BODY_221:
	# JUMP B_223
B_223:
	# ASS, INT(int_d[data+0x14]), 1
	li $26, 1
	# JUMP B_224
B_224:
	# JUMP IF_END_222
	sw $26, 0x14($28)
IF_END_222:
	# JUMP L_OR_EXP_225
L_OR_EXP_225:
	# JUMP L_AND_EXP_226
L_AND_EXP_226:
	# EQ, INT(ti_12668[temp]), 2, INT(int_d[data+0x14])
	lw $27, 0x14($28)
	seq $17, $27, 2
	# JUMP AND_END_227
AND_END_227:
	# JUMP OR_END_228
OR_END_228:
	# Branch INT(ti_12668[temp]) ? IF_BODY_229 : IF_END_230
	sw $27, 0x14($28)
	beq $17, $0, IF_END_230
IF_BODY_229:
	# JUMP B_231
B_231:
	# ASS, INT(int_e[data+0x18]), 0
	li $18, 0
	# JUMP B_232
B_232:
	# JUMP IF_END_230
	sw $18, 0x18($28)
IF_END_230:
	# JUMP L_OR_EXP_233
L_OR_EXP_233:
	# JUMP L_AND_EXP_234
L_AND_EXP_234:
	# GT, INT(ti_12669[temp]), 2, INT(int_e[data+0x18])
	lw $19, 0x18($28)
	li $3, 2
	slt $20, $19, $3
	# JUMP AND_END_235
AND_END_235:
	# JUMP OR_END_236
OR_END_236:
	# Branch INT(ti_12669[temp]) ? IF_BODY_237 : IF_ELSE_239
	sw $19, 0x18($28)
	beq $20, $0, IF_ELSE_239
IF_BODY_237:
	# JUMP B_240
B_240:
	# ASS, INT(int_d[data+0x14]), 3
	li $21, 3
	# JUMP B_241
B_241:
	# JUMP IF_END_238
	sw $21, 0x14($28)
	j IF_END_238
IF_ELSE_239:
	# JUMP B_242
B_242:
	# ASS, INT(int_d[data+0x14]), 4
	li $22, 4
	# JUMP B_243
B_243:
	# JUMP IF_END_238
	sw $22, 0x14($28)
IF_END_238:
	# DEF, INT(i[sp-0xc]), 5
	li $5, 5
	# ADD, INT(int_c[data+0x10]), INT(i[sp-0xc]), 3
	addiu $23, $5, 3
	# ASS, INT(i[sp-0xc]), 0
	li $5, 0
	# JUMP L_OR_EXP_247
L_OR_EXP_247:
	# JUMP L_AND_EXP_248
L_AND_EXP_248:
	# LT, INT(ti_12671[temp]), INT(i[sp-0xc]), 100
	li $3, 100
	slt $25, $5, $3
	# JUMP AND_END_249
AND_END_249:
	# JUMP OR_END_250
OR_END_250:
	# Branch INT(ti_12671[temp]) ? DO_BODY_244 : DO_END_246
	sw $23, 0x10($28)
	beq $25, $0, DO_END_246
	# JUMP DO_BODY_244
DO_BODY_244:
	# JUMP B_251
B_251:
	# JUMP L_OR_EXP_252
	j L_OR_EXP_252
	# JUMP B_268
	j B_268
L_OR_EXP_252:
	# JUMP L_AND_EXP_253
L_AND_EXP_253:
	# EQ, INT(ti_12672[temp]), INT(i[sp-0xc]), 0
	seq $24, $5, 0
	# JUMP AND_END_254
AND_END_254:
	# ASS, INT(ti_12673[temp]), INT(ti_12672[temp])
	move $26, $24
	# Branch INT(ti_12672[temp]) ? OR_END_255 : OR_256
	sw $26, -0x1e4($29)
	bne $24, $0, OR_END_255
OR_256:
	# JUMP L_AND_EXP_258
L_AND_EXP_258:
	# EQ, INT(ti_12674[temp]), INT(i[sp-0xc]), 1
	seq $17, $5, 1
	# JUMP AND_END_259
AND_END_259:
	# ASS, INT(ti_12673[sp-0x1e4]), 0
	li $27, 0
	# OR, INT(ti_12673[sp-0x1e4]), INT(ti_12673[sp-0x1e4]), INT(ti_12674[temp])
	or $27, $27, $17
	# Branch INT(ti_12673[sp-0x1e4]) ? OR_END_255 : OR_257
	sw $27, -0x1e4($29)
	bne $27, $0, OR_END_255
OR_257:
	# JUMP OR_END_255
OR_END_255:
	# Branch INT(ti_12673[sp-0x1e4]) ? IF_BODY_261 : IF_ELSE_263
	lw $18, -0x1e4($29)
	beq $18, $0, IF_ELSE_263
IF_BODY_261:
	# JUMP B_264
B_264:
	# MUL, INT(ti_12675[temp]), INT(i[sp-0xc]), 4
	sll $20, $5, 2
	# ADD, INT(ti_12675[temp]), INT(ti_12675[temp]), 0
	# STORE 1, INT(ti_12675[temp])[ARRAY(array[data+0x24])]
	li $3, 1
	addu $2, $28, $20
	sw $3, 0x24($2)
	# JUMP B_265
B_265:
	# JUMP IF_END_262
	j IF_END_262
IF_ELSE_263:
	# JUMP B_266
B_266:
	# MUL, INT(ti_12676[temp]), INT(i[sp-0xc]), 4
	sll $19, $5, 2
	# ADD, INT(ti_12676[temp]), INT(ti_12676[temp]), 0
	# STORE 0, INT(ti_12676[temp])[ARRAY(array[data+0x24])]
	li $3, 0
	addu $2, $28, $19
	sw $3, 0x24($2)
	# JUMP B_267
B_267:
	# JUMP IF_END_262
IF_END_262:
	# ADD, INT(i[sp-0xc]), INT(i[sp-0xc]), 1
	addiu $5, $5, 1
	# JUMP B_268
B_268:
	# JUMP DO_CHECK_245
DO_CHECK_245:
	# JUMP L_OR_EXP_269
L_OR_EXP_269:
	# JUMP L_AND_EXP_270
L_AND_EXP_270:
	# LT, INT(ti_12678[temp]), INT(i[sp-0xc]), 100
	li $3, 100
	slt $21, $5, $3
	# JUMP AND_END_271
AND_END_271:
	# JUMP OR_END_272
OR_END_272:
	# Branch INT(ti_12678[temp]) ? DO_BODY_244 : DO_END_246
	bne $21, $0, DO_BODY_244
	# JUMP DO_END_246
DO_END_246:
	# ASS, INT(i[sp-0xc]), 5
	li $5, 5
	# JUMP B_273
B_273:
	# JUMP B_274
B_274:
	# JUMP L_OR_EXP_278
L_OR_EXP_278:
	# JUMP L_AND_EXP_279
L_AND_EXP_279:
	# LT, INT(ti_12679[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $22, 0x10($28)
	slt $25, $5, $22
	# JUMP AND_END_280
AND_END_280:
	# ASS, INT(ti_12680[temp]), INT(ti_12679[temp])
	move $23, $25
	# Branch INT(ti_12679[temp]) ? OR_END_281 : OR_282
	sw $23, -0x1e8($29)
	sw $22, 0x10($28)
	bne $25, $0, OR_END_281
OR_282:
	# JUMP L_AND_EXP_284
L_AND_EXP_284:
	# GT, INT(ti_12681[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $24, 0x10($28)
	sgt $26, $5, $24
	# JUMP AND_END_285
AND_END_285:
	# ASS, INT(ti_12680[sp-0x1e8]), 0
	li $17, 0
	# OR, INT(ti_12680[sp-0x1e8]), INT(ti_12680[sp-0x1e8]), INT(ti_12681[temp])
	or $17, $17, $26
	# Branch INT(ti_12680[sp-0x1e8]) ? OR_END_281 : OR_283
	sw $17, -0x1e8($29)
	sw $24, 0x10($28)
	bne $17, $0, OR_END_281
OR_283:
	# JUMP OR_END_281
OR_END_281:
	# Branch INT(ti_12680[sp-0x1e8]) ? DO_BODY_275 : DO_END_277
	lw $27, -0x1e8($29)
	beq $27, $0, DO_END_277
	# JUMP DO_BODY_275
DO_BODY_275:
	# JUMP B_287
B_287:
	# Call FUNC_factorial; Params: INT(i[sp-0xc]); RET INT(ti_12682[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -492
	sw $5, -0x4($4)
	sw $5, -0xc($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 492
	lw $31, 0x0($29)
	move $18, $2
	lw $5, -0xc($29)
	# PRINT_INT INT(ti_12682[temp])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ADD, INT(i[sp-0xc]), INT(i[sp-0xc]), 1
	addiu $5, $5, 1
	# JUMP L_OR_EXP_288
	j L_OR_EXP_288
	# JUMP B_299
	j B_299
L_OR_EXP_288:
	# JUMP L_AND_EXP_289
L_AND_EXP_289:
	# EQ, INT(ti_12684[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $20, 0x10($28)
	seq $19, $5, $20
	# JUMP AND_END_290
AND_END_290:
	# JUMP OR_END_291
OR_END_291:
	# Branch INT(ti_12684[temp]) ? IF_BODY_292 : IF_ELSE_294
	sw $20, 0x10($28)
	beq $19, $0, IF_ELSE_294
IF_BODY_292:
	# JUMP B_295
B_295:
	# JUMP DO_END_277
	j DO_END_277
	# JUMP B_296
B_296:
	# JUMP IF_END_293
	j IF_END_293
IF_ELSE_294:
	# JUMP B_297
B_297:
	# JUMP DO_CHECK_276
	j DO_CHECK_276
	# JUMP B_298
B_298:
	# JUMP IF_END_293
IF_END_293:
	# JUMP B_299
B_299:
	# JUMP DO_CHECK_276
DO_CHECK_276:
	# JUMP L_OR_EXP_300
L_OR_EXP_300:
	# JUMP L_AND_EXP_301
L_AND_EXP_301:
	# LT, INT(ti_12685[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $21, 0x10($28)
	slt $25, $5, $21
	# JUMP AND_END_302
AND_END_302:
	# ASS, INT(ti_12686[temp]), INT(ti_12685[temp])
	move $23, $25
	# Branch INT(ti_12685[temp]) ? OR_END_303 : OR_304
	sw $23, -0x1ec($29)
	sw $21, 0x10($28)
	bne $25, $0, OR_END_303
OR_304:
	# JUMP L_AND_EXP_306
L_AND_EXP_306:
	# GT, INT(ti_12687[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $22, 0x10($28)
	sgt $26, $5, $22
	# JUMP AND_END_307
AND_END_307:
	# ASS, INT(ti_12686[sp-0x1ec]), 0
	li $17, 0
	# OR, INT(ti_12686[sp-0x1ec]), INT(ti_12686[sp-0x1ec]), INT(ti_12687[temp])
	or $17, $17, $26
	# Branch INT(ti_12686[sp-0x1ec]) ? OR_END_303 : OR_305
	sw $17, -0x1ec($29)
	sw $22, 0x10($28)
	bne $17, $0, OR_END_303
OR_305:
	# JUMP OR_END_303
OR_END_303:
	# Branch INT(ti_12686[sp-0x1ec]) ? DO_BODY_275 : DO_END_277
	lw $24, -0x1ec($29)
	bne $24, $0, DO_BODY_275
	# JUMP DO_END_277
DO_END_277:
	# JUMP L_OR_EXP_309
L_OR_EXP_309:
	# JUMP L_AND_EXP_310
L_AND_EXP_310:
	# EQ, INT(ti_12688[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $27, 0x10($28)
	seq $18, $5, $27
	# JUMP AND_END_311
AND_END_311:
	# JUMP OR_END_312
OR_END_312:
	# Branch INT(ti_12688[temp]) ? IF_BODY_313 : IF_END_314
	sw $27, 0x10($28)
	beq $18, $0, IF_END_314
IF_BODY_313:
	# JUMP B_315
B_315:
	# JUMP INLINE_return_one_BEGIN_4
	j INLINE_return_one_BEGIN_4
	# JUMP B_317
	j B_317
INLINE_return_one_BEGIN_4:
	# ASS, INT(ti_12689[temp]), 1
	li $19, 1
	# JUMP INLINE_return_one_END_4
	sw $19, -0x1f0($29)
INLINE_return_one_END_4:
	# PRINT_INT INT(ti_12689[sp-0x1f0])
	li $2, 1
	lw $20, -0x1f0($29)
	move $4, $20
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_317
B_317:
	# JUMP IF_END_314
IF_END_314:
	# ASS, INT(INLINE_a_5[sp-0x14]), 1
	li $6, 1
	# ASS, INT(INLINE_b_5[sp-0x18]), 1
	li $7, 1
	# JUMP INLINE_A_plus_B_BEGIN_5
INLINE_A_plus_B_BEGIN_5:
	# ADD, INT(ti_12691[temp]), INT(INLINE_a_5[sp-0x14]), INT(INLINE_b_5[sp-0x18])
	addu $25, $6, $7
	# ASS, INT(ti_12690[temp]), INT(ti_12691[temp])
	move $23, $25
	# JUMP INLINE_A_plus_B_END_5
	sw $23, -0x1f4($29)
INLINE_A_plus_B_END_5:
	# PRINT_INT INT(ti_12690[sp-0x1f4])
	li $2, 1
	lw $21, -0x1f4($29)
	move $4, $21
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ASS, INT(INLINE_a_6[sp-0x1c]), 2
	li $6, 2
	# ASS, INT(INLINE_b_6[sp-0x20]), 2
	li $7, 2
	# JUMP INLINE_output_a_plus_b_BEGIN_6
INLINE_output_a_plus_b_BEGIN_6:
	# ADD, INT(ti_12692[temp]), INT(INLINE_a_6[sp-0x1c]), INT(INLINE_b_6[sp-0x20])
	addu $26, $6, $7
	# PRINT_INT INT(ti_12692[temp])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_319
B_319:
	# JUMP INLINE_output_a_plus_b_END_6
INLINE_output_a_plus_b_END_6:
	# GETINT INT(i[sp-0xc])
	li $2, 5
	syscall
	move $5, $2
	# PRINT_INT INT(i[sp-0xc])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ASS, INT(i[sp-0xc]), 0
	li $5, 0
	# JUMP L_OR_EXP_323
L_OR_EXP_323:
	# JUMP L_AND_EXP_324
L_AND_EXP_324:
	# LT, INT(ti_12693[temp]), INT(i[sp-0xc]), 10
	li $3, 10
	slt $17, $5, $3
	# JUMP AND_END_325
AND_END_325:
	# JUMP OR_END_326
OR_END_326:
	# Branch INT(ti_12693[temp]) ? DO_BODY_320 : DO_END_322
	beq $17, $0, DO_END_322
	# JUMP DO_BODY_320
DO_BODY_320:
	# JUMP B_327
B_327:
	# ASS, INT(j[sp-0x10]), 0
	li $6, 0
	# JUMP L_OR_EXP_331
	j L_OR_EXP_331
	# JUMP B_341
	j B_341
L_OR_EXP_331:
	# JUMP L_AND_EXP_332
L_AND_EXP_332:
	# LT, INT(ti_12694[temp]), INT(j[sp-0x10]), 10
	li $3, 10
	slt $22, $6, $3
	# JUMP AND_END_333
AND_END_333:
	# JUMP OR_END_334
OR_END_334:
	# Branch INT(ti_12694[temp]) ? DO_BODY_328 : DO_END_330
	beq $22, $0, DO_END_330
	# JUMP DO_BODY_328
DO_BODY_328:
	# JUMP B_335
B_335:
	# MUL, INT(ti_12695[temp]), INT(j[sp-0x10]), 4
	sll $24, $6, 2
	# ADD, INT(ti_12695[temp]), INT(ti_12695[temp]), 0
	# MUL, INT(ti_12696[temp]), INT(i[sp-0xc]), 40
	sll $30, $5, 5
	sll $3, $5, 3
	addu $18, $30, $3
	# ADD, INT(ti_12696[temp]), INT(ti_12696[temp]), INT(ti_12695[temp])
	addu $18, $18, $24
	# ADD, INT(ti_12697[temp]), INT(i[sp-0xc]), 1
	addiu $27, $5, 1
	# STORE INT(ti_12697[temp]), INT(ti_12696[temp])[ARRAY(matrix_A[data+0x1b4])]
	addu $2, $28, $18
	sw $27, 0x1b4($2)
	# MUL, INT(ti_12698[temp]), INT(j[sp-0x10]), 4
	sll $19, $6, 2
	# ADD, INT(ti_12698[temp]), INT(ti_12698[temp]), 0
	# MUL, INT(ti_12699[temp]), INT(i[sp-0xc]), 40
	sll $30, $5, 5
	sll $3, $5, 3
	addu $20, $30, $3
	# ADD, INT(ti_12699[temp]), INT(ti_12699[temp]), INT(ti_12698[temp])
	addu $20, $20, $19
	# ADD, INT(ti_12700[temp]), INT(j[sp-0x10]), 1
	addiu $25, $6, 1
	# STORE INT(ti_12700[temp]), INT(ti_12699[temp])[ARRAY(matrix_B[data+0x344])]
	addu $2, $28, $20
	sw $25, 0x344($2)
	# ADD, INT(j[sp-0x10]), INT(j[sp-0x10]), 1
	addiu $6, $6, 1
	# JUMP B_336
B_336:
	# JUMP DO_CHECK_329
DO_CHECK_329:
	# JUMP L_OR_EXP_337
L_OR_EXP_337:
	# JUMP L_AND_EXP_338
L_AND_EXP_338:
	# LT, INT(ti_12702[temp]), INT(j[sp-0x10]), 10
	li $3, 10
	slt $23, $6, $3
	# JUMP AND_END_339
AND_END_339:
	# JUMP OR_END_340
OR_END_340:
	# Branch INT(ti_12702[temp]) ? DO_BODY_328 : DO_END_330
	bne $23, $0, DO_BODY_328
	# JUMP DO_END_330
DO_END_330:
	# ADD, INT(i[sp-0xc]), INT(i[sp-0xc]), 1
	addiu $5, $5, 1
	# JUMP B_341
B_341:
	# JUMP DO_CHECK_321
DO_CHECK_321:
	# JUMP L_OR_EXP_342
L_OR_EXP_342:
	# JUMP L_AND_EXP_343
L_AND_EXP_343:
	# LT, INT(ti_12704[temp]), INT(i[sp-0xc]), 10
	li $3, 10
	slt $21, $5, $3
	# JUMP AND_END_344
AND_END_344:
	# JUMP OR_END_345
OR_END_345:
	# Branch INT(ti_12704[temp]) ? DO_BODY_320 : DO_END_322
	bne $21, $0, DO_BODY_320
	# JUMP DO_END_322
DO_END_322:
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+0)->POINTER(tp_1929[sp-0x24])
	addiu $26, $28, 436
	# OFFSET (ARRAY(matrix_B[data+0x344])+0)->POINTER(tp_1930[sp-0x28])
	addiu $17, $28, 836
	# ASS, ARRAY(INLINE_matrix_a_7[sp-0x24]), POINTER(tp_1929[sp-0x24])
	move $6, $26
	# STORE POINTER(tp_1929[sp-0x24]), -36[SPECIAL_SP(ts_1931[temp])]
	sw $26, -0x24($29)
	# ASS, ARRAY(INLINE_matrix_b_7[sp-0x28]), POINTER(tp_1930[sp-0x28])
	move $5, $17
	# STORE POINTER(tp_1930[sp-0x28]), -40[SPECIAL_SP(ts_1932[temp])]
	sw $17, -0x28($29)
	# JUMP INLINE_matrixMulti_BEGIN_7
INLINE_matrixMulti_BEGIN_7:
	# DEF, INT(INLINE_i_7[sp-0x1c0]), 0
	li $7, 0
	# JUMP L_OR_EXP_349
L_OR_EXP_349:
	# JUMP L_AND_EXP_350
L_AND_EXP_350:
	# LT, INT(ti_12707[temp]), INT(INLINE_i_7[sp-0x1c0]), 10
	li $3, 10
	slt $22, $7, $3
	# JUMP AND_END_351
AND_END_351:
	# JUMP OR_END_352
OR_END_352:
	# Branch INT(ti_12707[temp]) ? DO_BODY_346 : DO_END_348
	beq $22, $0, DO_END_348
	# JUMP DO_BODY_346
DO_BODY_346:
	# JUMP B_353
B_353:
	# ASS, INT(INLINE_j_7[sp-0x1c4]), 0
	li $9, 0
	# JUMP L_OR_EXP_357
	j L_OR_EXP_357
	# JUMP B_380
	j B_380
L_OR_EXP_357:
	# JUMP L_AND_EXP_358
L_AND_EXP_358:
	# LT, INT(ti_12708[temp]), INT(INLINE_j_7[sp-0x1c4]), 10
	li $3, 10
	slt $24, $9, $3
	# JUMP AND_END_359
AND_END_359:
	# JUMP OR_END_360
OR_END_360:
	# Branch INT(ti_12708[temp]) ? DO_BODY_354 : DO_END_356
	beq $24, $0, DO_END_356
	# JUMP DO_BODY_354
DO_BODY_354:
	# JUMP B_361
B_361:
	# ASS, INT(INLINE_k_7[sp-0x1c8]), 0
	li $8, 0
	# MUL, INT(ti_12709[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $18, $9, 2
	# ADD, INT(ti_12709[temp]), INT(ti_12709[temp]), 0
	# MUL, INT(ti_12710[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $30, $7, 5
	sll $3, $7, 3
	addu $27, $30, $3
	# ADD, INT(ti_12710[temp]), INT(ti_12710[temp]), INT(ti_12709[temp])
	addu $27, $27, $18
	# STORE 0, INT(ti_12710[temp])[ARRAY(INLINE_matrix_c_7[sp-0x1bc])]
	li $3, 0
	addu $2, $29, $27
	sw $3, -0x1bc($2)
	# JUMP L_OR_EXP_365
	j L_OR_EXP_365
	# JUMP B_375
	j B_375
L_OR_EXP_365:
	# JUMP L_AND_EXP_366
L_AND_EXP_366:
	# LT, INT(ti_12711[temp]), INT(INLINE_k_7[sp-0x1c8]), 10
	li $3, 10
	slt $19, $8, $3
	# JUMP AND_END_367
AND_END_367:
	# JUMP OR_END_368
OR_END_368:
	# Branch INT(ti_12711[temp]) ? DO_BODY_362 : DO_END_364
	beq $19, $0, DO_END_364
	# JUMP DO_BODY_362
DO_BODY_362:
	# JUMP B_369
B_369:
	# MUL, INT(ti_12712[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $20, $9, 2
	# ADD, INT(ti_12712[temp]), INT(ti_12712[temp]), 0
	# MUL, INT(ti_12713[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $30, $7, 5
	sll $3, $7, 3
	addu $25, $30, $3
	# ADD, INT(ti_12713[temp]), INT(ti_12713[temp]), INT(ti_12712[temp])
	addu $25, $25, $20
	# MUL, INT(ti_12714[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $23, $9, 2
	# ADD, INT(ti_12714[temp]), INT(ti_12714[temp]), 0
	# MUL, INT(ti_12715[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $30, $7, 5
	sll $3, $7, 3
	addu $21, $30, $3
	# ADD, INT(ti_12715[temp]), INT(ti_12715[temp]), INT(ti_12714[temp])
	addu $21, $21, $23
	# LOAD INT(ti_12716[temp]), INT(ti_12715[temp])[ARRAY(INLINE_matrix_c_7[sp-0x1bc])]
	addu $2, $29, $21
	lw $26, -0x1bc($2)
	# MUL, INT(ti_12717[temp]), INT(INLINE_k_7[sp-0x1c8]), 4
	sll $17, $8, 2
	# ADD, INT(ti_12717[temp]), INT(ti_12717[temp]), 0
	# MUL, INT(ti_12718[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $30, $7, 5
	sll $3, $7, 3
	addu $22, $30, $3
	# ADD, INT(ti_12718[temp]), INT(ti_12718[temp]), INT(ti_12717[temp])
	addu $22, $22, $17
	# LOAD INT(ti_12719[temp]), INT(ti_12718[temp])[ARRAY(INLINE_matrix_a_7[sp-0x24])]
	lw $18, -0x24($29)
	addu $2, $18, $22
	lw $24, 0x0($2)
	# MUL, INT(ti_12720[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $27, $9, 2
	# ADD, INT(ti_12720[temp]), INT(ti_12720[temp]), 0
	# MUL, INT(ti_12721[temp]), INT(INLINE_k_7[sp-0x1c8]), 40
	sll $30, $8, 5
	sll $3, $8, 3
	addu $19, $30, $3
	# ADD, INT(ti_12721[temp]), INT(ti_12721[temp]), INT(ti_12720[temp])
	addu $19, $19, $27
	# LOAD INT(ti_12722[temp]), INT(ti_12721[temp])[ARRAY(INLINE_matrix_b_7[sp-0x28])]
	lw $23, -0x28($29)
	addu $2, $23, $19
	lw $20, 0x0($2)
	# MUL, INT(ti_12723[temp]), INT(ti_12719[temp]), INT(ti_12722[temp])
	mult $24, $20
	mflo $21
	# ADD, INT(ti_12724[temp]), INT(ti_12716[temp]), INT(ti_12723[temp])
	addu $17, $26, $21
	# STORE INT(ti_12724[temp]), INT(ti_12713[temp])[ARRAY(INLINE_matrix_c_7[sp-0x1bc])]
	addu $2, $29, $25
	sw $17, -0x1bc($2)
	# ADD, INT(INLINE_k_7[sp-0x1c8]), INT(INLINE_k_7[sp-0x1c8]), 1
	addiu $8, $8, 1
	# JUMP B_370
B_370:
	# JUMP DO_CHECK_363
DO_CHECK_363:
	# JUMP L_OR_EXP_371
L_OR_EXP_371:
	# JUMP L_AND_EXP_372
L_AND_EXP_372:
	# LT, INT(ti_12726[temp]), INT(INLINE_k_7[sp-0x1c8]), 10
	li $3, 10
	slt $22, $8, $3
	# JUMP AND_END_373
AND_END_373:
	# JUMP OR_END_374
OR_END_374:
	# Branch INT(ti_12726[temp]) ? DO_BODY_362 : DO_END_364
	sw $23, -0x28($29)
	sw $18, -0x24($29)
	bne $22, $0, DO_BODY_362
	# JUMP DO_END_364
DO_END_364:
	# ADD, INT(INLINE_j_7[sp-0x1c4]), INT(INLINE_j_7[sp-0x1c4]), 1
	addiu $9, $9, 1
	# JUMP B_375
B_375:
	# JUMP DO_CHECK_355
DO_CHECK_355:
	# JUMP L_OR_EXP_376
L_OR_EXP_376:
	# JUMP L_AND_EXP_377
L_AND_EXP_377:
	# LT, INT(ti_12728[temp]), INT(INLINE_j_7[sp-0x1c4]), 10
	li $3, 10
	slt $27, $9, $3
	# JUMP AND_END_378
AND_END_378:
	# JUMP OR_END_379
OR_END_379:
	# Branch INT(ti_12728[temp]) ? DO_BODY_354 : DO_END_356
	bne $27, $0, DO_BODY_354
	# JUMP DO_END_356
DO_END_356:
	# ADD, INT(INLINE_i_7[sp-0x1c0]), INT(INLINE_i_7[sp-0x1c0]), 1
	addiu $7, $7, 1
	# JUMP B_380
B_380:
	# JUMP DO_CHECK_347
DO_CHECK_347:
	# JUMP L_OR_EXP_381
L_OR_EXP_381:
	# JUMP L_AND_EXP_382
L_AND_EXP_382:
	# LT, INT(ti_12730[temp]), INT(INLINE_i_7[sp-0x1c0]), 10
	li $3, 10
	slt $19, $7, $3
	# JUMP AND_END_383
AND_END_383:
	# JUMP OR_END_384
OR_END_384:
	# Branch INT(ti_12730[temp]) ? DO_BODY_346 : DO_END_348
	bne $19, $0, DO_BODY_346
	# JUMP DO_END_348
DO_END_348:
	# OFFSET (ARRAY(INLINE_matrix_c_7[sp-0x1bc])+0)->POINTER(tp_1933[sp-0x1cc])
	addiu $24, $29, -444
	# ASS, ARRAY(INLINE_array_f_8[sp-0x1cc]), POINTER(tp_1933[sp-0x1cc])
	move $8, $24
	# STORE POINTER(tp_1933[sp-0x1cc]), -460[SPECIAL_SP(ts_1934[temp])]
	sw $24, -0x1cc($29)
	# JUMP INLINE_sumMatrix_BEGIN_8
INLINE_sumMatrix_BEGIN_8:
	# DEF, INT(INLINE_i_8[sp-0x1d0]), 0
	li $5, 0
	# DEF, INT(INLINE_sum_8[sp-0x1d8]), 0
	li $7, 0
	# JUMP L_OR_EXP_388
L_OR_EXP_388:
	# JUMP L_AND_EXP_389
L_AND_EXP_389:
	# LT, INT(ti_12732[temp]), INT(INLINE_i_8[sp-0x1d0]), 10
	li $3, 10
	slt $20, $5, $3
	# JUMP AND_END_390
AND_END_390:
	# JUMP OR_END_391
OR_END_391:
	# Branch INT(ti_12732[temp]) ? DO_BODY_385 : DO_END_387
	beq $20, $0, DO_END_387
	# JUMP DO_BODY_385
DO_BODY_385:
	# JUMP B_392
B_392:
	# ASS, INT(INLINE_j_8[sp-0x1d4]), 0
	li $6, 0
	# JUMP L_OR_EXP_396
	j L_OR_EXP_396
	# JUMP B_406
	j B_406
L_OR_EXP_396:
	# JUMP L_AND_EXP_397
L_AND_EXP_397:
	# LT, INT(ti_12733[temp]), INT(INLINE_j_8[sp-0x1d4]), 10
	li $3, 10
	slt $26, $6, $3
	# JUMP AND_END_398
AND_END_398:
	# JUMP OR_END_399
OR_END_399:
	# Branch INT(ti_12733[temp]) ? DO_BODY_393 : DO_END_395
	beq $26, $0, DO_END_395
	# JUMP DO_BODY_393
DO_BODY_393:
	# JUMP B_400
B_400:
	# MUL, INT(ti_12734[temp]), INT(INLINE_j_8[sp-0x1d4]), 4
	sll $21, $6, 2
	# ADD, INT(ti_12734[temp]), INT(ti_12734[temp]), 0
	# MUL, INT(ti_12735[temp]), INT(INLINE_i_8[sp-0x1d0]), 40
	sll $30, $5, 5
	sll $3, $5, 3
	addu $25, $30, $3
	# ADD, INT(ti_12735[temp]), INT(ti_12735[temp]), INT(ti_12734[temp])
	addu $25, $25, $21
	# LOAD INT(ti_12736[temp]), INT(ti_12735[temp])[ARRAY(INLINE_array_f_8[sp-0x1cc])]
	lw $22, -0x1cc($29)
	addu $2, $22, $25
	lw $17, 0x0($2)
	# ADD, INT(INLINE_sum_8[sp-0x1d8]), INT(INLINE_sum_8[sp-0x1d8]), INT(ti_12736[temp])
	addu $7, $7, $17
	# ADD, INT(INLINE_j_8[sp-0x1d4]), INT(INLINE_j_8[sp-0x1d4]), 1
	addiu $6, $6, 1
	# JUMP B_401
B_401:
	# JUMP DO_CHECK_394
DO_CHECK_394:
	# JUMP L_OR_EXP_402
L_OR_EXP_402:
	# JUMP L_AND_EXP_403
L_AND_EXP_403:
	# LT, INT(ti_12739[temp]), INT(INLINE_j_8[sp-0x1d4]), 10
	li $3, 10
	slt $23, $6, $3
	# JUMP AND_END_404
AND_END_404:
	# JUMP OR_END_405
OR_END_405:
	# Branch INT(ti_12739[temp]) ? DO_BODY_393 : DO_END_395
	sw $22, -0x1cc($29)
	bne $23, $0, DO_BODY_393
	# JUMP DO_END_395
DO_END_395:
	# ADD, INT(INLINE_i_8[sp-0x1d0]), INT(INLINE_i_8[sp-0x1d0]), 1
	addiu $5, $5, 1
	# JUMP B_406
B_406:
	# JUMP DO_CHECK_386
DO_CHECK_386:
	# JUMP L_OR_EXP_407
L_OR_EXP_407:
	# JUMP L_AND_EXP_408
L_AND_EXP_408:
	# LT, INT(ti_12741[temp]), INT(INLINE_i_8[sp-0x1d0]), 10
	li $3, 10
	slt $18, $5, $3
	# JUMP AND_END_409
AND_END_409:
	# JUMP OR_END_410
OR_END_410:
	# Branch INT(ti_12741[temp]) ? DO_BODY_385 : DO_END_387
	bne $18, $0, DO_BODY_385
	# JUMP DO_END_387
DO_END_387:
	# ASS, INT(ti_12731[temp]), INT(INLINE_sum_8[sp-0x1d8])
	move $27, $7
	# JUMP INLINE_sumMatrix_END_8
	sw $27, -0x1f8($29)
INLINE_sumMatrix_END_8:
	# ASS, INT(ti_12706[temp]), INT(ti_12731[sp-0x1f8])
	lw $19, -0x1f8($29)
	move $24, $19
	# JUMP INLINE_matrixMulti_END_7
	sw $24, -0x1fc($29)
INLINE_matrixMulti_END_7:
	# PRINT_INT INT(ti_12706[sp-0x1fc])
	li $2, 1
	lw $20, -0x1fc($29)
	move $4, $20
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
