# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "20231097\n"
	STR_2: .asciiz "a"
	STR_3: .asciiz "\n"
.text
	la $gp, global
	j FUNC_main
FUNC_getnum:
	# MUL, INT(tmp_int_0[temp]), INT(num[sp-0x4]), INT(num[sp-0x4])
	lw $5, -0x4($29)
	mult $5 $5
	mflo $17
	# ADD, INT(tmp_int_1[temp]), INT(tmp_int_0[temp]), 1
	addiu $18, $17, 1
	# RETURN INT(tmp_int_1[temp])
	move $2, $18
	jr $ra
	
FUNC_main:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# DEF, INT(num[sp-0x4]), 0
	li $5, 0
	# GETINT INT(num[sp-0x4])
	li $2, 5
	syscall
	move $5, $2
	# JUMP L_OR_EXP_1
L_OR_EXP_1:
	# JUMP L_AND_EXP_3
L_AND_EXP_3:
	# LE, INT(tmp_int_2[temp]), INT(num[sp-0x4]), 0
	sle $19, $5, 0
	# ASS, INT(tmp_int_3[temp]), INT(tmp_int_2[temp])
	move $20, $19
	# Branch INT(tmp_int_2[temp]) ? AND_5 : AND_END_4
	sw $19, -0x10($29)
	sw $20, -0x14($29)
	lw $3, -0x10($29)
	bne $3, $0, AND_5
	j AND_END_4
AND_5:
	# JUMP AND_END_4
AND_END_4:
	# ASS, INT(tmp_int_4[temp]), INT(tmp_int_3[sp-0x14])
	lw $21, -0x14($29)
	move $22, $21
	# Branch INT(tmp_int_4[temp]) ? OR_END_2 : OR_6
	sw $22, -0x18($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_2
OR_6:
	# JUMP OR_END_2
OR_END_2:
	# Branch INT(tmp_int_4[sp-0x18]) ? IF_BODY_7 : IF_ELSE_9
	lw $3, -0x18($29)
	bne $3, $0, IF_BODY_7
	j IF_ELSE_9
IF_BODY_7:
	# JUMP B_10
B_10:
	# DEF, INT(i[sp-0x8]), 0
	sw $5, -0x4($29)
	li $5, 0
	# JUMP WHILE_11
	j WHILE_11
	# JUMP B_42
	j B_42
WHILE_11:
	# JUMP L_OR_EXP_14
L_OR_EXP_14:
	# JUMP L_AND_EXP_16
L_AND_EXP_16:
	# LT, INT(tmp_int_5[temp]), INT(i[sp-0x8]), 11
	li $3, 11
	slt $23, $5, $3
	# ASS, INT(tmp_int_6[temp]), INT(tmp_int_5[temp])
	move $24, $23
	# Branch INT(tmp_int_5[temp]) ? AND_18 : AND_END_17
	sw $24, -0x1c($29)
	sw $23, -0x20($29)
	lw $3, -0x20($29)
	bne $3, $0, AND_18
	j AND_END_17
AND_18:
	# JUMP AND_END_17
AND_END_17:
	# ASS, INT(tmp_int_7[temp]), INT(tmp_int_6[sp-0x1c])
	lw $25, -0x1c($29)
	move $26, $25
	# Branch INT(tmp_int_7[temp]) ? OR_END_15 : OR_19
	sw $26, -0x24($29)
	lw $3, -0x24($29)
	bne $3, $0, OR_END_15
OR_19:
	# JUMP OR_END_15
OR_END_15:
	# Branch INT(tmp_int_7[sp-0x24]) ? WHILE_BODY_12 : WHILE_END_13
	lw $3, -0x24($29)
	bne $3, $0, WHILE_BODY_12
	j WHILE_END_13
WHILE_BODY_12:
	# JUMP B_20
B_20:
	# JUMP L_OR_EXP_21
	j L_OR_EXP_21
	# JUMP B_41
	j B_41
L_OR_EXP_21:
	# JUMP L_AND_EXP_23
L_AND_EXP_23:
	# EQ, INT(tmp_int_8[temp]), INT(i[sp-0x8]), 10
	seq $27, $5, 10
	# ASS, INT(tmp_int_9[temp]), INT(tmp_int_8[temp])
	move $17, $27
	# Branch INT(tmp_int_8[temp]) ? AND_25 : AND_END_24
	sw $17, -0x28($29)
	sw $27, -0x2c($29)
	lw $3, -0x2c($29)
	bne $3, $0, AND_25
	j AND_END_24
AND_25:
	# JUMP AND_END_24
AND_END_24:
	# ASS, INT(tmp_int_10[temp]), INT(tmp_int_9[sp-0x28])
	lw $18, -0x28($29)
	move $19, $18
	# Branch INT(tmp_int_10[temp]) ? OR_END_22 : OR_26
	sw $19, -0x30($29)
	lw $3, -0x30($29)
	bne $3, $0, OR_END_22
OR_26:
	# JUMP OR_END_22
OR_END_22:
	# Branch INT(tmp_int_10[sp-0x30]) ? IF_BODY_27 : IF_END_28
	lw $3, -0x30($29)
	bne $3, $0, IF_BODY_27
	j IF_END_28
IF_BODY_27:
	# JUMP B_29
B_29:
	# JUMP WHILE_END_13
	j WHILE_END_13
	# JUMP B_30
B_30:
	# JUMP IF_END_28
IF_END_28:
	# JUMP L_OR_EXP_31
L_OR_EXP_31:
	# JUMP L_AND_EXP_33
L_AND_EXP_33:
	# EQ, INT(tmp_int_11[temp]), INT(i[sp-0x8]), 1
	seq $20, $5, 1
	# ASS, INT(tmp_int_12[temp]), INT(tmp_int_11[temp])
	move $21, $20
	# Branch INT(tmp_int_11[temp]) ? AND_35 : AND_END_34
	sw $20, -0x34($29)
	sw $21, -0x38($29)
	lw $3, -0x34($29)
	bne $3, $0, AND_35
	j AND_END_34
AND_35:
	# JUMP AND_END_34
AND_END_34:
	# ASS, INT(tmp_int_13[temp]), INT(tmp_int_12[sp-0x38])
	lw $22, -0x38($29)
	move $24, $22
	# Branch INT(tmp_int_13[temp]) ? OR_END_32 : OR_36
	sw $24, -0x3c($29)
	lw $3, -0x3c($29)
	bne $3, $0, OR_END_32
OR_36:
	# JUMP OR_END_32
OR_END_32:
	# Branch INT(tmp_int_13[sp-0x3c]) ? IF_BODY_37 : IF_END_38
	lw $3, -0x3c($29)
	bne $3, $0, IF_BODY_37
	j IF_END_38
IF_BODY_37:
	# JUMP B_39
B_39:
	# JUMP WHILE_11
	j WHILE_11
	# JUMP B_40
B_40:
	# JUMP IF_END_38
IF_END_38:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ADD, INT(tmp_int_14[temp]), INT(i[sp-0x8]), 1
	addiu $23, $5, 1
	# ASS, INT(i[sp-0x8]), INT(tmp_int_14[temp])
	move $5, $23
	# JUMP B_41
B_41:
	# JUMP WHILE_11
	j WHILE_11
WHILE_END_13:
	# JUMP B_42
B_42:
	# JUMP IF_END_8
	j IF_END_8
IF_ELSE_9:
	# JUMP B_43
B_43:
	# DEF, INT(i[sp-0xc]), 0
	sw $5, -0x8($29)
	li $5, 0
	# Call FUNC_getnum; Params: INT(num[sp-0x4]); RET INT(tmp_int_15[temp])
	sw $5, -0xc($29)
	sw $31, 0x0($29)
	addiu $4, $29, -64
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_getnum
	addiu $29, $29, 64
	lw $31, 0x0($29)
	move $25, $2
	# PRINT_INT INT(tmp_int_15[temp])
	li $2, 1
	move $4, $25
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_44
B_44:
	# JUMP IF_END_8
IF_END_8:
	# RETURN 0
	li $2, 10
	syscall
	
