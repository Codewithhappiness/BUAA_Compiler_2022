# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "\n"
.text
	la $gp, global
	j FUNC_main
FUNC_main:
	# DEF, 0, INT(n[sp-0x4])
	li $5, 0
	# GETINT INT(n[sp-0x4])
	li $2, 5
	syscall
	move $5, $2
	# DEF, 19241027, INT(i[sp-0x8])
	li $6, 19241027
	# MOD, INT(n[sp-0x4]), 4, INT(tmp_int_0[temp])
	li $3, 4
	div $5 $3
	mfhi $7
	# EQ, INT(tmp_int_0[temp]), 0, BOOL(tmp_bool_0[temp])
	seq $8, $7, 0
	# ASS, BOOL(tmp_bool_0[temp]), BOOL(tmp_bool_1[temp])
	move $9, $8
	# Branch BOOL(tmp_bool_0[temp]) ? AND_2 : AND_END_1
	move $3, $8
	bne $3, $0, AND_2
	j AND_END_1
AND_2:
	# JUMP AND_END_1
	j AND_END_1
AND_END_1:
	# ASS, BOOL(tmp_bool_1[temp]), BOOL(tmp_bool_2[temp])
	move $10, $9
	# Branch BOOL(tmp_bool_2[temp]) ? OR_END_0 : OR_3
	move $3, $10
	bne $3, $0, OR_END_0
	j OR_3
OR_3:
	# JUMP OR_END_0
	j OR_END_0
OR_END_0:
	# Branch BOOL(tmp_bool_2[temp]) ? IF_BODY_4 : IF_END_5
	move $3, $10
	bne $3, $0, IF_BODY_4
	j IF_END_5
IF_BODY_4:
	# PRINT_INT INT(i[sp-0x8])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP IF_END_5
	j IF_END_5
IF_END_5:
	# RETURN 0
	li $2, 10
	syscall
