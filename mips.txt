# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "\n"
.text
	j FUNC_main
FUNC_f:
	# RETURN 999
	li $2, 999
	jr $ra
FUNC_main:
	# OFFSET (4+0)->POINTER(tmp_pointer_0[temp])
	addiu $5, $29, -4
	# STORE POINTER(tmp_pointer_0[temp]), 8
	li $3, 8
	sw $3, 0x0($5)
	# MUL, 0, 4, INT(tmp_int_0[temp])
	li $6, 0
	# ADD, INT(tmp_int_0[temp]), 0, INT(tmp_int_0[temp])
	addiu $6, $6, 0
	# OFFSET (4+INT(tmp_int_0[temp]))->POINTER(tmp_pointer_1[temp])
	addiu $3, $29, -4
	addu $7, $3, $6
	# LOAD POINTER(tmp_pointer_1[temp]), INT(tmp_int_1[temp])
	lw $8, 0x0($7)
	# DEF, INT(tmp_int_1[temp]), INT(b[sp-0x8])
	move $9, $8
	# ASS, 10, INT(b[sp-0x8])
	li $9, 10
	# Call FUNC_f; Params: ; RET INT(tmp_int_2[temp])
	sw $9, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -12
	move $29, $4
	jal FUNC_f
	addiu $29, $29, 12
	lw $31, 0x0($29)
	move $10, $2
	# PRINT_INT INT(b[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# MUL, 0, 4, INT(tmp_int_3[temp])
	li $11, 0
	# ADD, INT(tmp_int_3[temp]), 0, INT(tmp_int_3[temp])
	addiu $11, $11, 0
	# OFFSET (4+INT(tmp_int_3[temp]))->POINTER(tmp_pointer_2[temp])
	addiu $3, $29, -4
	addu $12, $3, $11
	# LOAD POINTER(tmp_pointer_2[temp]), INT(tmp_int_4[temp])
	lw $13, 0x0($12)
	# PRINT_INT INT(tmp_int_4[temp])
	li $2, 1
	move $4, $13
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# RETURN 0
	li $2, 10
	syscall
