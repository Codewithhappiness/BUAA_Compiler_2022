# Yuelin's Compiler
	
.data
	global:
	5
	.space 4
	STR_1: .asciiz "this is d\n"
	STR_3: .asciiz "\n"
	STR_2: .asciiz "19182650\n"
.text
	la $gp, global
	j FUNC_main
FUNC_dd:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_ee:
	# RETURN VOID
	jr $ra
	
FUNC_aa:
	# DEF, 2, INT(m[sp-0x4])
	li $5, 2
	# ADD, INT(m[sp-0x4]), 1, INT(tmp_int_0[temp])
	addiu $6, $5, 1
	# ASS, INT(tmp_int_0[temp]), INT(m[sp-0x4])
	move $5, $6
	# RETURN INT(m[sp-0x4])
	move $2, $5
	sw $5, -0x4($29)
	jr $ra
	
FUNC_bb:
	# ADD, INT(j[sp-0x4]), 1, INT(tmp_int_1[temp])
	lw $8, -0x4($29)
	addiu $7, $8, 1
	# ASS, INT(tmp_int_1[temp]), INT(j[sp-0x4])
	move $8, $7
	# RETURN INT(j[sp-0x4])
	move $2, $8
	sw $8, -0x4($29)
	jr $ra
	
FUNC_cc:
	# ADD, INT(k[sp-0x4]), INT(l[sp-0x8]), INT(tmp_int_2[temp])
	lw $10, -0x4($29)
	lw $11, -0x8($29)
	addu $9, $10, $11
	# ASS, INT(tmp_int_2[temp]), INT(k[sp-0x4])
	move $10, $9
	# RETURN INT(k[sp-0x4])
	move $2, $10
	sw $10, -0x4($29)
	sw $11, -0x8($29)
	jr $ra
	
FUNC_main:
	# DEF, 0, INT(a[sp-0x4])
	li $12, 0
	# DEF, 0, INT(b[sp-0x8])
	li $13, 0
	# DEF, 0, INT(c[sp-0xc])
	li $14, 0
	# DEF, 0, INT(e[sp-0x10])
	li $15, 0
	# DEF, 3, INT(j[sp-0x14])
	li $16, 3
	# DEF, 2, INT(k[sp-0x18])
	li $17, 2
	# DEF, 4, INT(l[sp-0x1c])
	li $18, 4
	# DEF, 0, INT(z[sp-0x20])
	li $19, 0
	# DEF, 1, INT(x[sp-0x24])
	li $20, 1
	# GETINT INT(e[sp-0x10])
	li $2, 5
	syscall
	move $15, $2
	# Call FUNC_aa; Params: ; RET INT(tmp_int_3[temp])
	sw $16, -0x14($29)
	sw $17, -0x18($29)
	sw $18, -0x1c($29)
	sw $19, -0x20($29)
	sw $20, -0x24($29)
	sw $12, -0x4($29)
	sw $13, -0x8($29)
	sw $14, -0xc($29)
	sw $15, -0x10($29)
	sw $31, 0x0($29)
	addiu $4, $29, -40
	move $29, $4
	jal FUNC_aa
	addiu $29, $29, 40
	lw $31, 0x0($29)
	move $21, $2
	# ADD, INT(tmp_int_3[temp]), 1, INT(tmp_int_4[temp])
	addiu $22, $21, 1
	# ASS, INT(tmp_int_4[temp]), INT(a[sp-0x4])
	move $23, $22
	# Call FUNC_bb; Params: INT(j[sp-0x14]); RET INT(tmp_int_5[temp])
	sw $23, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -40
	lw $3, -0x14($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_bb
	addiu $29, $29, 40
	lw $31, 0x0($29)
	move $24, $2
	# ADD, INT(tmp_int_5[temp]), 1, INT(tmp_int_6[temp])
	addiu $25, $24, 1
	# ASS, INT(tmp_int_6[temp]), INT(b[sp-0x8])
	move $26, $25
	# Call FUNC_cc; Params: INT(k[sp-0x18]), INT(l[sp-0x1c]); RET INT(tmp_int_7[temp])
	sw $26, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -40
	lw $3, -0x18($29)
	sw $3, -0x4($4)
	lw $3, -0x1c($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_cc
	addiu $29, $29, 40
	lw $31, 0x0($29)
	move $27, $2
	# SUB, INT(tmp_int_7[temp]), 2, INT(tmp_int_8[temp])
	addiu $6, $27, -2
	# ASS, INT(tmp_int_8[temp]), INT(c[sp-0xc])
	move $5, $6
	# NOT, INT(z[sp-0x20]), INT(tmp_int_9[temp])
	lw $8, -0x20($29)
	seq $7, $0, $8
	# ASS, INT(tmp_int_9[temp]), INT(tmp_int_10[temp])
	move $9, $7
	# Branch INT(tmp_int_9[temp]) ? AND_7 : AND_END_6
	move $3, $7
	bne $3, $0, AND_7
	j AND_END_6
AND_7:
	# JUMP AND_END_6
	j AND_END_6
AND_END_6:
	# ASS, INT(tmp_int_10[temp]), INT(tmp_int_11[temp])
	move $10, $9
	# Branch INT(tmp_int_11[temp]) ? OR_END_5 : OR_8
	move $3, $10
	bne $3, $0, OR_END_5
	j OR_8
OR_8:
	# JUMP OR_END_5
	j OR_END_5
OR_END_5:
	# Branch INT(tmp_int_11[temp]) ? IF_BODY_9 : IF_END_10
	move $3, $10
	bne $3, $0, IF_BODY_9
	j IF_END_10
IF_BODY_9:
	# JUMP B_11
	j B_11
B_11:
	# ASS, 2, INT(x[sp-0x24])
	li $11, 2
	# JUMP B_12
	j B_12
B_12:
	# JUMP IF_END_10
	j IF_END_10
IF_END_10:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# Call FUNC_dd; Params: 
	sw $5, -0xc($29)
	sw $8, -0x20($29)
	sw $11, -0x24($29)
	sw $31, 0x0($29)
	addiu $4, $29, -40
	move $29, $4
	jal FUNC_dd
	addiu $29, $29, 40
	lw $31, 0x0($29)
	# Call FUNC_ee; Params: 
	sw $31, 0x0($29)
	addiu $4, $29, -40
	move $29, $4
	jal FUNC_ee
	addiu $29, $29, 40
	lw $31, 0x0($29)
	# PRINT_INT INT(a[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(b[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(e[sp-0x10])
	li $2, 1
	lw $4, -0x10($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(x[sp-0x24])
	li $2, 1
	lw $4, -0x24($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
