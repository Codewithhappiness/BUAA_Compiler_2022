# Yuelin's Compiler

.data
	global:
	
	.space 4
	STR_1: .asciiz "20373420\n"
	STR_2: .asciiz "Fu1_nC(): "
	STR_3: .asciiz "\n"

.text
	la $gp, global
	j FUNC_main
FUNC_Fu1_nC:
	# JUMP L_OR_EXP_0
L_OR_EXP_0:
	# JUMP L_AND_EXP_1
L_AND_EXP_1:
	# NOT, INT(tmp_int_0[temp]), 0
	seq $17, $0, 0
	# JUMP AND_END_2
AND_END_2:
	# JUMP OR_END_3
OR_END_3:
	# Branch INT(tmp_int_0[temp]) ? IF_BODY_4 : IF_END_5
	bne $17, $0, IF_BODY_4
	j IF_END_5
IF_BODY_4:
	# JUMP B_6
B_6:
	# RETURN 3
	li $2, 3
	jr $ra
	# JUMP B_7
B_7:
	# JUMP IF_END_5
IF_END_5:
	# RETURN 4
	li $2, 4
	jr $ra
	
FUNC_main:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP INLINE_Fu1_nC_BEGIN_1
INLINE_Fu1_nC_BEGIN_1:
	# JUMP L_OR_EXP_9
L_OR_EXP_9:
	# JUMP L_AND_EXP_10
L_AND_EXP_10:
	# NOT, INT(tmp_int_2[temp]), 0
	seq $17, $0, 0
	# JUMP AND_END_11
AND_END_11:
	# JUMP OR_END_12
OR_END_12:
	# Branch INT(tmp_int_2[temp]) ? IF_BODY_13 : IF_END_14
	bne $17, $0, IF_BODY_13
	j IF_END_14
IF_BODY_13:
	# JUMP B_15
B_15:
	# ASS, INT(tmp_int_1[temp]), 3
	li $18, 3
	# JUMP INLINE_Fu1_nC_END_1
	sw $18, -0x8($29)
	j INLINE_Fu1_nC_END_1
	# JUMP B_16
B_16:
	# JUMP IF_END_14
IF_END_14:
	# ASS, INT(tmp_int_1[sp-0x8]), 4
	li $19, 4
	# JUMP INLINE_Fu1_nC_END_1
INLINE_Fu1_nC_END_1:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(tmp_int_1[sp-0x8])
	li $2, 1
	move $4, $19
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# RETURN VOID
	li $2, 10
	syscall
	
