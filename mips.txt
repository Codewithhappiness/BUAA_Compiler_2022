# Yuelin's Compiler

.data
	global:
	1 2 2 3 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	.space 4
	STR_1: .asciiz "19373630\n"
	STR_2: .asciiz "\n"

.text
	la $gp, global
	j FUNC_main
FUNC_output_id:
	# JUMP L_OR_EXP_0
L_OR_EXP_0:
	# JUMP L_AND_EXP_1
L_AND_EXP_1:
	# ASS, INT(tmp_int_16339[temp]), 1
	li $17, 1
	# JUMP AND_3
	sw $17, -0x4($29)
AND_3:
	# ASS, INT(tmp_int_16339[sp-0x4]), 0
	li $18, 0
	# JUMP AND_END_2
	sw $18, -0x4($29)
AND_END_2:
	# ASS, INT(tmp_int_16340[temp]), INT(tmp_int_16339[sp-0x4])
	lw $19, -0x4($29)
	move $20, $19
	# Branch INT(tmp_int_16339[sp-0x4]) ? OR_END_6 : OR_7
	sw $19, -0x4($29)
	sw $20, -0x8($29)
	bne $19, $0, OR_END_6
OR_7:
	# JUMP L_AND_EXP_9
L_AND_EXP_9:
	# JUMP AND_END_10
AND_END_10:
	# OR, INT(tmp_int_16340[sp-0x8]), INT(tmp_int_16340[sp-0x8]), 1
	lw $21, -0x8($29)
	li $21, 1
	# Branch INT(tmp_int_16340[sp-0x8]) ? OR_END_6 : OR_8
	sw $21, -0x8($29)
	bne $21, $0, OR_END_6
OR_8:
	# JUMP OR_END_6
OR_END_6:
	# Branch INT(tmp_int_16340[sp-0x8]) ? IF_BODY_12 : IF_END_13
	lw $22, -0x8($29)
	bne $22, $0, IF_BODY_12
	j IF_END_13
IF_BODY_12:
	# JUMP B_14
B_14:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_15
B_15:
	# JUMP IF_END_13
IF_END_13:
	# RETURN VOID
	jr $ra
	
FUNC_output_a_plus_b:
	lw $6, -0x4($29)
	lw $5, -0x8($29)
	# ADD, INT(tmp_int_16341[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $6, $5
	# PRINT_INT INT(tmp_int_16341[temp])
	li $2, 1
	move $4, $17
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_A_plus_B:
	lw $5, -0x4($29)
	lw $6, -0x8($29)
	# ADD, INT(tmp_int_16342[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $5, $6
	# RETURN INT(tmp_int_16342[temp])
	move $2, $17
	jr $ra
	
FUNC_return_one:
	# RETURN 1
	li $2, 1
	jr $ra
	
FUNC_factorial:
	lw $5, -0x4($29)
	# JUMP L_OR_EXP_20
L_OR_EXP_20:
	# JUMP L_AND_EXP_21
L_AND_EXP_21:
	# MUL, INT(tmp_int_16343[temp]), INT(n[sp-0x4]), 4
	sll $17, $5, 2
	# ADD, INT(tmp_int_16343[temp]), INT(tmp_int_16343[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16343[temp]))->POINTER(tmp_pointer_5011[temp])
	addiu $3, $28, 36
	addu $18, $3, $17
	# LOAD POINTER(tmp_pointer_5011[temp]), INT(tmp_int_16344[temp])
	lw $19, 0x0($18)
	# NEQ, INT(tmp_int_16345[temp]), INT(tmp_int_16344[temp]), 0
	sne $20, $19, 0
	# JUMP AND_END_22
	sw $20, -0x8($29)
AND_END_22:
	# JUMP OR_END_23
OR_END_23:
	# Branch INT(tmp_int_16345[sp-0x8]) ? IF_BODY_24 : IF_ELSE_26
	lw $21, -0x8($29)
	bne $21, $0, IF_BODY_24
	j IF_ELSE_26
IF_BODY_24:
	# JUMP B_27
B_27:
	# MUL, INT(tmp_int_16346[temp]), INT(n[sp-0x4]), 4
	sll $22, $5, 2
	# ADD, INT(tmp_int_16346[temp]), INT(tmp_int_16346[temp]), 0
	addiu $22, $22, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16346[temp]))->POINTER(tmp_pointer_5012[temp])
	addiu $3, $28, 36
	addu $23, $3, $22
	# LOAD POINTER(tmp_pointer_5012[temp]), INT(tmp_int_16347[temp])
	lw $24, 0x0($23)
	# RETURN INT(tmp_int_16347[temp])
	move $2, $24
	jr $ra
	# JUMP B_28
B_28:
	# JUMP IF_END_25
	j IF_END_25
IF_ELSE_26:
	# JUMP B_29
B_29:
	# SUB, INT(tmp_int_16349[temp]), INT(n[sp-0x4]), 1
	addiu $25, $5, -1
	# MUL, INT(tmp_int_16348[temp]), INT(tmp_int_16349[temp]), 4
	sll $26, $25, 2
	# ADD, INT(tmp_int_16348[temp]), INT(tmp_int_16348[temp]), 0
	addiu $26, $26, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16348[temp]))->POINTER(tmp_pointer_5013[temp])
	addiu $3, $28, 36
	addu $27, $3, $26
	# SUB, INT(tmp_int_16350[temp]), INT(n[sp-0x4]), 1
	addiu $17, $5, -1
	# Call FUNC_factorial; Params: INT(tmp_int_16350[temp]); RET INT(tmp_int_16351[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -20
	sw $17, -0x4($4)
	sw $27, -0xc($29)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $18, $2
	lw $5, -0x4($29)
	# STORE POINTER(tmp_pointer_5013[sp-0xc]), INT(tmp_int_16351[temp])
	lw $19, -0xc($29)
	sw $18, 0x0($19)
	# MUL, INT(tmp_int_16352[temp]), INT(n[sp-0x4]), 4
	sll $20, $5, 2
	# ADD, INT(tmp_int_16352[temp]), INT(tmp_int_16352[temp]), 0
	addiu $20, $20, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16352[temp]))->POINTER(tmp_pointer_5014[temp])
	addiu $3, $28, 36
	addu $21, $3, $20
	# SUB, INT(tmp_int_16354[temp]), INT(n[sp-0x4]), 1
	addiu $22, $5, -1
	# MUL, INT(tmp_int_16353[temp]), INT(tmp_int_16354[temp]), 4
	sll $23, $22, 2
	# ADD, INT(tmp_int_16353[temp]), INT(tmp_int_16353[temp]), 0
	addiu $23, $23, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16353[temp]))->POINTER(tmp_pointer_5015[temp])
	addiu $3, $28, 36
	addu $24, $3, $23
	# LOAD POINTER(tmp_pointer_5015[temp]), INT(tmp_int_16355[temp])
	lw $25, 0x0($24)
	# MUL, INT(tmp_int_16356[temp]), INT(tmp_int_16355[temp]), INT(n[sp-0x4])
	mult $25, $5
	mflo $26
	# STORE POINTER(tmp_pointer_5014[temp]), INT(tmp_int_16356[temp])
	sw $26, 0x0($21)
	# MUL, INT(tmp_int_16357[temp]), INT(n[sp-0x4]), 4
	sll $17, $5, 2
	# ADD, INT(tmp_int_16357[temp]), INT(tmp_int_16357[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16357[temp]))->POINTER(tmp_pointer_5016[temp])
	addiu $3, $28, 36
	addu $27, $3, $17
	# LOAD POINTER(tmp_pointer_5016[temp]), INT(tmp_int_16358[temp])
	lw $19, 0x0($27)
	# RETURN INT(tmp_int_16358[temp])
	move $2, $19
	jr $ra
	# JUMP B_30
B_30:
	# JUMP IF_END_25
IF_END_25:
	# RETURN 0
	li $2, 0
	jr $ra
	
FUNC_isPrime:
	lw $5, -0x4($29)
	# DEF, INT(i[sp-0x8]), 3
	li $6, 3
	# JUMP L_OR_EXP_32
L_OR_EXP_32:
	# JUMP L_AND_EXP_33
L_AND_EXP_33:
	# LE, INT(tmp_int_16359[temp]), INT(n[sp-0x4]), 0
	sle $17, $5, 0
	# JUMP AND_END_34
	sw $17, -0xc($29)
AND_END_34:
	# JUMP OR_END_35
OR_END_35:
	# Branch INT(tmp_int_16359[sp-0xc]) ? IF_BODY_36 : IF_END_37
	lw $18, -0xc($29)
	bne $18, $0, IF_BODY_36
	j IF_END_37
IF_BODY_36:
	# JUMP B_38
B_38:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_39
B_39:
	# JUMP IF_END_37
IF_END_37:
	# JUMP L_OR_EXP_40
L_OR_EXP_40:
	# JUMP L_AND_EXP_41
L_AND_EXP_41:
	# MOD, INT(tmp_int_16360[temp]), INT(n[sp-0x4]), 2
	li $3, 2
	div $5 $3
	mfhi $19
	# EQ, INT(tmp_int_16361[temp]), INT(tmp_int_16360[temp]), 0
	seq $20, $19, 0
	# JUMP AND_END_42
	sw $20, -0x10($29)
AND_END_42:
	# JUMP OR_END_43
OR_END_43:
	# Branch INT(tmp_int_16361[sp-0x10]) ? IF_BODY_44 : IF_END_45
	lw $21, -0x10($29)
	bne $21, $0, IF_BODY_44
	j IF_END_45
IF_BODY_44:
	# JUMP B_46
B_46:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_47
B_47:
	# JUMP IF_END_45
IF_END_45:
	# JUMP L_OR_EXP_51
L_OR_EXP_51:
	# JUMP L_AND_EXP_52
L_AND_EXP_52:
	# DIV, INT(tmp_int_16362[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_399
	srl $22, $5, 1
	j DIV_END_400
DIV_399:
	subu $5, $0, $5
	srl $22, $5, 1
	subu $22, $0, $22
DIV_END_400:
	# LT, INT(tmp_int_16363[temp]), INT(i[sp-0x8]), INT(tmp_int_16362[temp])
	slt $23, $6, $22
	# JUMP AND_END_53
	sw $23, -0x14($29)
AND_END_53:
	# JUMP OR_END_54
OR_END_54:
	# Branch INT(tmp_int_16363[sp-0x14]) ? DO_BODY_48 : DO_END_50
	lw $24, -0x14($29)
	bne $24, $0, DO_BODY_48
	j DO_END_50
	# JUMP DO_BODY_48
DO_BODY_48:
	# JUMP B_55
B_55:
	# JUMP L_OR_EXP_56
	j L_OR_EXP_56
	# JUMP B_64
	j B_64
L_OR_EXP_56:
	# JUMP L_AND_EXP_57
L_AND_EXP_57:
	# MOD, INT(tmp_int_16364[temp]), INT(n[sp-0x4]), INT(i[sp-0x8])
	div $5 $6
	mfhi $25
	# EQ, INT(tmp_int_16365[temp]), INT(tmp_int_16364[temp]), 0
	seq $26, $25, 0
	# JUMP AND_END_58
	sw $26, -0x18($29)
AND_END_58:
	# JUMP OR_END_59
OR_END_59:
	# Branch INT(tmp_int_16365[sp-0x18]) ? IF_BODY_60 : IF_END_61
	lw $27, -0x18($29)
	bne $27, $0, IF_BODY_60
	j IF_END_61
IF_BODY_60:
	# JUMP B_62
B_62:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_63
B_63:
	# JUMP IF_END_61
IF_END_61:
	# ADD, INT(tmp_int_16366[temp]), INT(i[sp-0x8]), 2
	addiu $17, $6, 2
	# ASS, INT(i[sp-0x8]), INT(tmp_int_16366[temp])
	move $6, $17
	# JUMP B_64
B_64:
	# JUMP DO_CHECK_49
DO_CHECK_49:
	# JUMP L_OR_EXP_65
L_OR_EXP_65:
	# JUMP L_AND_EXP_66
L_AND_EXP_66:
	# DIV, INT(tmp_int_16367[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_401
	srl $18, $5, 1
	j DIV_END_402
DIV_401:
	subu $5, $0, $5
	srl $18, $5, 1
	subu $18, $0, $18
DIV_END_402:
	# LT, INT(tmp_int_16368[temp]), INT(i[sp-0x8]), INT(tmp_int_16367[temp])
	slt $19, $6, $18
	# JUMP AND_END_67
	sw $19, -0x1c($29)
AND_END_67:
	# JUMP OR_END_68
OR_END_68:
	# Branch INT(tmp_int_16368[sp-0x1c]) ? DO_BODY_48 : DO_END_50
	lw $20, -0x1c($29)
	bne $20, $0, DO_BODY_48
	j DO_END_50
	# JUMP DO_END_50
DO_END_50:
	# RETURN 1
	li $2, 1
	jr $ra
	
FUNC_sumMatrix:
	lw $6, -0x4($29)
	# DEF, INT(i[sp-0x8]), 0
	li $8, 0
	# DEF, INT(sum[sp-0x10]), 0
	li $5, 0
	# JUMP L_OR_EXP_73
L_OR_EXP_73:
	# JUMP L_AND_EXP_74
L_AND_EXP_74:
	# LT, INT(tmp_int_16369[temp]), INT(i[sp-0x8]), 10
	li $3, 10
	slt $17, $8, $3
	# JUMP AND_END_75
	sw $17, -0x14($29)
AND_END_75:
	# JUMP OR_END_76
OR_END_76:
	# Branch INT(tmp_int_16369[sp-0x14]) ? DO_BODY_70 : DO_END_72
	lw $18, -0x14($29)
	bne $18, $0, DO_BODY_70
	j DO_END_72
	# JUMP DO_BODY_70
DO_BODY_70:
	# JUMP B_77
B_77:
	# ASS, INT(j[sp-0xc]), 0
	li $7, 0
	# JUMP L_OR_EXP_81
	j L_OR_EXP_81
	# JUMP B_91
	j B_91
L_OR_EXP_81:
	# JUMP L_AND_EXP_82
L_AND_EXP_82:
	# LT, INT(tmp_int_16370[temp]), INT(j[sp-0xc]), 10
	li $3, 10
	slt $19, $7, $3
	# JUMP AND_END_83
	sw $19, -0x18($29)
AND_END_83:
	# JUMP OR_END_84
OR_END_84:
	# Branch INT(tmp_int_16370[sp-0x18]) ? DO_BODY_78 : DO_END_80
	lw $20, -0x18($29)
	bne $20, $0, DO_BODY_78
	j DO_END_80
	# JUMP DO_BODY_78
DO_BODY_78:
	# JUMP B_85
B_85:
	# MUL, INT(tmp_int_16371[temp]), INT(j[sp-0xc]), 4
	sll $21, $7, 2
	# ADD, INT(tmp_int_16371[temp]), INT(tmp_int_16371[temp]), 0
	addiu $21, $21, 0
	# MUL, INT(tmp_int_16372[temp]), INT(i[sp-0x8]), 40
	sll $22, $8, 5
	sll $3, $8, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_16372[temp]), INT(tmp_int_16372[temp]), INT(tmp_int_16371[temp])
	addu $22, $22, $21
	# OFFSET (ARRAY(array_f[sp-0x4])+INT(tmp_int_16372[temp]))->POINTER(tmp_pointer_5017[temp])
	addu $23, $6, $22
	# LOAD POINTER(tmp_pointer_5017[temp]), INT(tmp_int_16373[temp])
	lw $24, 0x0($23)
	# ADD, INT(tmp_int_16374[temp]), INT(sum[sp-0x10]), INT(tmp_int_16373[temp])
	addu $25, $5, $24
	# ASS, INT(sum[sp-0x10]), INT(tmp_int_16374[temp])
	move $5, $25
	# ADD, INT(tmp_int_16375[temp]), INT(j[sp-0xc]), 1
	addiu $26, $7, 1
	# ASS, INT(j[sp-0xc]), INT(tmp_int_16375[temp])
	move $7, $26
	# JUMP B_86
	sw $22, -0x1c($29)
B_86:
	# JUMP DO_CHECK_79
DO_CHECK_79:
	# JUMP L_OR_EXP_87
L_OR_EXP_87:
	# JUMP L_AND_EXP_88
L_AND_EXP_88:
	# LT, INT(tmp_int_16376[temp]), INT(j[sp-0xc]), 10
	li $3, 10
	slt $27, $7, $3
	# JUMP AND_END_89
	sw $27, -0x20($29)
AND_END_89:
	# JUMP OR_END_90
OR_END_90:
	# Branch INT(tmp_int_16376[sp-0x20]) ? DO_BODY_78 : DO_END_80
	lw $17, -0x20($29)
	bne $17, $0, DO_BODY_78
	j DO_END_80
	# JUMP DO_END_80
DO_END_80:
	# ADD, INT(tmp_int_16377[temp]), INT(i[sp-0x8]), 1
	addiu $18, $8, 1
	# ASS, INT(i[sp-0x8]), INT(tmp_int_16377[temp])
	move $8, $18
	# JUMP B_91
B_91:
	# JUMP DO_CHECK_71
DO_CHECK_71:
	# JUMP L_OR_EXP_92
L_OR_EXP_92:
	# JUMP L_AND_EXP_93
L_AND_EXP_93:
	# LT, INT(tmp_int_16378[temp]), INT(i[sp-0x8]), 10
	li $3, 10
	slt $19, $8, $3
	# JUMP AND_END_94
	sw $19, -0x24($29)
AND_END_94:
	# JUMP OR_END_95
OR_END_95:
	# Branch INT(tmp_int_16378[sp-0x24]) ? DO_BODY_70 : DO_END_72
	lw $20, -0x24($29)
	bne $20, $0, DO_BODY_70
	j DO_END_72
	# JUMP DO_END_72
DO_END_72:
	# RETURN INT(sum[sp-0x10])
	move $2, $5
	jr $ra
	
FUNC_matrixMulti:
	lw $5, -0x4($29)
	lw $6, -0x8($29)
	lw $7, -0xc($29)
	# DEF, INT(i[sp-0x1a0]), 0
	li $10, 0
	# JUMP L_OR_EXP_100
L_OR_EXP_100:
	# JUMP L_AND_EXP_101
L_AND_EXP_101:
	# LT, INT(tmp_int_16379[temp]), INT(i[sp-0x1a0]), 10
	li $3, 10
	slt $17, $10, $3
	# JUMP AND_END_102
	sw $17, -0x1bc($29)
AND_END_102:
	# JUMP OR_END_103
OR_END_103:
	# Branch INT(tmp_int_16379[sp-0x1bc]) ? DO_BODY_97 : DO_END_99
	lw $18, -0x1bc($29)
	bne $18, $0, DO_BODY_97
	j DO_END_99
	# JUMP DO_BODY_97
DO_BODY_97:
	# JUMP B_104
B_104:
	# ASS, INT(j[sp-0x1a4]), 0
	li $8, 0
	# JUMP L_OR_EXP_108
	j L_OR_EXP_108
	# JUMP B_131
	j B_131
L_OR_EXP_108:
	# JUMP L_AND_EXP_109
L_AND_EXP_109:
	# LT, INT(tmp_int_16380[temp]), INT(j[sp-0x1a4]), 10
	li $3, 10
	slt $19, $8, $3
	# JUMP AND_END_110
	sw $19, -0x1c0($29)
AND_END_110:
	# JUMP OR_END_111
OR_END_111:
	# Branch INT(tmp_int_16380[sp-0x1c0]) ? DO_BODY_105 : DO_END_107
	lw $20, -0x1c0($29)
	bne $20, $0, DO_BODY_105
	j DO_END_107
	# JUMP DO_BODY_105
DO_BODY_105:
	# JUMP B_112
B_112:
	# ASS, INT(k[sp-0x1a8]), 0
	li $7, 0
	# MUL, INT(tmp_int_16381[temp]), INT(j[sp-0x1a4]), 4
	sll $21, $8, 2
	# ADD, INT(tmp_int_16381[temp]), INT(tmp_int_16381[temp]), 0
	addiu $21, $21, 0
	# MUL, INT(tmp_int_16382[temp]), INT(i[sp-0x1a0]), 40
	sll $22, $10, 5
	sll $3, $10, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_16382[temp]), INT(tmp_int_16382[temp]), INT(tmp_int_16381[temp])
	addu $22, $22, $21
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_16382[temp]))->POINTER(tmp_pointer_5018[temp])
	addiu $3, $29, -412
	addu $23, $3, $22
	# STORE POINTER(tmp_pointer_5018[temp]), 0
	li $3, 0
	sw $3, 0x0($23)
	# JUMP L_OR_EXP_116
	j L_OR_EXP_116
	# JUMP B_126
	j B_126
L_OR_EXP_116:
	# JUMP L_AND_EXP_117
L_AND_EXP_117:
	# LT, INT(tmp_int_16383[temp]), INT(k[sp-0x1a8]), 10
	li $3, 10
	slt $24, $7, $3
	# JUMP AND_END_118
	sw $24, -0x1c4($29)
AND_END_118:
	# JUMP OR_END_119
OR_END_119:
	# Branch INT(tmp_int_16383[sp-0x1c4]) ? DO_BODY_113 : DO_END_115
	lw $25, -0x1c4($29)
	bne $25, $0, DO_BODY_113
	j DO_END_115
	# JUMP DO_BODY_113
DO_BODY_113:
	# JUMP B_120
B_120:
	# MUL, INT(tmp_int_16384[temp]), INT(j[sp-0x1a4]), 4
	sll $26, $8, 2
	# ADD, INT(tmp_int_16384[temp]), INT(tmp_int_16384[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_16385[temp]), INT(i[sp-0x1a0]), 40
	sll $27, $10, 5
	sll $3, $10, 3
	addu $27, $27, $3
	# ADD, INT(tmp_int_16385[temp]), INT(tmp_int_16385[temp]), INT(tmp_int_16384[temp])
	addu $27, $27, $26
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_16385[temp]))->POINTER(tmp_pointer_5019[temp])
	addiu $3, $29, -412
	addu $17, $3, $27
	# MUL, INT(tmp_int_16386[temp]), INT(j[sp-0x1a4]), 4
	sll $18, $8, 2
	# ADD, INT(tmp_int_16386[temp]), INT(tmp_int_16386[temp]), 0
	addiu $18, $18, 0
	# MUL, INT(tmp_int_16387[temp]), INT(i[sp-0x1a0]), 40
	sll $19, $10, 5
	sll $3, $10, 3
	addu $19, $19, $3
	# ADD, INT(tmp_int_16387[temp]), INT(tmp_int_16387[temp]), INT(tmp_int_16386[temp])
	addu $19, $19, $18
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_16387[temp]))->POINTER(tmp_pointer_5020[temp])
	addiu $3, $29, -412
	addu $20, $3, $19
	# LOAD POINTER(tmp_pointer_5020[temp]), INT(tmp_int_16388[temp])
	lw $21, 0x0($20)
	# MUL, INT(tmp_int_16389[temp]), INT(k[sp-0x1a8]), 4
	sll $22, $7, 2
	# ADD, INT(tmp_int_16389[temp]), INT(tmp_int_16389[temp]), 0
	addiu $22, $22, 0
	# MUL, INT(tmp_int_16390[temp]), INT(i[sp-0x1a0]), 40
	sll $23, $10, 5
	sll $3, $10, 3
	addu $23, $23, $3
	# ADD, INT(tmp_int_16390[temp]), INT(tmp_int_16390[temp]), INT(tmp_int_16389[temp])
	addu $23, $23, $22
	# OFFSET (ARRAY(matrix_a[sp-0x4])+INT(tmp_int_16390[temp]))->POINTER(tmp_pointer_5021[temp])
	addu $24, $5, $23
	# LOAD POINTER(tmp_pointer_5021[temp]), INT(tmp_int_16391[temp])
	lw $25, 0x0($24)
	# MUL, INT(tmp_int_16392[temp]), INT(j[sp-0x1a4]), 4
	sll $26, $8, 2
	# ADD, INT(tmp_int_16392[temp]), INT(tmp_int_16392[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_16393[temp]), INT(k[sp-0x1a8]), 40
	sll $27, $7, 5
	sll $3, $7, 3
	addu $27, $27, $3
	# ADD, INT(tmp_int_16393[temp]), INT(tmp_int_16393[temp]), INT(tmp_int_16392[temp])
	addu $27, $27, $26
	# OFFSET (ARRAY(matrix_b[sp-0x8])+INT(tmp_int_16393[temp]))->POINTER(tmp_pointer_5022[temp])
	addu $18, $6, $27
	# LOAD POINTER(tmp_pointer_5022[temp]), INT(tmp_int_16394[temp])
	lw $19, 0x0($18)
	# MUL, INT(tmp_int_16395[temp]), INT(tmp_int_16391[temp]), INT(tmp_int_16394[temp])
	mult $25, $19
	mflo $20
	# ADD, INT(tmp_int_16396[temp]), INT(tmp_int_16388[temp]), INT(tmp_int_16395[temp])
	addu $22, $21, $20
	# STORE POINTER(tmp_pointer_5019[temp]), INT(tmp_int_16396[temp])
	sw $22, 0x0($17)
	# ADD, INT(tmp_int_16397[temp]), INT(k[sp-0x1a8]), 1
	addiu $24, $7, 1
	# ASS, INT(k[sp-0x1a8]), INT(tmp_int_16397[temp])
	move $7, $24
	# JUMP B_121
	sw $23, -0x1c8($29)
	sw $27, -0x1cc($29)
B_121:
	# JUMP DO_CHECK_114
DO_CHECK_114:
	# JUMP L_OR_EXP_122
L_OR_EXP_122:
	# JUMP L_AND_EXP_123
L_AND_EXP_123:
	# LT, INT(tmp_int_16398[temp]), INT(k[sp-0x1a8]), 10
	li $3, 10
	slt $26, $7, $3
	# JUMP AND_END_124
	sw $26, -0x1d0($29)
AND_END_124:
	# JUMP OR_END_125
OR_END_125:
	# Branch INT(tmp_int_16398[sp-0x1d0]) ? DO_BODY_113 : DO_END_115
	lw $18, -0x1d0($29)
	bne $18, $0, DO_BODY_113
	j DO_END_115
	# JUMP DO_END_115
DO_END_115:
	# ADD, INT(tmp_int_16399[temp]), INT(j[sp-0x1a4]), 1
	addiu $25, $8, 1
	# ASS, INT(j[sp-0x1a4]), INT(tmp_int_16399[temp])
	move $8, $25
	# JUMP B_126
B_126:
	# JUMP DO_CHECK_106
DO_CHECK_106:
	# JUMP L_OR_EXP_127
L_OR_EXP_127:
	# JUMP L_AND_EXP_128
L_AND_EXP_128:
	# LT, INT(tmp_int_16400[temp]), INT(j[sp-0x1a4]), 10
	li $3, 10
	slt $19, $8, $3
	# JUMP AND_END_129
	sw $19, -0x1d4($29)
AND_END_129:
	# JUMP OR_END_130
OR_END_130:
	# Branch INT(tmp_int_16400[sp-0x1d4]) ? DO_BODY_105 : DO_END_107
	lw $21, -0x1d4($29)
	bne $21, $0, DO_BODY_105
	j DO_END_107
	# JUMP DO_END_107
DO_END_107:
	# ADD, INT(tmp_int_16401[temp]), INT(i[sp-0x1a0]), 1
	addiu $20, $10, 1
	# ASS, INT(i[sp-0x1a0]), INT(tmp_int_16401[temp])
	move $10, $20
	# JUMP B_131
B_131:
	# JUMP DO_CHECK_98
DO_CHECK_98:
	# JUMP L_OR_EXP_132
L_OR_EXP_132:
	# JUMP L_AND_EXP_133
L_AND_EXP_133:
	# LT, INT(tmp_int_16402[temp]), INT(i[sp-0x1a0]), 10
	li $3, 10
	slt $17, $10, $3
	# JUMP AND_END_134
	sw $17, -0x1d8($29)
AND_END_134:
	# JUMP OR_END_135
OR_END_135:
	# Branch INT(tmp_int_16402[sp-0x1d8]) ? DO_BODY_97 : DO_END_99
	lw $22, -0x1d8($29)
	bne $22, $0, DO_BODY_97
	j DO_END_99
	# JUMP DO_END_99
DO_END_99:
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+0)->POINTER(tmp_pointer_5023[temp])
	addiu $24, $29, -412
	# ASS, ARRAY(INLINE_array_f_1[sp-0x1ac]), POINTER(tmp_pointer_5023[temp])
	move $7, $24
	# OFFSET (INT(tmp_int_16403[temp])+428)->POINTER(tmp_pointer_5024[temp])
	addiu $23, $29, -428
	# STORE POINTER(tmp_pointer_5024[temp]), POINTER(tmp_pointer_5023[temp])
	sw $24, 0x0($23)
	# JUMP INLINE_sumMatrix_BEGIN_1
INLINE_sumMatrix_BEGIN_1:
	# DEF, INT(INLINE_i_1[sp-0x1b0]), 0
	li $5, 0
	# DEF, INT(INLINE_sum_1[sp-0x1b8]), 0
	li $8, 0
	# JUMP L_OR_EXP_139
L_OR_EXP_139:
	# JUMP L_AND_EXP_140
L_AND_EXP_140:
	# LT, INT(tmp_int_16405[temp]), INT(INLINE_i_1[sp-0x1b0]), 10
	li $3, 10
	slt $27, $5, $3
	# JUMP AND_END_141
	sw $27, -0x1dc($29)
AND_END_141:
	# JUMP OR_END_142
OR_END_142:
	# Branch INT(tmp_int_16405[sp-0x1dc]) ? DO_BODY_136 : DO_END_138
	lw $26, -0x1dc($29)
	bne $26, $0, DO_BODY_136
	j DO_END_138
	# JUMP DO_BODY_136
DO_BODY_136:
	# JUMP B_143
B_143:
	# ASS, INT(INLINE_j_1[sp-0x1b4]), 0
	li $6, 0
	# JUMP L_OR_EXP_147
	j L_OR_EXP_147
	# JUMP B_157
	j B_157
L_OR_EXP_147:
	# JUMP L_AND_EXP_148
L_AND_EXP_148:
	# LT, INT(tmp_int_16406[temp]), INT(INLINE_j_1[sp-0x1b4]), 10
	li $3, 10
	slt $18, $6, $3
	# JUMP AND_END_149
	sw $18, -0x1e0($29)
AND_END_149:
	# JUMP OR_END_150
OR_END_150:
	# Branch INT(tmp_int_16406[sp-0x1e0]) ? DO_BODY_144 : DO_END_146
	lw $25, -0x1e0($29)
	bne $25, $0, DO_BODY_144
	j DO_END_146
	# JUMP DO_BODY_144
DO_BODY_144:
	# JUMP B_151
B_151:
	# MUL, INT(tmp_int_16407[temp]), INT(INLINE_j_1[sp-0x1b4]), 4
	sll $19, $6, 2
	# ADD, INT(tmp_int_16407[temp]), INT(tmp_int_16407[temp]), 0
	addiu $19, $19, 0
	# MUL, INT(tmp_int_16408[temp]), INT(INLINE_i_1[sp-0x1b0]), 40
	sll $21, $5, 5
	sll $3, $5, 3
	addu $21, $21, $3
	# ADD, INT(tmp_int_16408[temp]), INT(tmp_int_16408[temp]), INT(tmp_int_16407[temp])
	addu $21, $21, $19
	# OFFSET (ARRAY(INLINE_array_f_1[sp-0x1ac])+INT(tmp_int_16408[temp]))->POINTER(tmp_pointer_5025[temp])
	addu $20, $7, $21
	# LOAD POINTER(tmp_pointer_5025[temp]), INT(tmp_int_16409[temp])
	lw $17, 0x0($20)
	# ADD, INT(tmp_int_16410[temp]), INT(INLINE_sum_1[sp-0x1b8]), INT(tmp_int_16409[temp])
	addu $22, $8, $17
	# ASS, INT(INLINE_sum_1[sp-0x1b8]), INT(tmp_int_16410[temp])
	move $8, $22
	# ADD, INT(tmp_int_16411[temp]), INT(INLINE_j_1[sp-0x1b4]), 1
	addiu $23, $6, 1
	# ASS, INT(INLINE_j_1[sp-0x1b4]), INT(tmp_int_16411[temp])
	move $6, $23
	# JUMP B_152
	sw $21, -0x1e4($29)
B_152:
	# JUMP DO_CHECK_145
DO_CHECK_145:
	# JUMP L_OR_EXP_153
L_OR_EXP_153:
	# JUMP L_AND_EXP_154
L_AND_EXP_154:
	# LT, INT(tmp_int_16412[temp]), INT(INLINE_j_1[sp-0x1b4]), 10
	li $3, 10
	slt $24, $6, $3
	# JUMP AND_END_155
	sw $24, -0x1e8($29)
AND_END_155:
	# JUMP OR_END_156
OR_END_156:
	# Branch INT(tmp_int_16412[sp-0x1e8]) ? DO_BODY_144 : DO_END_146
	lw $27, -0x1e8($29)
	bne $27, $0, DO_BODY_144
	j DO_END_146
	# JUMP DO_END_146
DO_END_146:
	# ADD, INT(tmp_int_16413[temp]), INT(INLINE_i_1[sp-0x1b0]), 1
	addiu $26, $5, 1
	# ASS, INT(INLINE_i_1[sp-0x1b0]), INT(tmp_int_16413[temp])
	move $5, $26
	# JUMP B_157
B_157:
	# JUMP DO_CHECK_137
DO_CHECK_137:
	# JUMP L_OR_EXP_158
L_OR_EXP_158:
	# JUMP L_AND_EXP_159
L_AND_EXP_159:
	# LT, INT(tmp_int_16414[temp]), INT(INLINE_i_1[sp-0x1b0]), 10
	li $3, 10
	slt $18, $5, $3
	# JUMP AND_END_160
	sw $18, -0x1ec($29)
AND_END_160:
	# JUMP OR_END_161
OR_END_161:
	# Branch INT(tmp_int_16414[sp-0x1ec]) ? DO_BODY_136 : DO_END_138
	lw $25, -0x1ec($29)
	bne $25, $0, DO_BODY_136
	j DO_END_138
	# JUMP DO_END_138
DO_END_138:
	# ASS, INT(tmp_int_16404[temp]), INT(INLINE_sum_1[sp-0x1b8])
	move $19, $8
	# JUMP INLINE_sumMatrix_END_1
	sw $19, -0x1f0($29)
INLINE_sumMatrix_END_1:
	# RETURN INT(tmp_int_16404[sp-0x1f0])
	lw $20, -0x1f0($29)
	move $2, $20
	jr $ra
	
FUNC_main:
	# JUMP INLINE_output_id_BEGIN_2
INLINE_output_id_BEGIN_2:
	# JUMP L_OR_EXP_164
L_OR_EXP_164:
	# JUMP L_AND_EXP_165
L_AND_EXP_165:
	# ASS, INT(tmp_int_16415[temp]), 1
	li $17, 1
	# JUMP AND_167
	sw $17, -0x1dc($29)
AND_167:
	# ASS, INT(tmp_int_16415[sp-0x1dc]), 0
	li $18, 0
	# JUMP AND_END_166
	sw $18, -0x1dc($29)
AND_END_166:
	# ASS, INT(tmp_int_16416[temp]), INT(tmp_int_16415[sp-0x1dc])
	lw $19, -0x1dc($29)
	move $20, $19
	# Branch INT(tmp_int_16415[sp-0x1dc]) ? OR_END_170 : OR_171
	sw $19, -0x1dc($29)
	sw $20, -0x1e0($29)
	bne $19, $0, OR_END_170
OR_171:
	# JUMP L_AND_EXP_173
L_AND_EXP_173:
	# JUMP AND_END_174
AND_END_174:
	# OR, INT(tmp_int_16416[sp-0x1e0]), INT(tmp_int_16416[sp-0x1e0]), 1
	lw $21, -0x1e0($29)
	li $21, 1
	# Branch INT(tmp_int_16416[sp-0x1e0]) ? OR_END_170 : OR_172
	sw $21, -0x1e0($29)
	bne $21, $0, OR_END_170
OR_172:
	# JUMP OR_END_170
OR_END_170:
	# Branch INT(tmp_int_16416[sp-0x1e0]) ? IF_BODY_176 : IF_END_177
	lw $22, -0x1e0($29)
	bne $22, $0, IF_BODY_176
	j IF_END_177
IF_BODY_176:
	# JUMP B_178
B_178:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_179
B_179:
	# JUMP IF_END_177
IF_END_177:
	# JUMP B_180
B_180:
	# JUMP INLINE_output_id_END_2
INLINE_output_id_END_2:
	# ASS, INT(INLINE_n_3[sp-0x4]), 89
	li $5, 89
	# JUMP INLINE_isPrime_BEGIN_3
INLINE_isPrime_BEGIN_3:
	# DEF, INT(INLINE_i_3[sp-0x8]), 3
	li $6, 3
	# JUMP L_OR_EXP_181
L_OR_EXP_181:
	# JUMP L_AND_EXP_182
L_AND_EXP_182:
	# LE, INT(tmp_int_16418[temp]), INT(INLINE_n_3[sp-0x4]), 0
	sle $23, $5, 0
	# JUMP AND_END_183
	sw $23, -0x1e4($29)
AND_END_183:
	# JUMP OR_END_184
OR_END_184:
	# Branch INT(tmp_int_16418[sp-0x1e4]) ? IF_BODY_185 : IF_END_186
	lw $24, -0x1e4($29)
	bne $24, $0, IF_BODY_185
	j IF_END_186
IF_BODY_185:
	# JUMP B_187
B_187:
	# ASS, INT(tmp_int_16417[temp]), 0
	li $25, 0
	# JUMP INLINE_isPrime_END_3
	sw $25, -0x1e8($29)
	j INLINE_isPrime_END_3
	# JUMP B_188
B_188:
	# JUMP IF_END_186
IF_END_186:
	# JUMP L_OR_EXP_189
L_OR_EXP_189:
	# JUMP L_AND_EXP_190
L_AND_EXP_190:
	# MOD, INT(tmp_int_16419[temp]), INT(INLINE_n_3[sp-0x4]), 2
	li $3, 2
	div $5 $3
	mfhi $26
	# EQ, INT(tmp_int_16420[temp]), INT(tmp_int_16419[temp]), 0
	seq $27, $26, 0
	# JUMP AND_END_191
	sw $27, -0x1ec($29)
AND_END_191:
	# JUMP OR_END_192
OR_END_192:
	# Branch INT(tmp_int_16420[sp-0x1ec]) ? IF_BODY_193 : IF_END_194
	lw $17, -0x1ec($29)
	bne $17, $0, IF_BODY_193
	j IF_END_194
IF_BODY_193:
	# JUMP B_195
B_195:
	# ASS, INT(tmp_int_16417[sp-0x1e8]), 0
	li $18, 0
	# JUMP INLINE_isPrime_END_3
	sw $18, -0x1e8($29)
	j INLINE_isPrime_END_3
	# JUMP B_196
B_196:
	# JUMP IF_END_194
IF_END_194:
	# JUMP L_OR_EXP_200
L_OR_EXP_200:
	# JUMP L_AND_EXP_201
L_AND_EXP_201:
	# DIV, INT(tmp_int_16421[temp]), INT(INLINE_n_3[sp-0x4]), 2
	bltz $5, DIV_403
	srl $19, $5, 1
	j DIV_END_404
DIV_403:
	subu $5, $0, $5
	srl $19, $5, 1
	subu $19, $0, $19
DIV_END_404:
	# LT, INT(tmp_int_16422[temp]), INT(INLINE_i_3[sp-0x8]), INT(tmp_int_16421[temp])
	slt $20, $6, $19
	# JUMP AND_END_202
	sw $20, -0x1f0($29)
AND_END_202:
	# JUMP OR_END_203
OR_END_203:
	# Branch INT(tmp_int_16422[sp-0x1f0]) ? DO_BODY_197 : DO_END_199
	lw $21, -0x1f0($29)
	bne $21, $0, DO_BODY_197
	j DO_END_199
	# JUMP DO_BODY_197
DO_BODY_197:
	# JUMP B_204
B_204:
	# JUMP L_OR_EXP_205
	j L_OR_EXP_205
	# JUMP B_213
	j B_213
L_OR_EXP_205:
	# JUMP L_AND_EXP_206
L_AND_EXP_206:
	# MOD, INT(tmp_int_16423[temp]), INT(INLINE_n_3[sp-0x4]), INT(INLINE_i_3[sp-0x8])
	div $5 $6
	mfhi $22
	# EQ, INT(tmp_int_16424[temp]), INT(tmp_int_16423[temp]), 0
	seq $23, $22, 0
	# JUMP AND_END_207
	sw $23, -0x1f4($29)
AND_END_207:
	# JUMP OR_END_208
OR_END_208:
	# Branch INT(tmp_int_16424[sp-0x1f4]) ? IF_BODY_209 : IF_END_210
	lw $24, -0x1f4($29)
	bne $24, $0, IF_BODY_209
	j IF_END_210
IF_BODY_209:
	# JUMP B_211
B_211:
	# ASS, INT(tmp_int_16417[sp-0x1e8]), 0
	li $25, 0
	# JUMP INLINE_isPrime_END_3
	sw $25, -0x1e8($29)
	j INLINE_isPrime_END_3
	# JUMP B_212
B_212:
	# JUMP IF_END_210
IF_END_210:
	# ADD, INT(tmp_int_16425[temp]), INT(INLINE_i_3[sp-0x8]), 2
	addiu $26, $6, 2
	# ASS, INT(INLINE_i_3[sp-0x8]), INT(tmp_int_16425[temp])
	move $6, $26
	# JUMP B_213
B_213:
	# JUMP DO_CHECK_198
DO_CHECK_198:
	# JUMP L_OR_EXP_214
L_OR_EXP_214:
	# JUMP L_AND_EXP_215
L_AND_EXP_215:
	# DIV, INT(tmp_int_16426[temp]), INT(INLINE_n_3[sp-0x4]), 2
	bltz $5, DIV_405
	srl $27, $5, 1
	j DIV_END_406
DIV_405:
	subu $5, $0, $5
	srl $27, $5, 1
	subu $27, $0, $27
DIV_END_406:
	# LT, INT(tmp_int_16427[temp]), INT(INLINE_i_3[sp-0x8]), INT(tmp_int_16426[temp])
	slt $17, $6, $27
	# JUMP AND_END_216
	sw $17, -0x1f8($29)
AND_END_216:
	# JUMP OR_END_217
OR_END_217:
	# Branch INT(tmp_int_16427[sp-0x1f8]) ? DO_BODY_197 : DO_END_199
	lw $18, -0x1f8($29)
	bne $18, $0, DO_BODY_197
	j DO_END_199
	# JUMP DO_END_199
DO_END_199:
	# ASS, INT(tmp_int_16417[sp-0x1e8]), 1
	li $19, 1
	# JUMP INLINE_isPrime_END_3
	sw $19, -0x1e8($29)
INLINE_isPrime_END_3:
	# PRINT_INT INT(tmp_int_16417[sp-0x1e8])
	li $2, 1
	lw $20, -0x1e8($29)
	move $4, $20
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP L_OR_EXP_219
L_OR_EXP_219:
	# JUMP L_AND_EXP_220
L_AND_EXP_220:
	# GE, INT(tmp_int_16428[temp]), INT(const_b[data+0x4]), INT(int_c[data+0x10])
	lw $21, 0x4($28)
	lw $22, 0x10($28)
	sge $23, $21, $22
	# JUMP AND_END_221
	sw $23, -0x1fc($29)
	sw $21, 0x4($28)
	sw $22, 0x10($28)
AND_END_221:
	# JUMP OR_END_222
OR_END_222:
	# Branch INT(tmp_int_16428[sp-0x1fc]) ? IF_BODY_223 : IF_END_224
	lw $24, -0x1fc($29)
	bne $24, $0, IF_BODY_223
	j IF_END_224
IF_BODY_223:
	# JUMP B_225
B_225:
	# ASS, INT(int_d[data+0x14]), 1
	li $25, 1
	# JUMP B_226
	sw $25, 0x14($28)
B_226:
	# JUMP IF_END_224
IF_END_224:
	# JUMP L_OR_EXP_227
L_OR_EXP_227:
	# JUMP L_AND_EXP_228
L_AND_EXP_228:
	# EQ, INT(tmp_int_16429[temp]), INT(const_b[data+0x4]), INT(int_d[data+0x14])
	lw $26, 0x4($28)
	lw $27, 0x14($28)
	seq $17, $26, $27
	# JUMP AND_END_229
	sw $17, -0x200($29)
	sw $27, 0x14($28)
	sw $26, 0x4($28)
AND_END_229:
	# JUMP OR_END_230
OR_END_230:
	# Branch INT(tmp_int_16429[sp-0x200]) ? IF_BODY_231 : IF_END_232
	lw $18, -0x200($29)
	bne $18, $0, IF_BODY_231
	j IF_END_232
IF_BODY_231:
	# JUMP B_233
B_233:
	# ASS, INT(int_e[data+0x18]), 0
	li $19, 0
	# JUMP B_234
	sw $19, 0x18($28)
B_234:
	# JUMP IF_END_232
IF_END_232:
	# JUMP L_OR_EXP_235
L_OR_EXP_235:
	# JUMP L_AND_EXP_236
L_AND_EXP_236:
	# GT, INT(tmp_int_16430[temp]), INT(const_b[data+0x4]), INT(int_e[data+0x18])
	lw $20, 0x4($28)
	lw $23, 0x18($28)
	sgt $21, $20, $23
	# JUMP AND_END_237
	sw $23, 0x18($28)
	sw $20, 0x4($28)
	sw $21, -0x204($29)
AND_END_237:
	# JUMP OR_END_238
OR_END_238:
	# Branch INT(tmp_int_16430[sp-0x204]) ? IF_BODY_239 : IF_ELSE_241
	lw $22, -0x204($29)
	bne $22, $0, IF_BODY_239
	j IF_ELSE_241
IF_BODY_239:
	# JUMP B_242
B_242:
	# ASS, INT(int_d[data+0x14]), 3
	li $24, 3
	# JUMP B_243
	sw $24, 0x14($28)
B_243:
	# JUMP IF_END_240
	j IF_END_240
IF_ELSE_241:
	# JUMP B_244
B_244:
	# ASS, INT(int_d[data+0x14]), 4
	li $25, 4
	# JUMP B_245
	sw $25, 0x14($28)
B_245:
	# JUMP IF_END_240
IF_END_240:
	# DEF, INT(i[sp-0xc]), 5
	li $5, 5
	# ADD, INT(tmp_int_16431[temp]), INT(i[sp-0xc]), 3
	addiu $17, $5, 3
	# ASS, INT(int_c[data+0x10]), INT(tmp_int_16431[temp])
	move $27, $17
	# ASS, INT(i[sp-0xc]), 0
	li $5, 0
	# JUMP L_OR_EXP_249
	sw $27, 0x10($28)
L_OR_EXP_249:
	# JUMP L_AND_EXP_250
L_AND_EXP_250:
	# LT, INT(tmp_int_16432[temp]), INT(i[sp-0xc]), 100
	li $3, 100
	slt $26, $5, $3
	# JUMP AND_END_251
	sw $26, -0x208($29)
AND_END_251:
	# JUMP OR_END_252
OR_END_252:
	# Branch INT(tmp_int_16432[sp-0x208]) ? DO_BODY_246 : DO_END_248
	lw $18, -0x208($29)
	bne $18, $0, DO_BODY_246
	j DO_END_248
	# JUMP DO_BODY_246
DO_BODY_246:
	# JUMP B_253
B_253:
	# JUMP L_OR_EXP_254
	j L_OR_EXP_254
	# JUMP B_270
	j B_270
L_OR_EXP_254:
	# JUMP L_AND_EXP_255
L_AND_EXP_255:
	# EQ, INT(tmp_int_16433[temp]), INT(i[sp-0xc]), 0
	seq $19, $5, 0
	# JUMP AND_END_256
	sw $19, -0x20c($29)
AND_END_256:
	# ASS, INT(tmp_int_16434[temp]), INT(tmp_int_16433[sp-0x20c])
	lw $23, -0x20c($29)
	move $20, $23
	# Branch INT(tmp_int_16433[sp-0x20c]) ? OR_END_257 : OR_258
	sw $20, -0x210($29)
	sw $23, -0x20c($29)
	bne $23, $0, OR_END_257
OR_258:
	# JUMP L_AND_EXP_260
L_AND_EXP_260:
	# EQ, INT(tmp_int_16435[temp]), INT(i[sp-0xc]), 1
	seq $21, $5, 1
	# JUMP AND_END_261
	sw $21, -0x214($29)
AND_END_261:
	# OR, INT(tmp_int_16434[sp-0x210]), INT(tmp_int_16434[sp-0x210]), INT(tmp_int_16435[sp-0x214])
	lw $22, -0x210($29)
	lw $24, -0x214($29)
	or $22, $22, $24
	# Branch INT(tmp_int_16434[sp-0x210]) ? OR_END_257 : OR_259
	sw $22, -0x210($29)
	bne $22, $0, OR_END_257
OR_259:
	# JUMP OR_END_257
OR_END_257:
	# Branch INT(tmp_int_16434[sp-0x210]) ? IF_BODY_263 : IF_ELSE_265
	lw $25, -0x210($29)
	bne $25, $0, IF_BODY_263
	j IF_ELSE_265
IF_BODY_263:
	# JUMP B_266
B_266:
	# MUL, INT(tmp_int_16436[temp]), INT(i[sp-0xc]), 4
	sll $17, $5, 2
	# ADD, INT(tmp_int_16436[temp]), INT(tmp_int_16436[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16436[temp]))->POINTER(tmp_pointer_5026[temp])
	addiu $3, $28, 36
	addu $27, $3, $17
	# STORE POINTER(tmp_pointer_5026[temp]), 1
	li $3, 1
	sw $3, 0x0($27)
	# JUMP B_267
B_267:
	# JUMP IF_END_264
	j IF_END_264
IF_ELSE_265:
	# JUMP B_268
B_268:
	# MUL, INT(tmp_int_16437[temp]), INT(i[sp-0xc]), 4
	sll $26, $5, 2
	# ADD, INT(tmp_int_16437[temp]), INT(tmp_int_16437[temp]), 0
	addiu $26, $26, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_16437[temp]))->POINTER(tmp_pointer_5027[temp])
	addiu $3, $28, 36
	addu $18, $3, $26
	# STORE POINTER(tmp_pointer_5027[temp]), 0
	li $3, 0
	sw $3, 0x0($18)
	# JUMP B_269
B_269:
	# JUMP IF_END_264
IF_END_264:
	# ADD, INT(tmp_int_16438[temp]), INT(i[sp-0xc]), 1
	addiu $19, $5, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_16438[temp])
	move $5, $19
	# JUMP B_270
B_270:
	# JUMP DO_CHECK_247
DO_CHECK_247:
	# JUMP L_OR_EXP_271
L_OR_EXP_271:
	# JUMP L_AND_EXP_272
L_AND_EXP_272:
	# LT, INT(tmp_int_16439[temp]), INT(i[sp-0xc]), 100
	li $3, 100
	slt $20, $5, $3
	# JUMP AND_END_273
	sw $20, -0x218($29)
AND_END_273:
	# JUMP OR_END_274
OR_END_274:
	# Branch INT(tmp_int_16439[sp-0x218]) ? DO_BODY_246 : DO_END_248
	lw $23, -0x218($29)
	bne $23, $0, DO_BODY_246
	j DO_END_248
	# JUMP DO_END_248
DO_END_248:
	# ASS, INT(i[sp-0xc]), 5
	li $5, 5
	# JUMP B_275
B_275:
	# JUMP B_276
B_276:
	# JUMP L_OR_EXP_280
L_OR_EXP_280:
	# JUMP L_AND_EXP_281
L_AND_EXP_281:
	# LT, INT(tmp_int_16440[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $21, 0x10($28)
	slt $24, $5, $21
	# JUMP AND_END_282
	sw $21, 0x10($28)
	sw $24, -0x21c($29)
AND_END_282:
	# ASS, INT(tmp_int_16441[temp]), INT(tmp_int_16440[sp-0x21c])
	lw $22, -0x21c($29)
	move $25, $22
	# Branch INT(tmp_int_16440[sp-0x21c]) ? OR_END_283 : OR_284
	sw $25, -0x220($29)
	sw $22, -0x21c($29)
	bne $22, $0, OR_END_283
OR_284:
	# JUMP L_AND_EXP_286
L_AND_EXP_286:
	# GT, INT(tmp_int_16442[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $17, 0x10($28)
	sgt $27, $5, $17
	# JUMP AND_END_287
	sw $27, -0x224($29)
	sw $17, 0x10($28)
AND_END_287:
	# OR, INT(tmp_int_16441[sp-0x220]), INT(tmp_int_16441[sp-0x220]), INT(tmp_int_16442[sp-0x224])
	lw $26, -0x220($29)
	lw $18, -0x224($29)
	or $26, $26, $18
	# Branch INT(tmp_int_16441[sp-0x220]) ? OR_END_283 : OR_285
	sw $26, -0x220($29)
	bne $26, $0, OR_END_283
OR_285:
	# JUMP OR_END_283
OR_END_283:
	# Branch INT(tmp_int_16441[sp-0x220]) ? DO_BODY_277 : DO_END_279
	lw $19, -0x220($29)
	bne $19, $0, DO_BODY_277
	j DO_END_279
	# JUMP DO_BODY_277
DO_BODY_277:
	# JUMP B_289
B_289:
	# Call FUNC_factorial; Params: INT(i[sp-0xc]); RET INT(tmp_int_16443[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -552
	sw $5, -0x4($4)
	sw $5, -0xc($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 552
	lw $31, 0x0($29)
	move $20, $2
	lw $5, -0xc($29)
	# PRINT_INT INT(tmp_int_16443[temp])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ADD, INT(tmp_int_16444[temp]), INT(i[sp-0xc]), 1
	addiu $23, $5, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_16444[temp])
	move $5, $23
	# JUMP L_OR_EXP_290
	j L_OR_EXP_290
	# JUMP B_301
	j B_301
L_OR_EXP_290:
	# JUMP L_AND_EXP_291
L_AND_EXP_291:
	# EQ, INT(tmp_int_16445[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $21, 0x10($28)
	seq $24, $5, $21
	# JUMP AND_END_292
	sw $24, -0x228($29)
	sw $21, 0x10($28)
AND_END_292:
	# JUMP OR_END_293
OR_END_293:
	# Branch INT(tmp_int_16445[sp-0x228]) ? IF_BODY_294 : IF_ELSE_296
	lw $25, -0x228($29)
	bne $25, $0, IF_BODY_294
	j IF_ELSE_296
IF_BODY_294:
	# JUMP B_297
B_297:
	# JUMP DO_END_279
	j DO_END_279
	# JUMP B_298
B_298:
	# JUMP IF_END_295
	j IF_END_295
IF_ELSE_296:
	# JUMP B_299
B_299:
	# JUMP DO_CHECK_278
	j DO_CHECK_278
	# JUMP B_300
B_300:
	# JUMP IF_END_295
IF_END_295:
	# JUMP B_301
B_301:
	# JUMP DO_CHECK_278
DO_CHECK_278:
	# JUMP L_OR_EXP_302
L_OR_EXP_302:
	# JUMP L_AND_EXP_303
L_AND_EXP_303:
	# LT, INT(tmp_int_16446[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $22, 0x10($28)
	slt $27, $5, $22
	# JUMP AND_END_304
	sw $27, -0x22c($29)
	sw $22, 0x10($28)
AND_END_304:
	# ASS, INT(tmp_int_16447[temp]), INT(tmp_int_16446[sp-0x22c])
	lw $17, -0x22c($29)
	move $18, $17
	# Branch INT(tmp_int_16446[sp-0x22c]) ? OR_END_305 : OR_306
	sw $17, -0x22c($29)
	sw $18, -0x230($29)
	bne $17, $0, OR_END_305
OR_306:
	# JUMP L_AND_EXP_308
L_AND_EXP_308:
	# GT, INT(tmp_int_16448[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $26, 0x10($28)
	sgt $19, $5, $26
	# JUMP AND_END_309
	sw $26, 0x10($28)
	sw $19, -0x234($29)
AND_END_309:
	# OR, INT(tmp_int_16447[sp-0x230]), INT(tmp_int_16447[sp-0x230]), INT(tmp_int_16448[sp-0x234])
	lw $20, -0x230($29)
	lw $23, -0x234($29)
	or $20, $20, $23
	# Branch INT(tmp_int_16447[sp-0x230]) ? OR_END_305 : OR_307
	sw $20, -0x230($29)
	bne $20, $0, OR_END_305
OR_307:
	# JUMP OR_END_305
OR_END_305:
	# Branch INT(tmp_int_16447[sp-0x230]) ? DO_BODY_277 : DO_END_279
	lw $24, -0x230($29)
	bne $24, $0, DO_BODY_277
	j DO_END_279
	# JUMP DO_END_279
DO_END_279:
	# JUMP L_OR_EXP_311
L_OR_EXP_311:
	# JUMP L_AND_EXP_312
L_AND_EXP_312:
	# EQ, INT(tmp_int_16449[temp]), INT(i[sp-0xc]), INT(int_c[data+0x10])
	lw $21, 0x10($28)
	seq $25, $5, $21
	# JUMP AND_END_313
	sw $21, 0x10($28)
	sw $25, -0x238($29)
AND_END_313:
	# JUMP OR_END_314
OR_END_314:
	# Branch INT(tmp_int_16449[sp-0x238]) ? IF_BODY_315 : IF_END_316
	lw $27, -0x238($29)
	bne $27, $0, IF_BODY_315
	j IF_END_316
IF_BODY_315:
	# JUMP B_317
B_317:
	# JUMP INLINE_return_one_BEGIN_4
	j INLINE_return_one_BEGIN_4
	# JUMP B_319
	j B_319
INLINE_return_one_BEGIN_4:
	# ASS, INT(tmp_int_16450[temp]), 1
	li $22, 1
	# JUMP INLINE_return_one_END_4
	sw $22, -0x23c($29)
INLINE_return_one_END_4:
	# PRINT_INT INT(tmp_int_16450[sp-0x23c])
	li $2, 1
	lw $17, -0x23c($29)
	move $4, $17
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_319
B_319:
	# JUMP IF_END_316
IF_END_316:
	# ASS, INT(INLINE_a_5[sp-0x14]), 1
	li $5, 1
	# ASS, INT(INLINE_b_5[sp-0x18]), 1
	li $6, 1
	# JUMP INLINE_A_plus_B_BEGIN_5
INLINE_A_plus_B_BEGIN_5:
	# ADD, INT(tmp_int_16452[temp]), INT(INLINE_a_5[sp-0x14]), INT(INLINE_b_5[sp-0x18])
	addu $18, $5, $6
	# ASS, INT(tmp_int_16451[temp]), INT(tmp_int_16452[temp])
	move $26, $18
	# JUMP INLINE_A_plus_B_END_5
	sw $26, -0x240($29)
INLINE_A_plus_B_END_5:
	# PRINT_INT INT(tmp_int_16451[sp-0x240])
	li $2, 1
	lw $19, -0x240($29)
	move $4, $19
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ASS, INT(INLINE_a_6[sp-0x1c]), 2
	li $5, 2
	# ASS, INT(INLINE_b_6[sp-0x20]), 2
	li $6, 2
	# JUMP INLINE_output_a_plus_b_BEGIN_6
INLINE_output_a_plus_b_BEGIN_6:
	# ADD, INT(tmp_int_16453[temp]), INT(INLINE_a_6[sp-0x1c]), INT(INLINE_b_6[sp-0x20])
	addu $23, $5, $6
	# PRINT_INT INT(tmp_int_16453[temp])
	li $2, 1
	move $4, $23
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_321
B_321:
	# JUMP INLINE_output_a_plus_b_END_6
INLINE_output_a_plus_b_END_6:
	# GETINT INT(i[sp-0xc])
	li $2, 5
	syscall
	move $5, $2
	# PRINT_INT INT(i[sp-0xc])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ASS, INT(i[sp-0xc]), 0
	li $5, 0
	# JUMP L_OR_EXP_325
L_OR_EXP_325:
	# JUMP L_AND_EXP_326
L_AND_EXP_326:
	# LT, INT(tmp_int_16454[temp]), INT(i[sp-0xc]), 10
	li $3, 10
	slt $20, $5, $3
	# JUMP AND_END_327
	sw $20, -0x244($29)
AND_END_327:
	# JUMP OR_END_328
OR_END_328:
	# Branch INT(tmp_int_16454[sp-0x244]) ? DO_BODY_322 : DO_END_324
	lw $24, -0x244($29)
	bne $24, $0, DO_BODY_322
	j DO_END_324
	# JUMP DO_BODY_322
DO_BODY_322:
	# JUMP B_329
B_329:
	# ASS, INT(j[sp-0x10]), 0
	li $6, 0
	# JUMP L_OR_EXP_333
	j L_OR_EXP_333
	# JUMP B_343
	j B_343
L_OR_EXP_333:
	# JUMP L_AND_EXP_334
L_AND_EXP_334:
	# LT, INT(tmp_int_16455[temp]), INT(j[sp-0x10]), 10
	li $3, 10
	slt $21, $6, $3
	# JUMP AND_END_335
	sw $21, -0x248($29)
AND_END_335:
	# JUMP OR_END_336
OR_END_336:
	# Branch INT(tmp_int_16455[sp-0x248]) ? DO_BODY_330 : DO_END_332
	lw $25, -0x248($29)
	bne $25, $0, DO_BODY_330
	j DO_END_332
	# JUMP DO_BODY_330
DO_BODY_330:
	# JUMP B_337
B_337:
	# MUL, INT(tmp_int_16456[temp]), INT(j[sp-0x10]), 4
	sll $27, $6, 2
	# ADD, INT(tmp_int_16456[temp]), INT(tmp_int_16456[temp]), 0
	addiu $27, $27, 0
	# MUL, INT(tmp_int_16457[temp]), INT(i[sp-0xc]), 40
	sll $22, $5, 5
	sll $3, $5, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_16457[temp]), INT(tmp_int_16457[temp]), INT(tmp_int_16456[temp])
	addu $22, $22, $27
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_16457[temp]))->POINTER(tmp_pointer_5028[temp])
	addiu $3, $28, 436
	addu $17, $3, $22
	# ADD, INT(tmp_int_16458[temp]), INT(i[sp-0xc]), 1
	addiu $18, $5, 1
	# STORE POINTER(tmp_pointer_5028[temp]), INT(tmp_int_16458[temp])
	sw $18, 0x0($17)
	# MUL, INT(tmp_int_16459[temp]), INT(j[sp-0x10]), 4
	sll $26, $6, 2
	# ADD, INT(tmp_int_16459[temp]), INT(tmp_int_16459[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_16460[temp]), INT(i[sp-0xc]), 40
	sll $19, $5, 5
	sll $3, $5, 3
	addu $19, $19, $3
	# ADD, INT(tmp_int_16460[temp]), INT(tmp_int_16460[temp]), INT(tmp_int_16459[temp])
	addu $19, $19, $26
	# OFFSET (ARRAY(matrix_B[data+0x344])+INT(tmp_int_16460[temp]))->POINTER(tmp_pointer_5029[temp])
	addiu $3, $28, 836
	addu $23, $3, $19
	# ADD, INT(tmp_int_16461[temp]), INT(j[sp-0x10]), 1
	addiu $20, $6, 1
	# STORE POINTER(tmp_pointer_5029[temp]), INT(tmp_int_16461[temp])
	sw $20, 0x0($23)
	# ADD, INT(tmp_int_16462[temp]), INT(j[sp-0x10]), 1
	addiu $24, $6, 1
	# ASS, INT(j[sp-0x10]), INT(tmp_int_16462[temp])
	move $6, $24
	# JUMP B_338
B_338:
	# JUMP DO_CHECK_331
DO_CHECK_331:
	# JUMP L_OR_EXP_339
L_OR_EXP_339:
	# JUMP L_AND_EXP_340
L_AND_EXP_340:
	# LT, INT(tmp_int_16463[temp]), INT(j[sp-0x10]), 10
	li $3, 10
	slt $21, $6, $3
	# JUMP AND_END_341
	sw $21, -0x24c($29)
AND_END_341:
	# JUMP OR_END_342
OR_END_342:
	# Branch INT(tmp_int_16463[sp-0x24c]) ? DO_BODY_330 : DO_END_332
	lw $25, -0x24c($29)
	bne $25, $0, DO_BODY_330
	j DO_END_332
	# JUMP DO_END_332
DO_END_332:
	# ADD, INT(tmp_int_16464[temp]), INT(i[sp-0xc]), 1
	addiu $27, $5, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_16464[temp])
	move $5, $27
	# JUMP B_343
B_343:
	# JUMP DO_CHECK_323
DO_CHECK_323:
	# JUMP L_OR_EXP_344
L_OR_EXP_344:
	# JUMP L_AND_EXP_345
L_AND_EXP_345:
	# LT, INT(tmp_int_16465[temp]), INT(i[sp-0xc]), 10
	li $3, 10
	slt $22, $5, $3
	# JUMP AND_END_346
	sw $22, -0x250($29)
AND_END_346:
	# JUMP OR_END_347
OR_END_347:
	# Branch INT(tmp_int_16465[sp-0x250]) ? DO_BODY_322 : DO_END_324
	lw $17, -0x250($29)
	bne $17, $0, DO_BODY_322
	j DO_END_324
	# JUMP DO_END_324
DO_END_324:
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+0)->POINTER(tmp_pointer_5030[temp])
	addiu $18, $28, 436
	# OFFSET (ARRAY(matrix_B[data+0x344])+0)->POINTER(tmp_pointer_5031[temp])
	addiu $26, $28, 836
	# MUL, INT(tmp_int_16466[temp]), 1, 4
	li $19, 4
	# ADD, INT(tmp_int_16466[temp]), INT(tmp_int_16466[temp]), 0
	addiu $19, $19, 0
	# MUL, INT(tmp_int_16467[temp]), 1, 40
	li $23, 40
	# ADD, INT(tmp_int_16467[temp]), INT(tmp_int_16467[temp]), INT(tmp_int_16466[temp])
	addu $23, $23, $19
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_16467[temp]))->POINTER(tmp_pointer_5032[temp])
	addiu $3, $28, 436
	addu $20, $3, $23
	# LOAD POINTER(tmp_pointer_5032[temp]), INT(tmp_int_16468[temp])
	lw $24, 0x0($20)
	# ASS, ARRAY(INLINE_matrix_a_7[sp-0x24]), POINTER(tmp_pointer_5030[temp])
	move $9, $18
	# OFFSET (INT(tmp_int_16469[temp])+36)->POINTER(tmp_pointer_5033[temp])
	addiu $21, $29, -36
	# STORE POINTER(tmp_pointer_5033[temp]), POINTER(tmp_pointer_5030[temp])
	sw $18, 0x0($21)
	# ASS, ARRAY(INLINE_matrix_b_7[sp-0x28]), POINTER(tmp_pointer_5031[temp])
	move $8, $26
	# OFFSET (INT(tmp_int_16470[temp])+40)->POINTER(tmp_pointer_5034[temp])
	addiu $25, $29, -40
	# STORE POINTER(tmp_pointer_5034[temp]), POINTER(tmp_pointer_5031[temp])
	sw $26, 0x0($25)
	# JUMP INLINE_matrixMulti_BEGIN_7
	sw $24, -0x254($29)
INLINE_matrixMulti_BEGIN_7:
	# DEF, INT(INLINE_i_7[sp-0x1c0]), 0
	li $7, 0
	# JUMP L_OR_EXP_351
L_OR_EXP_351:
	# JUMP L_AND_EXP_352
L_AND_EXP_352:
	# LT, INT(tmp_int_16472[temp]), INT(INLINE_i_7[sp-0x1c0]), 10
	li $3, 10
	slt $27, $7, $3
	# JUMP AND_END_353
	sw $27, -0x258($29)
AND_END_353:
	# JUMP OR_END_354
OR_END_354:
	# Branch INT(tmp_int_16472[sp-0x258]) ? DO_BODY_348 : DO_END_350
	lw $22, -0x258($29)
	bne $22, $0, DO_BODY_348
	j DO_END_350
	# JUMP DO_BODY_348
DO_BODY_348:
	# JUMP B_355
B_355:
	# ASS, INT(INLINE_j_7[sp-0x1c4]), 0
	li $6, 0
	# JUMP L_OR_EXP_359
	j L_OR_EXP_359
	# JUMP B_382
	j B_382
L_OR_EXP_359:
	# JUMP L_AND_EXP_360
L_AND_EXP_360:
	# LT, INT(tmp_int_16473[temp]), INT(INLINE_j_7[sp-0x1c4]), 10
	li $3, 10
	slt $17, $6, $3
	# JUMP AND_END_361
	sw $17, -0x25c($29)
AND_END_361:
	# JUMP OR_END_362
OR_END_362:
	# Branch INT(tmp_int_16473[sp-0x25c]) ? DO_BODY_356 : DO_END_358
	lw $19, -0x25c($29)
	bne $19, $0, DO_BODY_356
	j DO_END_358
	# JUMP DO_BODY_356
DO_BODY_356:
	# JUMP B_363
B_363:
	# ASS, INT(INLINE_k_7[sp-0x1c8]), 0
	li $5, 0
	# MUL, INT(tmp_int_16474[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $23, $6, 2
	# ADD, INT(tmp_int_16474[temp]), INT(tmp_int_16474[temp]), 0
	addiu $23, $23, 0
	# MUL, INT(tmp_int_16475[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $20, $7, 5
	sll $3, $7, 3
	addu $20, $20, $3
	# ADD, INT(tmp_int_16475[temp]), INT(tmp_int_16475[temp]), INT(tmp_int_16474[temp])
	addu $20, $20, $23
	# OFFSET (ARRAY(INLINE_matrix_c_7[sp-0x1bc])+INT(tmp_int_16475[temp]))->POINTER(tmp_pointer_5035[temp])
	addiu $3, $29, -444
	addu $21, $3, $20
	# STORE POINTER(tmp_pointer_5035[temp]), 0
	li $3, 0
	sw $3, 0x0($21)
	# JUMP L_OR_EXP_367
	j L_OR_EXP_367
	# JUMP B_377
	j B_377
L_OR_EXP_367:
	# JUMP L_AND_EXP_368
L_AND_EXP_368:
	# LT, INT(tmp_int_16476[temp]), INT(INLINE_k_7[sp-0x1c8]), 10
	li $3, 10
	slt $18, $5, $3
	# JUMP AND_END_369
	sw $18, -0x260($29)
AND_END_369:
	# JUMP OR_END_370
OR_END_370:
	# Branch INT(tmp_int_16476[sp-0x260]) ? DO_BODY_364 : DO_END_366
	lw $25, -0x260($29)
	bne $25, $0, DO_BODY_364
	j DO_END_366
	# JUMP DO_BODY_364
DO_BODY_364:
	# JUMP B_371
B_371:
	# MUL, INT(tmp_int_16477[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $26, $6, 2
	# ADD, INT(tmp_int_16477[temp]), INT(tmp_int_16477[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_16478[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $24, $7, 5
	sll $3, $7, 3
	addu $24, $24, $3
	# ADD, INT(tmp_int_16478[temp]), INT(tmp_int_16478[temp]), INT(tmp_int_16477[temp])
	addu $24, $24, $26
	# OFFSET (ARRAY(INLINE_matrix_c_7[sp-0x1bc])+INT(tmp_int_16478[temp]))->POINTER(tmp_pointer_5036[temp])
	addiu $3, $29, -444
	addu $27, $3, $24
	# MUL, INT(tmp_int_16479[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $22, $6, 2
	# ADD, INT(tmp_int_16479[temp]), INT(tmp_int_16479[temp]), 0
	addiu $22, $22, 0
	# MUL, INT(tmp_int_16480[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $17, $7, 5
	sll $3, $7, 3
	addu $17, $17, $3
	# ADD, INT(tmp_int_16480[temp]), INT(tmp_int_16480[temp]), INT(tmp_int_16479[temp])
	addu $17, $17, $22
	# OFFSET (ARRAY(INLINE_matrix_c_7[sp-0x1bc])+INT(tmp_int_16480[temp]))->POINTER(tmp_pointer_5037[temp])
	addiu $3, $29, -444
	addu $19, $3, $17
	# LOAD POINTER(tmp_pointer_5037[temp]), INT(tmp_int_16481[temp])
	lw $23, 0x0($19)
	# MUL, INT(tmp_int_16482[temp]), INT(INLINE_k_7[sp-0x1c8]), 4
	sll $20, $5, 2
	# ADD, INT(tmp_int_16482[temp]), INT(tmp_int_16482[temp]), 0
	addiu $20, $20, 0
	# MUL, INT(tmp_int_16483[temp]), INT(INLINE_i_7[sp-0x1c0]), 40
	sll $21, $7, 5
	sll $3, $7, 3
	addu $21, $21, $3
	# ADD, INT(tmp_int_16483[temp]), INT(tmp_int_16483[temp]), INT(tmp_int_16482[temp])
	addu $21, $21, $20
	# OFFSET (ARRAY(INLINE_matrix_a_7[sp-0x24])+INT(tmp_int_16483[temp]))->POINTER(tmp_pointer_5038[temp])
	addu $18, $9, $21
	# LOAD POINTER(tmp_pointer_5038[temp]), INT(tmp_int_16484[temp])
	lw $25, 0x0($18)
	# MUL, INT(tmp_int_16485[temp]), INT(INLINE_j_7[sp-0x1c4]), 4
	sll $26, $6, 2
	# ADD, INT(tmp_int_16485[temp]), INT(tmp_int_16485[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_16486[temp]), INT(INLINE_k_7[sp-0x1c8]), 40
	sll $24, $5, 5
	sll $3, $5, 3
	addu $24, $24, $3
	# ADD, INT(tmp_int_16486[temp]), INT(tmp_int_16486[temp]), INT(tmp_int_16485[temp])
	addu $24, $24, $26
	# OFFSET (ARRAY(INLINE_matrix_b_7[sp-0x28])+INT(tmp_int_16486[temp]))->POINTER(tmp_pointer_5039[temp])
	addu $22, $8, $24
	# LOAD POINTER(tmp_pointer_5039[temp]), INT(tmp_int_16487[temp])
	lw $17, 0x0($22)
	# MUL, INT(tmp_int_16488[temp]), INT(tmp_int_16484[temp]), INT(tmp_int_16487[temp])
	mult $25, $17
	mflo $19
	# ADD, INT(tmp_int_16489[temp]), INT(tmp_int_16481[temp]), INT(tmp_int_16488[temp])
	addu $20, $23, $19
	# STORE POINTER(tmp_pointer_5036[temp]), INT(tmp_int_16489[temp])
	sw $20, 0x0($27)
	# ADD, INT(tmp_int_16490[temp]), INT(INLINE_k_7[sp-0x1c8]), 1
	addiu $18, $5, 1
	# ASS, INT(INLINE_k_7[sp-0x1c8]), INT(tmp_int_16490[temp])
	move $5, $18
	# JUMP B_372
	sw $24, -0x264($29)
	sw $21, -0x268($29)
B_372:
	# JUMP DO_CHECK_365
DO_CHECK_365:
	# JUMP L_OR_EXP_373
L_OR_EXP_373:
	# JUMP L_AND_EXP_374
L_AND_EXP_374:
	# LT, INT(tmp_int_16491[temp]), INT(INLINE_k_7[sp-0x1c8]), 10
	li $3, 10
	slt $26, $5, $3
	# JUMP AND_END_375
	sw $26, -0x26c($29)
AND_END_375:
	# JUMP OR_END_376
OR_END_376:
	# Branch INT(tmp_int_16491[sp-0x26c]) ? DO_BODY_364 : DO_END_366
	lw $22, -0x26c($29)
	bne $22, $0, DO_BODY_364
	j DO_END_366
	# JUMP DO_END_366
DO_END_366:
	# ADD, INT(tmp_int_16492[temp]), INT(INLINE_j_7[sp-0x1c4]), 1
	addiu $25, $6, 1
	# ASS, INT(INLINE_j_7[sp-0x1c4]), INT(tmp_int_16492[temp])
	move $6, $25
	# JUMP B_377
B_377:
	# JUMP DO_CHECK_357
DO_CHECK_357:
	# JUMP L_OR_EXP_378
L_OR_EXP_378:
	# JUMP L_AND_EXP_379
L_AND_EXP_379:
	# LT, INT(tmp_int_16493[temp]), INT(INLINE_j_7[sp-0x1c4]), 10
	li $3, 10
	slt $17, $6, $3
	# JUMP AND_END_380
	sw $17, -0x270($29)
AND_END_380:
	# JUMP OR_END_381
OR_END_381:
	# Branch INT(tmp_int_16493[sp-0x270]) ? DO_BODY_356 : DO_END_358
	lw $23, -0x270($29)
	bne $23, $0, DO_BODY_356
	j DO_END_358
	# JUMP DO_END_358
DO_END_358:
	# ADD, INT(tmp_int_16494[temp]), INT(INLINE_i_7[sp-0x1c0]), 1
	addiu $19, $7, 1
	# ASS, INT(INLINE_i_7[sp-0x1c0]), INT(tmp_int_16494[temp])
	move $7, $19
	# JUMP B_382
B_382:
	# JUMP DO_CHECK_349
DO_CHECK_349:
	# JUMP L_OR_EXP_383
L_OR_EXP_383:
	# JUMP L_AND_EXP_384
L_AND_EXP_384:
	# LT, INT(tmp_int_16495[temp]), INT(INLINE_i_7[sp-0x1c0]), 10
	li $3, 10
	slt $27, $7, $3
	# JUMP AND_END_385
	sw $27, -0x274($29)
AND_END_385:
	# JUMP OR_END_386
OR_END_386:
	# Branch INT(tmp_int_16495[sp-0x274]) ? DO_BODY_348 : DO_END_350
	lw $20, -0x274($29)
	bne $20, $0, DO_BODY_348
	j DO_END_350
	# JUMP DO_END_350
DO_END_350:
	# OFFSET (ARRAY(INLINE_matrix_c_7[sp-0x1bc])+0)->POINTER(tmp_pointer_5040[temp])
	addiu $18, $29, -444
	# ASS, ARRAY(INLINE_array_f_8[sp-0x1cc]), POINTER(tmp_pointer_5040[temp])
	move $5, $18
	# OFFSET (INT(tmp_int_16496[temp])+460)->POINTER(tmp_pointer_5041[temp])
	addiu $24, $29, -460
	# STORE POINTER(tmp_pointer_5041[temp]), POINTER(tmp_pointer_5040[temp])
	sw $18, 0x0($24)
	# JUMP INLINE_sumMatrix_BEGIN_8
INLINE_sumMatrix_BEGIN_8:
	# DEF, INT(INLINE_i_8[sp-0x1d0]), 0
	li $6, 0
	# DEF, INT(INLINE_sum_8[sp-0x1d8]), 0
	li $8, 0
	# JUMP L_OR_EXP_390
L_OR_EXP_390:
	# JUMP L_AND_EXP_391
L_AND_EXP_391:
	# LT, INT(tmp_int_16498[temp]), INT(INLINE_i_8[sp-0x1d0]), 10
	li $3, 10
	slt $21, $6, $3
	# JUMP AND_END_392
	sw $21, -0x278($29)
AND_END_392:
	# JUMP OR_END_393
OR_END_393:
	# Branch INT(tmp_int_16498[sp-0x278]) ? DO_BODY_387 : DO_END_389
	lw $26, -0x278($29)
	bne $26, $0, DO_BODY_387
	j DO_END_389
	# JUMP DO_BODY_387
DO_BODY_387:
	# JUMP B_394
B_394:
	# ASS, INT(INLINE_j_8[sp-0x1d4]), 0
	li $7, 0
	# JUMP L_OR_EXP_398
	j L_OR_EXP_398
	# JUMP B_408
	j B_408
L_OR_EXP_398:
	# JUMP L_AND_EXP_399
L_AND_EXP_399:
	# LT, INT(tmp_int_16499[temp]), INT(INLINE_j_8[sp-0x1d4]), 10
	li $3, 10
	slt $22, $7, $3
	# JUMP AND_END_400
	sw $22, -0x27c($29)
AND_END_400:
	# JUMP OR_END_401
OR_END_401:
	# Branch INT(tmp_int_16499[sp-0x27c]) ? DO_BODY_395 : DO_END_397
	lw $25, -0x27c($29)
	bne $25, $0, DO_BODY_395
	j DO_END_397
	# JUMP DO_BODY_395
DO_BODY_395:
	# JUMP B_402
B_402:
	# MUL, INT(tmp_int_16500[temp]), INT(INLINE_j_8[sp-0x1d4]), 4
	sll $17, $7, 2
	# ADD, INT(tmp_int_16500[temp]), INT(tmp_int_16500[temp]), 0
	addiu $17, $17, 0
	# MUL, INT(tmp_int_16501[temp]), INT(INLINE_i_8[sp-0x1d0]), 40
	sll $23, $6, 5
	sll $3, $6, 3
	addu $23, $23, $3
	# ADD, INT(tmp_int_16501[temp]), INT(tmp_int_16501[temp]), INT(tmp_int_16500[temp])
	addu $23, $23, $17
	# OFFSET (ARRAY(INLINE_array_f_8[sp-0x1cc])+INT(tmp_int_16501[temp]))->POINTER(tmp_pointer_5042[temp])
	addu $19, $5, $23
	# LOAD POINTER(tmp_pointer_5042[temp]), INT(tmp_int_16502[temp])
	lw $27, 0x0($19)
	# ADD, INT(tmp_int_16503[temp]), INT(INLINE_sum_8[sp-0x1d8]), INT(tmp_int_16502[temp])
	addu $20, $8, $27
	# ASS, INT(INLINE_sum_8[sp-0x1d8]), INT(tmp_int_16503[temp])
	move $8, $20
	# ADD, INT(tmp_int_16504[temp]), INT(INLINE_j_8[sp-0x1d4]), 1
	addiu $24, $7, 1
	# ASS, INT(INLINE_j_8[sp-0x1d4]), INT(tmp_int_16504[temp])
	move $7, $24
	# JUMP B_403
	sw $23, -0x280($29)
B_403:
	# JUMP DO_CHECK_396
DO_CHECK_396:
	# JUMP L_OR_EXP_404
L_OR_EXP_404:
	# JUMP L_AND_EXP_405
L_AND_EXP_405:
	# LT, INT(tmp_int_16505[temp]), INT(INLINE_j_8[sp-0x1d4]), 10
	li $3, 10
	slt $18, $7, $3
	# JUMP AND_END_406
	sw $18, -0x284($29)
AND_END_406:
	# JUMP OR_END_407
OR_END_407:
	# Branch INT(tmp_int_16505[sp-0x284]) ? DO_BODY_395 : DO_END_397
	lw $21, -0x284($29)
	bne $21, $0, DO_BODY_395
	j DO_END_397
	# JUMP DO_END_397
DO_END_397:
	# ADD, INT(tmp_int_16506[temp]), INT(INLINE_i_8[sp-0x1d0]), 1
	addiu $26, $6, 1
	# ASS, INT(INLINE_i_8[sp-0x1d0]), INT(tmp_int_16506[temp])
	move $6, $26
	# JUMP B_408
B_408:
	# JUMP DO_CHECK_388
DO_CHECK_388:
	# JUMP L_OR_EXP_409
L_OR_EXP_409:
	# JUMP L_AND_EXP_410
L_AND_EXP_410:
	# LT, INT(tmp_int_16507[temp]), INT(INLINE_i_8[sp-0x1d0]), 10
	li $3, 10
	slt $22, $6, $3
	# JUMP AND_END_411
	sw $22, -0x288($29)
AND_END_411:
	# JUMP OR_END_412
OR_END_412:
	# Branch INT(tmp_int_16507[sp-0x288]) ? DO_BODY_387 : DO_END_389
	lw $25, -0x288($29)
	bne $25, $0, DO_BODY_387
	j DO_END_389
	# JUMP DO_END_389
DO_END_389:
	# ASS, INT(tmp_int_16497[temp]), INT(INLINE_sum_8[sp-0x1d8])
	move $17, $8
	# JUMP INLINE_sumMatrix_END_8
	sw $17, -0x28c($29)
INLINE_sumMatrix_END_8:
	# ASS, INT(tmp_int_16471[temp]), INT(tmp_int_16497[sp-0x28c])
	lw $19, -0x28c($29)
	move $27, $19
	# JUMP INLINE_matrixMulti_END_7
	sw $27, -0x290($29)
INLINE_matrixMulti_END_7:
	# PRINT_INT INT(tmp_int_16471[sp-0x290])
	li $2, 1
	lw $20, -0x290($29)
	move $4, $20
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
