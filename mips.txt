# Yuelin's Compiler
	
.data
	global:
	1 2 3 4 0 60 777
	.space 4
	STR_1: .asciiz "20231055\n"
	STR_2: .asciiz "a>1\n"
	STR_3: .asciiz "d!=1\n"
	STR_4: .asciiz "error\n"
	STR_5: .asciiz "\n"
.text
	la $gp, global
	j FUNC_main
FUNC_op1:
	lw $5, -0x4($29)
	# ADD, INT(tmp_int_0[temp]), INT(a1[data+0x0]), INT(b2[sp-0x4])
	lw $17, 0x0($28)
	addu $18, $17, $5
	# RETURN INT(tmp_int_0[temp])
	move $2, $18
	sw $17, 0x0($28)
	jr $ra
	
FUNC_op2:
	# RETURN 1
	li $2, 1
	jr $ra
	
FUNC_op3:
	# ASS, INT(test[data+0x18]), 666
	li $17, 666
	# RETURN VOID
	sw $17, 0x18($28)
	jr $ra
	
FUNC_op4:
	lw $6, -0x4($29)
	lw $5, -0x8($29)
	# ADD, INT(tmp_int_1[temp]), INT(a3[sp-0x4]), INT(b3[sp-0x8])
	addu $17, $6, $5
	# RETURN INT(tmp_int_1[temp])
	move $2, $17
	jr $ra
	
FUNC_main:
	# DEF, INT(a[sp-0x4]), 2
	li $8, 2
	# DEF, INT(b[sp-0x8]), 3
	li $5, 3
	# DEF, INT(e[sp-0x14]), 6
	li $6, 6
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# GETINT INT(d[sp-0x10])
	li $2, 5
	syscall
	move $7, $2
	# JUMP L_OR_EXP_4
L_OR_EXP_4:
	# JUMP L_AND_EXP_5
L_AND_EXP_5:
	# GT, INT(tmp_int_2[temp]), INT(a[sp-0x4]), 1
	sgt $17, $8, 1
	# JUMP AND_END_6
	sw $17, -0x24($29)
AND_END_6:
	# JUMP OR_END_7
OR_END_7:
	# Branch INT(tmp_int_2[sp-0x24]) ? IF_BODY_8 : IF_END_9
	lw $18, -0x24($29)
	bne $18, $0, IF_BODY_8
	j IF_END_9
IF_BODY_8:
	# JUMP B_10
B_10:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_11
B_11:
	# JUMP IF_END_9
IF_END_9:
	# JUMP L_OR_EXP_12
L_OR_EXP_12:
	# JUMP L_AND_EXP_13
L_AND_EXP_13:
	# NEQ, INT(tmp_int_3[temp]), INT(d[sp-0x10]), 1
	sne $19, $7, 1
	# JUMP AND_END_14
	sw $19, -0x28($29)
AND_END_14:
	# JUMP OR_END_15
OR_END_15:
	# Branch INT(tmp_int_3[sp-0x28]) ? IF_BODY_16 : IF_ELSE_18
	lw $20, -0x28($29)
	bne $20, $0, IF_BODY_16
	j IF_ELSE_18
IF_BODY_16:
	# JUMP B_19
B_19:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_20
B_20:
	# JUMP IF_END_17
	j IF_END_17
IF_ELSE_18:
	# JUMP B_21
B_21:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP B_22
B_22:
	# JUMP IF_END_17
IF_END_17:
	# JUMP L_OR_EXP_26
L_OR_EXP_26:
	# JUMP L_AND_EXP_27
L_AND_EXP_27:
	# GT, INT(tmp_int_4[temp]), INT(e[sp-0x14]), 0
	sgt $21, $6, 0
	# JUMP AND_END_28
	sw $21, -0x2c($29)
AND_END_28:
	# JUMP OR_END_29
OR_END_29:
	# Branch INT(tmp_int_4[sp-0x2c]) ? DO_BODY_23 : DO_END_25
	lw $22, -0x2c($29)
	bne $22, $0, DO_BODY_23
	j DO_END_25
	# JUMP DO_BODY_23
DO_BODY_23:
	# JUMP B_30
B_30:
	# JUMP L_OR_EXP_31
	j L_OR_EXP_31
	# JUMP B_47
	j B_47
L_OR_EXP_31:
	# JUMP L_AND_EXP_32
L_AND_EXP_32:
	# EQ, INT(tmp_int_5[temp]), INT(e[sp-0x14]), 4
	seq $23, $6, 4
	# JUMP AND_END_33
	sw $23, -0x30($29)
AND_END_33:
	# JUMP OR_END_34
OR_END_34:
	# Branch INT(tmp_int_5[sp-0x30]) ? IF_BODY_35 : IF_END_36
	lw $24, -0x30($29)
	bne $24, $0, IF_BODY_35
	j IF_END_36
IF_BODY_35:
	# JUMP B_37
B_37:
	# JUMP DO_END_25
	j DO_END_25
	# JUMP B_38
B_38:
	# JUMP IF_END_36
IF_END_36:
	# JUMP L_OR_EXP_39
L_OR_EXP_39:
	# JUMP L_AND_EXP_40
L_AND_EXP_40:
	# NEQ, INT(tmp_int_6[temp]), INT(e[sp-0x14]), 6
	sne $25, $6, 6
	# JUMP AND_END_41
	sw $25, -0x34($29)
AND_END_41:
	# JUMP OR_END_42
OR_END_42:
	# Branch INT(tmp_int_6[sp-0x34]) ? IF_BODY_43 : IF_END_44
	lw $26, -0x34($29)
	bne $26, $0, IF_BODY_43
	j IF_END_44
IF_BODY_43:
	# JUMP B_45
B_45:
	# SUB, INT(tmp_int_7[temp]), INT(e[sp-0x14]), 1
	addiu $27, $6, -1
	# ASS, INT(e[sp-0x14]), INT(tmp_int_7[temp])
	move $6, $27
	# JUMP DO_CHECK_24
	j DO_CHECK_24
	# JUMP B_46
B_46:
	# JUMP IF_END_44
IF_END_44:
	# PRINT_INT INT(e[sp-0x14])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# SUB, INT(tmp_int_8[temp]), INT(e[sp-0x14]), 1
	addiu $17, $6, -1
	# ASS, INT(e[sp-0x14]), INT(tmp_int_8[temp])
	move $6, $17
	# JUMP B_47
B_47:
	# JUMP DO_CHECK_24
DO_CHECK_24:
	# JUMP L_OR_EXP_48
L_OR_EXP_48:
	# JUMP L_AND_EXP_49
L_AND_EXP_49:
	# GT, INT(tmp_int_9[temp]), INT(e[sp-0x14]), 0
	sgt $18, $6, 0
	# JUMP AND_END_50
	sw $18, -0x38($29)
AND_END_50:
	# JUMP OR_END_51
OR_END_51:
	# Branch INT(tmp_int_9[sp-0x38]) ? DO_BODY_23 : DO_END_25
	lw $19, -0x38($29)
	bne $19, $0, DO_BODY_23
	j DO_END_25
	# JUMP DO_END_25
DO_END_25:
	# ASS, INT(INLINE_a3_1[sp-0x18]), INT(a[sp-0x4])
	move $7, $8
	# ASS, INT(INLINE_b3_1[sp-0x1c]), INT(b[sp-0x8])
	move $5, $5
	# JUMP INLINE_op4_BEGIN_1
INLINE_op4_BEGIN_1:
	# ADD, INT(tmp_int_11[temp]), INT(INLINE_a3_1[sp-0x18]), INT(INLINE_b3_1[sp-0x1c])
	addu $20, $7, $5
	# ASS, INT(tmp_int_10[temp]), INT(tmp_int_11[temp])
	move $21, $20
	# JUMP INLINE_op4_END_1
	sw $21, -0x3c($29)
INLINE_op4_END_1:
	# ASS, INT(c[sp-0xc]), INT(tmp_int_10[sp-0x3c])
	lw $22, -0x3c($29)
	move $5, $22
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# ASS, INT(INLINE_b2_2[sp-0x20]), INT(e[sp-0x14])
	move $5, $6
	# JUMP INLINE_op1_BEGIN_2
INLINE_op1_BEGIN_2:
	# ADD, INT(tmp_int_13[temp]), INT(a1[data+0x0]), INT(INLINE_b2_2[sp-0x20])
	lw $23, 0x0($28)
	addu $24, $23, $5
	# ASS, INT(tmp_int_12[temp]), INT(tmp_int_13[temp])
	move $25, $24
	# JUMP INLINE_op1_END_2
	sw $23, 0x0($28)
	sw $25, -0x40($29)
INLINE_op1_END_2:
	# ASS, INT(c[sp-0xc]), INT(tmp_int_12[sp-0x40])
	lw $26, -0x40($29)
	move $5, $26
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# JUMP INLINE_op3_BEGIN_3
INLINE_op3_BEGIN_3:
	# ASS, INT(test[data+0x18]), 666
	li $27, 666
	# JUMP B_54
	sw $27, 0x18($28)
B_54:
	# JUMP INLINE_op3_END_3
INLINE_op3_END_3:
	# PRINT_INT INT(test[data+0x18])
	li $2, 1
	lw $17, 0x18($28)
	move $4, $17
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# JUMP INLINE_op2_BEGIN_4
	sw $17, 0x18($28)
INLINE_op2_BEGIN_4:
	# ASS, INT(tmp_int_14[temp]), 1
	li $18, 1
	# JUMP INLINE_op2_END_4
	sw $18, -0x44($29)
INLINE_op2_END_4:
	# ASS, INT(c[sp-0xc]), INT(tmp_int_14[sp-0x44])
	lw $19, -0x44($29)
	move $5, $19
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# MUL, INT(tmp_int_16[temp]), 5, 2
	li $20, 10
	# ADD, INT(tmp_int_15[temp]), 6, INT(tmp_int_16[temp])
	addiu $21, $20, 6
	# ASS, INT(c[sp-0xc]), INT(tmp_int_15[temp])
	move $5, $21
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# DIV, INT(tmp_int_18[temp]), 8, 2
	li $22, 4
	# SUB, INT(tmp_int_17[temp]), 5, INT(tmp_int_18[temp])
	subu $3, $0, $22
	addiu $24, $3, 5
	# ASS, INT(c[sp-0xc]), INT(tmp_int_17[temp])
	move $5, $24
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
