# Yuelin's Compiler

.data
	global:
	10 0 1 2 3 4 5 6 7 8 9
	.space 4
	STR_1: .asciiz ", "
	STR_2: .asciiz "\n"

.text
	la $gp, global
	j FUNC_main
FUNC_fib:
	lw $5, -0x4($29)
	# BRANCH(beq) INT(i[sp-0x4]) 1 ? IF_BODY_0 : IF_END_2
	bne $5, 1, IF_END_2
IF_BODY_0:
	# JUMP B_3
B_3:
	# RETURN 1
	li $2, 1
	jr $ra
	# JUMP B_4
B_4:
	# JUMP IF_END_2
IF_END_2:
	# BRANCH(beq) INT(i[sp-0x4]) 2 ? IF_BODY_5 : IF_END_7
	bne $5, 2, IF_END_7
IF_BODY_5:
	# JUMP B_8
B_8:
	# RETURN 2
	li $2, 2
	jr $ra
	# JUMP B_9
B_9:
	# JUMP IF_END_7
IF_END_7:
	# SUB, INT(ti_2[temp]), INT(i[sp-0x4]), 1
	addiu $17, $5, -1
	# Call FUNC_fib; Params: INT(ti_2[temp]); RET INT(ti_3[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -12
	sw $17, -0x4($4)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 12
	lw $31, 0x0($29)
	move $18, $2
	lw $5, -0x4($29)
	# SUB, INT(ti_4[temp]), INT(i[sp-0x4]), 2
	addiu $19, $5, -2
	# Call FUNC_fib; Params: INT(ti_4[temp]); RET INT(ti_5[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -16
	sw $19, -0x4($4)
	sw $18, -0x8($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 16
	lw $31, 0x0($29)
	move $20, $2
	# ADD, INT(ti_6[temp]), INT(ti_3[sp-0x8]), INT(ti_5[temp])
	lw $21, -0x8($29)
	addu $22, $21, $20
	# RETURN INT(ti_6[temp])
	move $2, $22
	jr $ra
	
FUNC_main:
	# DEF, INT(i[sp-0x4]), 2
	li $6, 2
	# DEF, INT(j[sp-0x8]), 5
	li $5, 5
	# GETINT INT(i[sp-0x4])
	li $2, 5
	syscall
	move $6, $2
	# GETINT INT(j[sp-0x8])
	li $2, 5
	syscall
	move $5, $2
	# MUL, INT(ti_7[temp]), INT(i[sp-0x4]), INT(j[sp-0x8])
	mult $6, $5
	mflo $17
	# NEG, INT(ti_8[temp]), INT(ti_7[temp])
	subu $18, $0, $17
	# Call FUNC_fib; Params: 4; RET INT(ti_9[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -28
	li $3, 4
	sw $3, -0x4($4)
	sw $18, -0x18($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 28
	lw $31, 0x0($29)
	move $19, $2
	# MUL, INT(ti_10[temp]), INT(ti_8[sp-0x18]), INT(ti_9[temp])
	lw $20, -0x18($29)
	mult $20, $19
	mflo $21
	# LOAD INT(ti_13[temp]), 4[ARRAY(a[data+0x4])]
	lw $22, 0x8($28)
	# ADD, INT(ti_12[temp]), INT(ti_10[temp]), INT(ti_13[temp])
	addu $23, $21, $22
	# MUL, INT(i[sp-0x4]), INT(ti_12[temp]), 5
	sll $30, $23, 2
	addu $6, $30, $23
	# Call FUNC_fib; Params: 5; RET INT(ti_17[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -28
	li $3, 5
	sw $3, -0x4($4)
	sw $6, -0x4($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 28
	lw $31, 0x0($29)
	move $24, $2
	lw $6, -0x4($29)
	# ADD, INT(ti_18[temp]), INT(ti_17[temp]), 2
	addiu $25, $24, 2
	# Call FUNC_fib; Params: INT(ti_18[temp]); RET INT(ti_19[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -32
	sw $25, -0x4($4)
	sw $6, -0x4($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 32
	lw $31, 0x0($29)
	move $26, $2
	lw $6, -0x4($29)
	# SUB, INT(ti_20[temp]), 1197, INT(ti_19[temp])
	subu $3, $0, $26
	addiu $27, $3, 1197
	# ADD, INT(j[sp-0x8]), INT(ti_20[temp]), -10091
	addiu $5, $27, -10091
	# BRANCH(ble) INT(i[sp-0x4]) 100 ? DO_BODY_11 : DO_END_13
	bgt $6, 100, DO_END_13
DO_BODY_11:
	# JUMP B_14
B_14:
	# LOAD INT(ti_23[temp]), 0[ARRAY(a[data+0x4])]
	lw $17, 0x4($28)
	# ADD, INT(ti_25[temp]), INT(ti_23[temp]), 36
	addiu $18, $17, 36
	# STORE INT(ti_25[temp]), 0[ARRAY(a[data+0x4])]
	sw $18, 0x4($28)
	# LOAD INT(ti_26[temp]), 4[ARRAY(a[data+0x4])]
	lw $20, 0x8($28)
	# ADD, INT(ti_28[temp]), INT(ti_26[temp]), 36
	addiu $19, $20, 36
	# STORE INT(ti_28[temp]), 4[ARRAY(a[data+0x4])]
	sw $19, 0x8($28)
	# LOAD INT(ti_29[temp]), 8[ARRAY(a[data+0x4])]
	lw $21, 0xc($28)
	# ADD, INT(ti_31[temp]), INT(ti_29[temp]), 36
	addiu $22, $21, 36
	# STORE INT(ti_31[temp]), 8[ARRAY(a[data+0x4])]
	sw $22, 0xc($28)
	# LOAD INT(ti_32[temp]), 12[ARRAY(a[data+0x4])]
	lw $23, 0x10($28)
	# ADD, INT(ti_34[temp]), INT(ti_32[temp]), 36
	addiu $24, $23, 36
	# STORE INT(ti_34[temp]), 12[ARRAY(a[data+0x4])]
	sw $24, 0x10($28)
	# LOAD INT(ti_35[temp]), 16[ARRAY(a[data+0x4])]
	lw $25, 0x14($28)
	# ADD, INT(ti_37[temp]), INT(ti_35[temp]), 36
	addiu $26, $25, 36
	# STORE INT(ti_37[temp]), 16[ARRAY(a[data+0x4])]
	sw $26, 0x14($28)
	# LOAD INT(ti_38[temp]), 20[ARRAY(a[data+0x4])]
	lw $27, 0x18($28)
	# ADD, INT(ti_40[temp]), INT(ti_38[temp]), 36
	addiu $17, $27, 36
	# STORE INT(ti_40[temp]), 20[ARRAY(a[data+0x4])]
	sw $17, 0x18($28)
	# LOAD INT(ti_41[temp]), 24[ARRAY(a[data+0x4])]
	lw $18, 0x1c($28)
	# ADD, INT(ti_43[temp]), INT(ti_41[temp]), 36
	addiu $20, $18, 36
	# STORE INT(ti_43[temp]), 24[ARRAY(a[data+0x4])]
	sw $20, 0x1c($28)
	# LOAD INT(ti_44[temp]), 28[ARRAY(a[data+0x4])]
	lw $19, 0x20($28)
	# ADD, INT(ti_46[temp]), INT(ti_44[temp]), 36
	addiu $21, $19, 36
	# STORE INT(ti_46[temp]), 28[ARRAY(a[data+0x4])]
	sw $21, 0x20($28)
	# LOAD INT(ti_47[temp]), 32[ARRAY(a[data+0x4])]
	lw $22, 0x24($28)
	# ADD, INT(ti_49[temp]), INT(ti_47[temp]), 36
	addiu $23, $22, 36
	# STORE INT(ti_49[temp]), 32[ARRAY(a[data+0x4])]
	sw $23, 0x24($28)
	# LOAD INT(ti_50[temp]), 36[ARRAY(a[data+0x4])]
	lw $24, 0x28($28)
	# ADD, INT(ti_52[temp]), INT(ti_50[temp]), 36
	addiu $25, $24, 36
	# STORE INT(ti_52[temp]), 36[ARRAY(a[data+0x4])]
	sw $25, 0x28($28)
	# ADD, INT(i[sp-0x4]), INT(i[sp-0x4]), 1
	addiu $6, $6, 1
	# JUMP B_15
B_15:
	# JUMP DO_CHECK_12
DO_CHECK_12:
	# BRANCH(ble) INT(i[sp-0x4]) 100 ? DO_BODY_11 : DO_END_13
	ble $6, 100, DO_BODY_11
DO_END_13:
	# ASS, INT(i[sp-0x4]), 0
	li $6, 0
	# BRANCH(blt) INT(i[sp-0x4]) 10 ? DO_BODY_16 : DO_END_18
	bge $6, 10, DO_END_18
DO_BODY_16:
	# JUMP B_19
B_19:
	# MUL, INT(ti_56[temp]), INT(i[sp-0x4]), 4
	sll $26, $6, 2
	# ADD, INT(ti_56[temp]), INT(ti_56[temp]), 0
	# LOAD INT(ti_57[temp]), INT(ti_56[temp])[ARRAY(a[data+0x4])]
	addu $2, $28, $26
	lw $27, 0x4($2)
	# PRINT_INT INT(ti_57[temp])
	li $2, 1
	move $4, $27
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# ADD, INT(i[sp-0x4]), INT(i[sp-0x4]), 1
	addiu $6, $6, 1
	# JUMP B_20
B_20:
	# JUMP DO_CHECK_17
DO_CHECK_17:
	# BRANCH(blt) INT(i[sp-0x4]) 10 ? DO_BODY_16 : DO_END_18
	blt $6, 10, DO_BODY_16
DO_END_18:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(i[sp-0x4])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT INT(j[sp-0x8])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT -6
	li $2, 1
	li $4, -6
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
