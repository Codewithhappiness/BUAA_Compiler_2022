# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "n is "
	STR_3: .asciiz "1\n"
	STR_2: .asciiz "\n"
	STR_4: .asciiz "2\n"
.text
	j FUNC_main
FUNC_main:
	# DEF, 10, INT(n[sp-0x4])
	li $5, 10
	# JUMP WHILE_0
	j WHILE_0
WHILE_0:
	# ASS, INT(n[sp-0x4]), BOOL(tmp_bool_0[temp])
	move $6, $5
	# Branch INT(n[sp-0x4]) ? AND_5 : AND_END_4
	move $3, $5
	bne $3, $0, AND_5
	j AND_END_4
AND_5:
	# JUMP AND_END_4
	j AND_END_4
AND_END_4:
	# ASS, BOOL(tmp_bool_0[temp]), BOOL(tmp_bool_1[temp])
	move $7, $6
	# Branch BOOL(tmp_bool_1[temp]) ? OR_END_3 : OR_6
	move $3, $7
	bne $3, $0, OR_END_3
	j OR_6
OR_6:
	# JUMP OR_END_3
	j OR_END_3
OR_END_3:
	# Branch BOOL(tmp_bool_1[temp]) ? WHILE_BODY_1 : WHILE_END_2
	move $3, $7
	bne $3, $0, WHILE_BODY_1
	j WHILE_END_2
WHILE_BODY_1:
	# JUMP B_7
	j B_7
B_7:
	# SUB, INT(n[sp-0x4]), 1, BOOL(tmp_bool_2[temp])
	addiu $8, $5, -1
	# ASS, BOOL(tmp_bool_2[temp]), INT(n[sp-0x4])
	move $5, $8
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT INT(n[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# LT, INT(n[sp-0x4]), 5, BOOL(tmp_bool_3[temp])
	slti $9, $5, 5
	# ASS, BOOL(tmp_bool_3[temp]), BOOL(tmp_bool_4[temp])
	move $10, $9
	# Branch BOOL(tmp_bool_3[temp]) ? AND_10 : AND_END_9
	move $3, $9
	bne $3, $0, AND_10
	j AND_END_9
AND_10:
	# JUMP AND_END_9
	j AND_END_9
AND_END_9:
	# ASS, BOOL(tmp_bool_4[temp]), BOOL(tmp_bool_5[temp])
	move $11, $10
	# Branch BOOL(tmp_bool_5[temp]) ? OR_END_8 : OR_11
	move $3, $11
	bne $3, $0, OR_END_8
	j OR_11
OR_11:
	# JUMP OR_END_8
	j OR_END_8
OR_END_8:
	# Branch BOOL(tmp_bool_5[temp]) ? IF_BODY_12 : IF_END_13
	move $3, $11
	bne $3, $0, IF_BODY_12
	j IF_END_13
IF_BODY_12:
	# JUMP B_14
	j B_14
B_14:
	# JUMP WHILE_0
	j WHILE_0
	# JUMP B_15
	j B_15
B_15:
	# JUMP IF_END_13
	j IF_END_13
IF_END_13:
	# EQ, INT(n[sp-0x4]), 1, BOOL(tmp_bool_6[temp])
	seq $12, $5, 1
	# ASS, BOOL(tmp_bool_6[temp]), BOOL(tmp_bool_7[temp])
	move $13, $12
	# Branch BOOL(tmp_bool_6[temp]) ? AND_18 : AND_END_17
	move $3, $12
	bne $3, $0, AND_18
	j AND_END_17
AND_18:
	# JUMP AND_END_17
	j AND_END_17
AND_END_17:
	# ASS, BOOL(tmp_bool_7[temp]), BOOL(tmp_bool_8[temp])
	move $14, $13
	# Branch BOOL(tmp_bool_8[temp]) ? OR_END_16 : OR_19
	move $3, $14
	bne $3, $0, OR_END_16
	j OR_19
OR_19:
	# JUMP OR_END_16
	j OR_END_16
OR_END_16:
	# Branch BOOL(tmp_bool_8[temp]) ? IF_BODY_20 : IF_ELSE_22
	move $3, $14
	bne $3, $0, IF_BODY_20
	j IF_ELSE_22
IF_BODY_20:
	# JUMP B_23
	j B_23
B_23:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_24
	j B_24
B_24:
	# JUMP IF_END_21
	j IF_END_21
IF_END_21:
IF_ELSE_22:
	# JUMP B_25
	j B_25
B_25:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP B_26
	j B_26
B_26:
	# JUMP IF_END_21
	j IF_END_21
	# JUMP B_27
	j B_27
B_27:
	# JUMP WHILE_0
	j WHILE_0
WHILE_END_2:
