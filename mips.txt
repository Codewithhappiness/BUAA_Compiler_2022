# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "19231177\n"
	STR_2: .asciiz "_ = "
	STR_3: .asciiz "; a = "
	STR_4: .asciiz "; b = "
	STR_5: .asciiz "; c = "
	STR_6: .asciiz ";\n"
	STR_7: .asciiz "+"
	STR_8: .asciiz "="
	STR_9: .asciiz "; "
	STR_10: .asciiz "-"
	STR_11: .asciiz "*"
	STR_12: .asciiz "/"
	STR_13: .asciiz "mod"
	STR_14: .asciiz "\n"
	STR_15: .asciiz "+("
	STR_16: .asciiz ")*"
	STR_17: .asciiz "mod("
	STR_18: .asciiz "all chars : !()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\n"
	STR_19: .asciiz "a"
	STR_20: .asciiz "b"
	STR_21: .asciiz "!+7+3="
	STR_22: .asciiz "! : error\n"
	STR_23: .asciiz "max: "
	STR_24: .asciiz " ; min : "
	STR_25: .asciiz " ; sum : "
.text
	la $gp, global
	j FUNC_main
FUNC_main:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# DEF, INT(_[sp-0x4]), 1
	li $5, 1
	# ASS, INT(a[sp-0x8]), 20
	li $6, 20
	# DEF, INT(c[sp-0x10]), 460
	li $7, 460
	# ASS, INT(b[sp-0xc]), 30
	li $8, 30
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(_[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(a[sp-0x8])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(b[sp-0xc])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# PRINT_INT INT(c[sp-0x10])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_6
	li $2, 4
	la $4, STR_6
	syscall
	# ADD, INT(tmp_int_0[temp]), INT(a[sp-0x8]), INT(b[sp-0xc])
	addu $9, $6, $8
	# ASS, INT(n1[sp-0x14]), INT(tmp_int_0[temp])
	move $10, $9
	# SUB, INT(tmp_int_1[temp]), INT(c[sp-0x10]), INT(_[sp-0x4])
	subu $11, $7, $5
	# ASS, INT(n2[sp-0x18]), INT(tmp_int_1[temp])
	move $12, $11
	# MUL, INT(tmp_int_2[temp]), INT(n1[sp-0x14]), INT(n2[sp-0x18])
	mult $10 $12
	mflo $13
	# ASS, INT(n3[sp-0x1c]), INT(tmp_int_2[temp])
	move $14, $13
	# DIV, INT(tmp_int_3[temp]), INT(n2[sp-0x18]), INT(n1[sp-0x14])
	div $12 $10
	mflo $15
	# ASS, INT(n4[sp-0x20]), INT(tmp_int_3[temp])
	move $16, $15
	# MOD, INT(tmp_int_4[temp]), INT(n3[sp-0x1c]), INT(b[sp-0xc])
	div $14 $8
	mfhi $17
	# ASS, INT(n5[sp-0x24]), INT(tmp_int_4[temp])
	move $18, $17
	# PRINT_INT INT(a[sp-0x8])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(b[sp-0xc])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(c[sp-0x10])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(_[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $14
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $16
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $14
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(b[sp-0xc])
	li $2, 1
	move $4, $8
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# ADD, INT(tmp_int_5[temp]), INT(n1[sp-0x14]), INT(n2[sp-0x18])
	addu $19, $10, $12
	# ADD, INT(tmp_int_6[temp]), INT(tmp_int_5[temp]), INT(n3[sp-0x1c])
	addu $20, $19, $14
	# DEF, INT(a1[sp-0x28]), INT(tmp_int_6[temp])
	move $21, $20
	# SUB, INT(tmp_int_7[temp]), INT(n2[sp-0x18]), INT(n3[sp-0x1c])
	subu $22, $12, $14
	# SUB, INT(tmp_int_8[temp]), INT(tmp_int_7[temp]), INT(n4[sp-0x20])
	subu $23, $22, $16
	# DEF, INT(a2[sp-0x2c]), INT(tmp_int_8[temp])
	move $24, $23
	# MUL, INT(tmp_int_9[temp]), INT(n3[sp-0x1c]), INT(n4[sp-0x20])
	mult $14 $16
	mflo $25
	# MUL, INT(tmp_int_10[temp]), INT(tmp_int_9[temp]), INT(n5[sp-0x24])
	mult $25 $18
	mflo $26
	# DEF, INT(a3[sp-0x30]), INT(tmp_int_10[temp])
	move $27, $26
	# DIV, INT(tmp_int_11[temp]), INT(n5[sp-0x24]), INT(n1[sp-0x14])
	div $18 $10
	mflo $9
	# DIV, INT(tmp_int_12[temp]), INT(tmp_int_11[temp]), INT(n4[sp-0x20])
	div $9 $16
	mflo $11
	# DEF, INT(a4[sp-0x34]), INT(tmp_int_12[temp])
	move $13, $11
	# MOD, INT(tmp_int_13[temp]), INT(n4[sp-0x20]), INT(n1[sp-0x14])
	div $16 $10
	mfhi $15
	# MOD, INT(tmp_int_14[temp]), INT(tmp_int_13[temp]), INT(n1[sp-0x14])
	div $15 $10
	mfhi $17
	# DEF, INT(a5[sp-0x38]), INT(tmp_int_14[temp])
	move $19, $17
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $14
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a1[sp-0x28])
	li $2, 1
	move $4, $21
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $14
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $16
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a2[sp-0x2c])
	li $2, 1
	move $4, $24
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n3[sp-0x1c])
	li $2, 1
	move $4, $14
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $16
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a3[sp-0x30])
	li $2, 1
	move $4, $27
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(n2[sp-0x18])
	li $2, 1
	move $4, $12
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a4[sp-0x34])
	li $2, 1
	move $4, $13
	syscall
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(n4[sp-0x20])
	li $2, 1
	move $4, $16
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(n5[sp-0x24])
	li $2, 1
	move $4, $18
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(n1[sp-0x14])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(a5[sp-0x38])
	li $2, 1
	move $4, $19
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# DEF, INT(m_1[sp-0x3c]), 10
	li $20, 10
	# DEF, INT(m_2[sp-0x40]), 17
	li $22, 17
	# DEF, INT(m_3[sp-0x44]), 23
	li $23, 23
	# DEF, INT(m_4[sp-0x48]), 37
	li $25, 37
	# DEF, INT(m_5[sp-0x4c]), 43
	li $26, 43
	# DEF, INT(m_6[sp-0x50]), 71
	li $9, 71
	# ADD, INT(tmp_int_15[temp]), INT(m_1[sp-0x3c]), INT(m_2[sp-0x40])
	addu $11, $20, $22
	# MUL, INT(tmp_int_17[temp]), INT(m_3[sp-0x44]), INT(m_4[sp-0x48])
	mult $23 $25
	mflo $15
	# DIV, INT(tmp_int_18[temp]), INT(tmp_int_17[temp]), INT(m_5[sp-0x4c])
	div $15 $26
	mflo $17
	# MOD, INT(tmp_int_19[temp]), INT(tmp_int_18[temp]), INT(m_6[sp-0x50])
	div $17 $9
	mfhi $15
	# SUB, INT(tmp_int_16[temp]), INT(tmp_int_15[temp]), INT(tmp_int_19[temp])
	subu $17, $11, $15
	# MUL, INT(tmp_int_21[temp]), INT(m_2[sp-0x40]), INT(m_3[sp-0x44])
	mult $22 $23
	mflo $11
	# SUB, INT(tmp_int_20[temp]), INT(tmp_int_16[temp]), INT(tmp_int_21[temp])
	subu $15, $17, $11
	# ADD, INT(tmp_int_22[temp]), INT(tmp_int_20[temp]), INT(m_5[sp-0x4c])
	addu $17, $15, $26
	# DEF, INT(r1[sp-0x54]), INT(tmp_int_22[temp])
	move $11, $17
	# SUB, INT(tmp_int_24[temp]), INT(m_2[sp-0x40]), INT(m_3[sp-0x44])
	subu $15, $22, $23
	# MUL, INT(tmp_int_25[temp]), INT(tmp_int_24[temp]), INT(m_4[sp-0x48])
	mult $15 $25
	mflo $17
	# DIV, INT(tmp_int_26[temp]), INT(tmp_int_25[temp]), INT(m_5[sp-0x4c])
	div $17 $26
	mflo $15
	# SUB, INT(tmp_int_28[temp]), INT(m_6[sp-0x50]), INT(m_4[sp-0x48])
	subu $17, $9, $25
	# MOD, INT(tmp_int_27[temp]), INT(tmp_int_26[temp]), INT(tmp_int_28[temp])
	div $15 $17
	mfhi $5
	# MUL, INT(tmp_int_29[temp]), INT(tmp_int_27[temp]), INT(r1[sp-0x54])
	mult $5 $11
	mflo $15
	# ADD, INT(tmp_int_23[temp]), INT(m_1[sp-0x3c]), INT(tmp_int_29[temp])
	addu $17, $20, $15
	# DEF, INT(r2[sp-0x58]), INT(tmp_int_23[temp])
	move $5, $17
	# ADD, INT(tmp_int_30[temp]), INT(m_1[sp-0x3c]), INT(m_2[sp-0x40])
	addu $15, $20, $22
	# MUL, INT(tmp_int_32[temp]), INT(m_3[sp-0x44]), INT(m_4[sp-0x48])
	mult $23 $25
	mflo $17
	# DIV, INT(tmp_int_33[temp]), INT(tmp_int_32[temp]), INT(m_5[sp-0x4c])
	div $17 $26
	mflo $10
	# MOD, INT(tmp_int_34[temp]), INT(tmp_int_33[temp]), INT(m_6[sp-0x50])
	div $10 $9
	mfhi $17
	# SUB, INT(tmp_int_31[temp]), INT(tmp_int_30[temp]), INT(tmp_int_34[temp])
	subu $10, $15, $17
	# MUL, INT(tmp_int_36[temp]), INT(m_2[sp-0x40]), INT(m_3[sp-0x44])
	mult $22 $23
	mflo $15
	# SUB, INT(tmp_int_35[temp]), INT(tmp_int_31[temp]), INT(tmp_int_36[temp])
	subu $17, $10, $15
	# ADD, INT(tmp_int_37[temp]), INT(tmp_int_35[temp]), INT(m_5[sp-0x4c])
	addu $10, $17, $26
	# PRINT_INT INT(m_1[sp-0x3c])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(m_2[sp-0x40])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_3[sp-0x44])
	li $2, 1
	move $4, $23
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(m_4[sp-0x48])
	li $2, 1
	move $4, $25
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(m_5[sp-0x4c])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# PRINT_INT INT(m_6[sp-0x50])
	li $2, 1
	move $4, $9
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_2[sp-0x40])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(m_3[sp-0x44])
	li $2, 1
	move $4, $23
	syscall
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(m_5[sp-0x4c])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(r1[sp-0x54])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(tmp_int_37[temp])
	li $2, 1
	move $4, $10
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# PRINT_INT INT(m_1[sp-0x3c])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_15
	li $2, 4
	la $4, STR_15
	syscall
	# PRINT_INT INT(m_2[sp-0x40])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_3[sp-0x44])
	li $2, 1
	move $4, $23
	syscall
	# PRINT_STR STR_16
	li $2, 4
	la $4, STR_16
	syscall
	# PRINT_INT INT(m_4[sp-0x48])
	li $2, 1
	move $4, $25
	syscall
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(m_5[sp-0x4c])
	li $2, 1
	move $4, $26
	syscall
	# PRINT_STR STR_17
	li $2, 4
	la $4, STR_17
	syscall
	# PRINT_INT INT(m_6[sp-0x50])
	li $2, 1
	move $4, $9
	syscall
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# PRINT_INT INT(m_4[sp-0x48])
	li $2, 1
	move $4, $25
	syscall
	# PRINT_STR STR_16
	li $2, 4
	la $4, STR_16
	syscall
	# PRINT_INT INT(r1[sp-0x54])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(r2[sp-0x58])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# PRINT_STR STR_18
	li $2, 4
	la $4, STR_18
	syscall
	# DEF, INT(test_1[sp-0x5c]), 1
	li $15, 1
	# DEF, INT(i[sp-0x60]), 5
	li $17, 5
	# DEF, INT(old[sp-0x64]), INT(i[sp-0x60])
	move $10, $17
	# JUMP WHILE_0
	sw $22, -0x40($29)
	sw $26, -0x4c($29)
	sw $17, -0x60($29)
	sw $20, -0x3c($29)
	sw $19, -0x38($29)
	sw $15, -0x5c($29)
	sw $16, -0x20($29)
	sw $8, -0xc($29)
	sw $21, -0x28($29)
	sw $13, -0x34($29)
	sw $6, -0x8($29)
	sw $14, -0x1c($29)
	sw $23, -0x44($29)
	sw $12, -0x18($29)
	sw $27, -0x30($29)
	sw $9, -0x50($29)
	sw $10, -0x64($29)
	sw $25, -0x48($29)
	sw $5, -0x58($29)
	sw $18, -0x24($29)
	sw $7, -0x10($29)
	sw $11, -0x54($29)
	sw $24, -0x2c($29)
WHILE_0:
	# JUMP L_OR_EXP_3
L_OR_EXP_3:
	# JUMP L_AND_EXP_5
L_AND_EXP_5:
	# GT, INT(tmp_int_38[temp]), INT(i[sp-0x60]), 0
	lw $22, -0x60($29)
	sgt $26, $22, 0
	# ASS, INT(tmp_int_39[temp]), INT(tmp_int_38[temp])
	move $17, $26
	# Branch INT(tmp_int_38[temp]) ? AND_7 : AND_END_6
	sw $22, -0x60($29)
	sw $26, -0x98($29)
	sw $17, -0x9c($29)
	lw $3, -0x98($29)
	bne $3, $0, AND_7
	j AND_END_6
AND_7:
	# JUMP AND_END_6
AND_END_6:
	# ASS, INT(tmp_int_40[temp]), INT(tmp_int_39[sp-0x9c])
	lw $20, -0x9c($29)
	move $19, $20
	# Branch INT(tmp_int_40[temp]) ? OR_END_4 : OR_8
	sw $19, -0xa0($29)
	lw $3, -0xa0($29)
	bne $3, $0, OR_END_4
OR_8:
	# JUMP OR_END_4
OR_END_4:
	# Branch INT(tmp_int_40[sp-0xa0]) ? WHILE_BODY_1 : WHILE_END_2
	lw $3, -0xa0($29)
	bne $3, $0, WHILE_BODY_1
	j WHILE_END_2
WHILE_BODY_1:
	# JUMP B_9
B_9:
	# MUL, INT(tmp_int_41[temp]), INT(test_1[sp-0x5c]), INT(i[sp-0x60])
	lw $15, -0x5c($29)
	lw $16, -0x60($29)
	mult $15 $16
	mflo $8
	# ASS, INT(test_1[sp-0x5c]), INT(tmp_int_41[temp])
	move $15, $8
	# SUB, INT(tmp_int_42[temp]), INT(i[sp-0x60]), 1
	addiu $21, $16, -1
	# ASS, INT(i[sp-0x60]), INT(tmp_int_42[temp])
	move $16, $21
	# JUMP B_10
	sw $16, -0x60($29)
	sw $15, -0x5c($29)
B_10:
	# JUMP WHILE_0
	j WHILE_0
WHILE_END_2:
	# JUMP L_OR_EXP_11
L_OR_EXP_11:
	# JUMP L_AND_EXP_13
L_AND_EXP_13:
	# EQ, INT(tmp_int_43[temp]), INT(test_1[sp-0x5c]), 120
	lw $13, -0x5c($29)
	seq $6, $13, 120
	# ASS, INT(tmp_int_44[temp]), INT(tmp_int_43[temp])
	move $14, $6
	# Branch INT(tmp_int_43[temp]) ? AND_15 : AND_END_14
	sw $13, -0x5c($29)
	sw $14, -0xa4($29)
	sw $6, -0xa8($29)
	lw $3, -0xa8($29)
	bne $3, $0, AND_15
	j AND_END_14
AND_15:
	# JUMP AND_END_14
AND_END_14:
	# ASS, INT(tmp_int_45[temp]), INT(tmp_int_44[sp-0xa4])
	lw $23, -0xa4($29)
	move $12, $23
	# Branch INT(tmp_int_45[temp]) ? OR_END_12 : OR_16
	sw $12, -0xac($29)
	lw $3, -0xac($29)
	bne $3, $0, OR_END_12
OR_16:
	# JUMP OR_END_12
OR_END_12:
	# Branch INT(tmp_int_45[sp-0xac]) ? IF_BODY_17 : IF_END_18
	lw $3, -0xac($29)
	bne $3, $0, IF_BODY_17
	j IF_END_18
IF_BODY_17:
	# JUMP B_19
B_19:
	# ADD, INT(tmp_int_46[temp]), INT(test_1[sp-0x5c]), 7
	lw $27, -0x5c($29)
	addiu $9, $27, 7
	# ASS, INT(test_1[sp-0x5c]), INT(tmp_int_46[temp])
	move $27, $9
	# JUMP B_20
	sw $27, -0x5c($29)
B_20:
	# JUMP IF_END_18
IF_END_18:
	# JUMP L_OR_EXP_21
L_OR_EXP_21:
	# JUMP L_AND_EXP_23
L_AND_EXP_23:
	# GT, INT(tmp_int_47[temp]), INT(test_1[sp-0x5c]), 119
	lw $10, -0x5c($29)
	sgt $25, $10, 119
	# EQ, INT(tmp_int_48[temp]), INT(tmp_int_47[temp]), 1
	seq $5, $25, 1
	# ASS, INT(tmp_int_49[temp]), INT(tmp_int_48[temp])
	move $18, $5
	# Branch INT(tmp_int_48[temp]) ? AND_25 : AND_END_24
	sw $10, -0x5c($29)
	sw $18, -0xb0($29)
	sw $5, -0xb4($29)
	lw $3, -0xb4($29)
	bne $3, $0, AND_25
	j AND_END_24
AND_25:
	# JUMP AND_END_24
AND_END_24:
	# ASS, INT(tmp_int_50[temp]), INT(tmp_int_49[sp-0xb0])
	lw $7, -0xb0($29)
	move $11, $7
	# Branch INT(tmp_int_50[temp]) ? OR_END_22 : OR_26
	sw $11, -0xb8($29)
	lw $3, -0xb8($29)
	bne $3, $0, OR_END_22
OR_26:
	# JUMP OR_END_22
OR_END_22:
	# Branch INT(tmp_int_50[sp-0xb8]) ? IF_BODY_27 : IF_END_28
	lw $3, -0xb8($29)
	bne $3, $0, IF_BODY_27
	j IF_END_28
IF_BODY_27:
	# JUMP B_29
B_29:
	# ADD, INT(tmp_int_51[temp]), INT(test_1[sp-0x5c]), 3
	lw $24, -0x5c($29)
	addiu $22, $24, 3
	# ASS, INT(test_1[sp-0x5c]), INT(tmp_int_51[temp])
	move $24, $22
	# JUMP B_30
	sw $24, -0x5c($29)
B_30:
	# JUMP IF_END_28
IF_END_28:
	# JUMP L_OR_EXP_31
L_OR_EXP_31:
	# JUMP L_AND_EXP_33
L_AND_EXP_33:
	# GE, INT(tmp_int_52[temp]), 0, 1
	li $26, 0
	# ASS, INT(tmp_int_53[temp]), INT(tmp_int_52[temp])
	move $17, $26
	# Branch INT(tmp_int_52[temp]) ? AND_35 : AND_END_34
	sw $26, -0xbc($29)
	sw $17, -0xc0($29)
	lw $3, -0xbc($29)
	bne $3, $0, AND_35
	j AND_END_34
AND_35:
	# JUMP AND_END_34
AND_END_34:
	# ASS, INT(tmp_int_54[temp]), INT(tmp_int_53[sp-0xc0])
	lw $20, -0xc0($29)
	move $19, $20
	# Branch INT(tmp_int_54[temp]) ? OR_END_32 : OR_36
	sw $19, -0xc4($29)
	lw $3, -0xc4($29)
	bne $3, $0, OR_END_32
OR_36:
	# JUMP OR_END_32
OR_END_32:
	# Branch INT(tmp_int_54[sp-0xc4]) ? IF_BODY_37 : IF_END_38
	lw $3, -0xc4($29)
	bne $3, $0, IF_BODY_37
	j IF_END_38
IF_BODY_37:
	# JUMP B_39
B_39:
	# PRINT_STR STR_19
	li $2, 4
	la $4, STR_19
	syscall
	# JUMP B_40
B_40:
	# JUMP IF_END_38
IF_END_38:
	# JUMP L_OR_EXP_41
L_OR_EXP_41:
	# JUMP L_AND_EXP_43
L_AND_EXP_43:
	# LE, INT(tmp_int_55[temp]), 1, 0
	li $8, 0
	# ASS, INT(tmp_int_56[temp]), INT(tmp_int_55[temp])
	move $21, $8
	# Branch INT(tmp_int_55[temp]) ? AND_45 : AND_END_44
	sw $8, -0xc8($29)
	sw $21, -0xcc($29)
	lw $3, -0xc8($29)
	bne $3, $0, AND_45
	j AND_END_44
AND_45:
	# JUMP AND_END_44
AND_END_44:
	# ASS, INT(tmp_int_57[temp]), INT(tmp_int_56[sp-0xcc])
	lw $16, -0xcc($29)
	move $15, $16
	# Branch INT(tmp_int_57[temp]) ? OR_END_42 : OR_46
	sw $15, -0xd0($29)
	lw $3, -0xd0($29)
	bne $3, $0, OR_END_42
OR_46:
	# JUMP OR_END_42
OR_END_42:
	# Branch INT(tmp_int_57[sp-0xd0]) ? IF_BODY_47 : IF_END_48
	lw $3, -0xd0($29)
	bne $3, $0, IF_BODY_47
	j IF_END_48
IF_BODY_47:
	# JUMP B_49
B_49:
	# PRINT_STR STR_19
	li $2, 4
	la $4, STR_19
	syscall
	# JUMP B_50
B_50:
	# JUMP IF_END_48
IF_END_48:
	# JUMP L_OR_EXP_51
L_OR_EXP_51:
	# JUMP L_AND_EXP_53
L_AND_EXP_53:
	# NOT, INT(tmp_int_58[temp]), 1
	seq $13, $0, 1
	# ASS, INT(tmp_int_59[temp]), INT(tmp_int_58[temp])
	move $14, $13
	# Branch INT(tmp_int_58[temp]) ? AND_55 : AND_END_54
	sw $13, -0xd4($29)
	sw $14, -0xd8($29)
	lw $3, -0xd4($29)
	bne $3, $0, AND_55
	j AND_END_54
AND_55:
	# JUMP AND_END_54
AND_END_54:
	# ASS, INT(tmp_int_60[temp]), INT(tmp_int_59[sp-0xd8])
	lw $6, -0xd8($29)
	move $23, $6
	# Branch INT(tmp_int_60[temp]) ? OR_END_52 : OR_56
	sw $23, -0xdc($29)
	lw $3, -0xdc($29)
	bne $3, $0, OR_END_52
OR_56:
	# JUMP OR_END_52
OR_END_52:
	# Branch INT(tmp_int_60[sp-0xdc]) ? IF_BODY_57 : IF_END_58
	lw $3, -0xdc($29)
	bne $3, $0, IF_BODY_57
	j IF_END_58
IF_BODY_57:
	# JUMP B_59
B_59:
	# PRINT_STR STR_20
	li $2, 4
	la $4, STR_20
	syscall
	# JUMP B_60
B_60:
	# JUMP IF_END_58
IF_END_58:
	# PRINT_INT INT(old[sp-0x64])
	li $2, 1
	lw $4, -0x64($29)
	syscall
	# PRINT_STR STR_21
	li $2, 4
	la $4, STR_21
	syscall
	# PRINT_INT INT(test_1[sp-0x5c])
	li $2, 1
	lw $4, -0x5c($29)
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# DEF, INT(nn_1[sp-0x68]), 1
	li $12, 1
	# DEF, INT(nn2[sp-0x6c]), -1
	li $9, -1
	# DEF, INT(nn3[sp-0x70]), -1
	li $27, -1
	# DEF, INT(nn4[sp-0x74]), -1
	li $25, -1
	# DEF, INT(nn5[sp-0x78]), 1
	li $10, 1
	# DEF, INT(nn6[sp-0x7c]), -1
	li $18, -1
	# DEF, INT(nn7[sp-0x80]), 1
	li $5, 1
	# DEF, INT(nn8[sp-0x84]), 1
	li $7, 1
	# JUMP L_OR_EXP_61
	sw $5, -0x80($29)
	sw $25, -0x74($29)
	sw $7, -0x84($29)
	sw $18, -0x7c($29)
	sw $10, -0x78($29)
	sw $27, -0x70($29)
	sw $12, -0x68($29)
	sw $9, -0x6c($29)
L_OR_EXP_61:
	# JUMP L_AND_EXP_63
L_AND_EXP_63:
	# ADD, INT(tmp_int_61[temp]), INT(nn_1[sp-0x68]), INT(nn2[sp-0x6c])
	lw $11, -0x68($29)
	lw $22, -0x6c($29)
	addu $24, $11, $22
	# ADD, INT(tmp_int_62[temp]), INT(tmp_int_61[temp]), INT(nn3[sp-0x70])
	lw $26, -0x70($29)
	addu $17, $24, $26
	# ADD, INT(tmp_int_63[temp]), INT(tmp_int_62[temp]), INT(nn4[sp-0x74])
	lw $20, -0x74($29)
	addu $19, $17, $20
	# ADD, INT(tmp_int_64[temp]), INT(tmp_int_63[temp]), INT(nn5[sp-0x78])
	lw $8, -0x78($29)
	addu $21, $19, $8
	# ADD, INT(tmp_int_65[temp]), INT(tmp_int_64[temp]), INT(nn6[sp-0x7c])
	lw $16, -0x7c($29)
	addu $15, $21, $16
	# ADD, INT(tmp_int_66[temp]), INT(tmp_int_65[temp]), INT(nn7[sp-0x80])
	lw $13, -0x80($29)
	addu $14, $15, $13
	# ADD, INT(tmp_int_67[temp]), INT(tmp_int_66[temp]), INT(nn8[sp-0x84])
	lw $6, -0x84($29)
	addu $23, $14, $6
	# NEQ, INT(tmp_int_68[temp]), INT(tmp_int_67[temp]), 0
	sne $5, $23, 0
	# ASS, INT(tmp_int_69[temp]), INT(tmp_int_68[temp])
	move $25, $5
	# Branch INT(tmp_int_68[temp]) ? AND_65 : AND_END_64
	sw $13, -0x80($29)
	sw $25, -0xe0($29)
	sw $20, -0x74($29)
	sw $6, -0x84($29)
	sw $16, -0x7c($29)
	sw $5, -0xe4($29)
	sw $8, -0x78($29)
	sw $26, -0x70($29)
	sw $11, -0x68($29)
	sw $22, -0x6c($29)
	lw $3, -0xe4($29)
	bne $3, $0, AND_65
	j AND_END_64
AND_65:
	# JUMP AND_END_64
AND_END_64:
	# ASS, INT(tmp_int_70[temp]), INT(tmp_int_69[sp-0xe0])
	lw $7, -0xe0($29)
	move $18, $7
	# Branch INT(tmp_int_70[temp]) ? OR_END_62 : OR_66
	sw $18, -0xe8($29)
	lw $3, -0xe8($29)
	bne $3, $0, OR_END_62
OR_66:
	# JUMP OR_END_62
OR_END_62:
	# Branch INT(tmp_int_70[sp-0xe8]) ? IF_BODY_67 : IF_END_68
	lw $3, -0xe8($29)
	bne $3, $0, IF_BODY_67
	j IF_END_68
IF_BODY_67:
	# JUMP IF_END_68
IF_END_68:
	# JUMP L_OR_EXP_69
L_OR_EXP_69:
	# JUMP L_AND_EXP_71
L_AND_EXP_71:
	# ADD, INT(tmp_int_71[temp]), INT(nn_1[sp-0x68]), INT(nn2[sp-0x6c])
	lw $10, -0x68($29)
	lw $27, -0x6c($29)
	addu $12, $10, $27
	# ADD, INT(tmp_int_72[temp]), INT(tmp_int_71[temp]), INT(nn3[sp-0x70])
	lw $9, -0x70($29)
	addu $24, $12, $9
	# ADD, INT(tmp_int_73[temp]), INT(tmp_int_72[temp]), INT(nn4[sp-0x74])
	lw $17, -0x74($29)
	addu $19, $24, $17
	# ADD, INT(tmp_int_74[temp]), INT(tmp_int_73[temp]), INT(nn5[sp-0x78])
	lw $21, -0x78($29)
	addu $15, $19, $21
	# ADD, INT(tmp_int_75[temp]), INT(tmp_int_74[temp]), INT(nn6[sp-0x7c])
	lw $14, -0x7c($29)
	addu $23, $15, $14
	# ADD, INT(tmp_int_76[temp]), INT(tmp_int_75[temp]), INT(nn7[sp-0x80])
	lw $13, -0x80($29)
	addu $25, $23, $13
	# ADD, INT(tmp_int_77[temp]), INT(tmp_int_76[temp]), INT(nn8[sp-0x84])
	lw $20, -0x84($29)
	addu $6, $25, $20
	# NEQ, INT(tmp_int_78[temp]), INT(tmp_int_77[temp]), 0
	sne $16, $6, 0
	# ASS, INT(tmp_int_79[temp]), INT(tmp_int_78[temp])
	move $5, $16
	# Branch INT(tmp_int_78[temp]) ? AND_73 : AND_END_72
	sw $13, -0x80($29)
	sw $16, -0xec($29)
	sw $17, -0x74($29)
	sw $20, -0x84($29)
	sw $14, -0x7c($29)
	sw $21, -0x78($29)
	sw $9, -0x70($29)
	sw $5, -0xf0($29)
	sw $10, -0x68($29)
	sw $27, -0x6c($29)
	lw $3, -0xec($29)
	bne $3, $0, AND_73
	j AND_END_72
AND_73:
	# JUMP AND_END_72
AND_END_72:
	# ASS, INT(tmp_int_80[temp]), INT(tmp_int_79[sp-0xf0])
	lw $8, -0xf0($29)
	move $26, $8
	# Branch INT(tmp_int_80[temp]) ? OR_END_70 : OR_74
	sw $26, -0xf4($29)
	lw $3, -0xf4($29)
	bne $3, $0, OR_END_70
OR_74:
	# JUMP OR_END_70
OR_END_70:
	# Branch INT(tmp_int_80[sp-0xf4]) ? IF_BODY_75 : IF_END_76
	lw $3, -0xf4($29)
	bne $3, $0, IF_BODY_75
	j IF_END_76
IF_BODY_75:
	# PRINT_STR STR_22
	li $2, 4
	la $4, STR_22
	syscall
	# JUMP IF_END_76
IF_END_76:
	# DEF, INT(max_int[sp-0x88]), 2147483647
	li $11, 2147483647
	# DEF, INT(min_int[sp-0x8c]), -2147483647
	li $22, -2147483647
	# ADD, INT(tmp_int_81[temp]), INT(max_int[sp-0x88]), INT(min_int[sp-0x8c])
	addu $7, $11, $22
	# PRINT_STR STR_23
	li $2, 4
	la $4, STR_23
	syscall
	# PRINT_INT INT(max_int[sp-0x88])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_24
	li $2, 4
	la $4, STR_24
	syscall
	# PRINT_INT INT(min_int[sp-0x8c])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_25
	li $2, 4
	la $4, STR_25
	syscall
	# PRINT_INT INT(tmp_int_81[temp])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_14
	li $2, 4
	la $4, STR_14
	syscall
	# DEF, INT(remain[sp-0x90]), 1
	li $18, 1
	# DEF, INT(remain_index[sp-0x94]), 0
	li $12, 0
	# JUMP WHILE_77
	sw $22, -0x8c($29)
	sw $18, -0x90($29)
	sw $11, -0x88($29)
	sw $12, -0x94($29)
WHILE_77:
	# JUMP L_OR_EXP_80
L_OR_EXP_80:
	# JUMP L_AND_EXP_82
L_AND_EXP_82:
	# LT, INT(tmp_int_82[temp]), INT(remain_index[sp-0x94]), INT(remain[sp-0x90])
	lw $24, -0x94($29)
	lw $19, -0x90($29)
	slt $15, $24, $19
	# ASS, INT(tmp_int_83[temp]), INT(tmp_int_82[temp])
	move $23, $15
	# Branch INT(tmp_int_82[temp]) ? AND_84 : AND_END_83
	sw $19, -0x90($29)
	sw $15, -0xf8($29)
	sw $24, -0x94($29)
	sw $23, -0xfc($29)
	lw $3, -0xf8($29)
	bne $3, $0, AND_84
	j AND_END_83
AND_84:
	# JUMP AND_END_83
AND_END_83:
	# ASS, INT(tmp_int_84[temp]), INT(tmp_int_83[sp-0xfc])
	lw $25, -0xfc($29)
	move $6, $25
	# Branch INT(tmp_int_84[temp]) ? OR_END_81 : OR_85
	sw $6, -0x100($29)
	lw $3, -0x100($29)
	bne $3, $0, OR_END_81
OR_85:
	# JUMP OR_END_81
OR_END_81:
	# Branch INT(tmp_int_84[sp-0x100]) ? WHILE_BODY_78 : WHILE_END_79
	lw $3, -0x100($29)
	bne $3, $0, WHILE_BODY_78
	j WHILE_END_79
WHILE_BODY_78:
	# JUMP B_86
B_86:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# ADD, INT(tmp_int_85[temp]), INT(remain_index[sp-0x94]), 1
	lw $13, -0x94($29)
	addiu $16, $13, 1
	# ASS, INT(remain_index[sp-0x94]), INT(tmp_int_85[temp])
	move $13, $16
	# JUMP B_87
	sw $13, -0x94($29)
B_87:
	# JUMP WHILE_77
	j WHILE_77
WHILE_END_79:
	# RETURN 0
	li $2, 10
	syscall
	
