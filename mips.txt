# Yuelin's Compiler
	
.data
	global:
	3 100
	.space 4
	STR_1: .asciiz "20373053\n"
	STR_3: .asciiz "\n"
	STR_2: .asciiz "c is "
.text
	la $gp, global
	j FUNC_main
FUNC_add:
	# ADD, INT(a[sp-0x4]), INT(b[sp-0x8]), INT(tmp_int_0[temp])
	lw $6, -0x4($29)
	lw $7, -0x8($29)
	addu $5, $6, $7
	# RETURN INT(tmp_int_0[temp])
	move $2, $5
	sw $5, -0xc($29)
	sw $6, -0x4($29)
	sw $7, -0x8($29)
	jr $ra
	
FUNC_main:
	# DEF, 9, INT(a[sp-0x4])
	li $8, 9
	# DEF, 11, INT(b[sp-0x8])
	li $9, 11
	# DEF, 0, INT(c[sp-0xc])
	li $10, 0
	# DEF, 10, INT(now[sp-0x10])
	li $11, 10
	# JUMP WHILE_1
	sw $8, -0x4($29)
	sw $9, -0x8($29)
	sw $10, -0xc($29)
	sw $11, -0x10($29)
	j WHILE_1
WHILE_1:
	# JUMP L_OR_EXP_4
	j L_OR_EXP_4
L_OR_EXP_4:
	# JUMP L_AND_EXP_6
	j L_AND_EXP_6
L_AND_EXP_6:
	# GT, INT(now[sp-0x10]), 0, INT(tmp_int_1[temp])
	lw $13, -0x10($29)
	sgt $12, $13, 0
	# ASS, INT(tmp_int_1[temp]), INT(tmp_int_2[temp])
	move $14, $12
	# Branch INT(tmp_int_1[temp]) ? AND_8 : AND_END_7
	sw $12, -0x14($29)
	sw $13, -0x10($29)
	sw $14, -0x18($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_8
	j AND_END_7
AND_8:
	# JUMP AND_END_7
	j AND_END_7
AND_END_7:
	# ASS, INT(tmp_int_2[sp-0x18]), INT(tmp_int_3[temp])
	lw $16, -0x18($29)
	move $15, $16
	# Branch INT(tmp_int_3[temp]) ? OR_END_5 : OR_9
	sw $16, -0x18($29)
	sw $15, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_5
	j OR_9
OR_9:
	# JUMP OR_END_5
	j OR_END_5
OR_END_5:
	# Branch INT(tmp_int_3[sp-0x1c]) ? WHILE_BODY_2 : WHILE_END_3
	lw $3, -0x1c($29)
	bne $3, $0, WHILE_BODY_2
	j WHILE_END_3
WHILE_BODY_2:
	# JUMP B_10
	j B_10
B_10:
	# SUB, INT(now[sp-0x10]), 1, INT(tmp_int_4[temp])
	lw $18, -0x10($29)
	addiu $17, $18, -1
	# ASS, INT(tmp_int_4[temp]), INT(now[sp-0x10])
	move $18, $17
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_11
	sw $18, -0x10($29)
	j B_11
B_11:
	# JUMP WHILE_1
	j WHILE_1
WHILE_END_3:
	# JUMP WHILE_12
	j WHILE_12
WHILE_12:
	# JUMP L_OR_EXP_15
	j L_OR_EXP_15
L_OR_EXP_15:
	# JUMP L_AND_EXP_17
	j L_AND_EXP_17
L_AND_EXP_17:
	# LT, INT(c[sp-0xc]), 10000, INT(tmp_int_5[temp])
	lw $20, -0xc($29)
	slti $19, $20, 10000
	# ASS, INT(tmp_int_5[temp]), INT(tmp_int_6[temp])
	move $21, $19
	# Branch INT(tmp_int_5[temp]) ? AND_19 : AND_END_18
	sw $19, -0x20($29)
	sw $20, -0xc($29)
	sw $21, -0x24($29)
	lw $3, -0x20($29)
	bne $3, $0, AND_19
	j AND_END_18
AND_19:
	# JUMP AND_END_18
	j AND_END_18
AND_END_18:
	# ASS, INT(tmp_int_6[sp-0x24]), INT(tmp_int_7[temp])
	lw $23, -0x24($29)
	move $22, $23
	# Branch INT(tmp_int_7[temp]) ? OR_END_16 : OR_20
	sw $22, -0x28($29)
	sw $23, -0x24($29)
	lw $3, -0x28($29)
	bne $3, $0, OR_END_16
	j OR_20
OR_20:
	# JUMP OR_END_16
	j OR_END_16
OR_END_16:
	# Branch INT(tmp_int_7[sp-0x28]) ? WHILE_BODY_13 : WHILE_END_14
	lw $3, -0x28($29)
	bne $3, $0, WHILE_BODY_13
	j WHILE_END_14
WHILE_BODY_13:
	# JUMP B_21
	j B_21
B_21:
	# JUMP L_OR_EXP_22
	j L_OR_EXP_22
	# JUMP B_35
	j B_35
L_OR_EXP_22:
	# JUMP L_AND_EXP_24
	j L_AND_EXP_24
L_AND_EXP_24:
	# LT, INT(c[sp-0xc]), 50, INT(tmp_int_8[temp])
	lw $25, -0xc($29)
	slti $24, $25, 50
	# ASS, INT(tmp_int_8[temp]), INT(tmp_int_9[temp])
	move $26, $24
	# Branch INT(tmp_int_8[temp]) ? AND_26 : AND_END_25
	sw $24, -0x2c($29)
	sw $25, -0xc($29)
	sw $26, -0x30($29)
	lw $3, -0x2c($29)
	bne $3, $0, AND_26
	j AND_END_25
AND_26:
	# JUMP AND_END_25
	j AND_END_25
AND_END_25:
	# ASS, INT(tmp_int_9[sp-0x30]), INT(tmp_int_10[temp])
	lw $5, -0x30($29)
	move $27, $5
	# Branch INT(tmp_int_10[temp]) ? OR_END_23 : OR_27
	sw $5, -0x30($29)
	sw $27, -0x34($29)
	lw $3, -0x34($29)
	bne $3, $0, OR_END_23
	j OR_27
OR_27:
	# JUMP OR_END_23
	j OR_END_23
OR_END_23:
	# Branch INT(tmp_int_10[sp-0x34]) ? IF_BODY_28 : IF_ELSE_30
	lw $3, -0x34($29)
	bne $3, $0, IF_BODY_28
	j IF_ELSE_30
IF_BODY_28:
	# JUMP B_31
	j B_31
B_31:
	# Call FUNC_add; Params: INT(c[sp-0xc]), INT(a[sp-0x4]); RET INT(tmp_int_11[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -56
	lw $3, -0xc($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_add
	addiu $29, $29, 56
	lw $31, 0x0($29)
	move $6, $2
	# ASS, INT(tmp_int_11[temp]), INT(c[sp-0xc])
	move $7, $6
	# JUMP B_32
	sw $7, -0xc($29)
	j B_32
B_32:
	# JUMP IF_END_29
	j IF_END_29
IF_ELSE_30:
	# JUMP B_33
	j B_33
B_33:
	# Call FUNC_add; Params: INT(c[sp-0xc]), INT(b[sp-0x8]); RET INT(tmp_int_12[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -56
	lw $3, -0xc($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_add
	addiu $29, $29, 56
	lw $31, 0x0($29)
	move $8, $2
	# ASS, INT(tmp_int_12[temp]), INT(c[sp-0xc])
	move $9, $8
	# JUMP B_34
	sw $9, -0xc($29)
	j B_34
B_34:
	# JUMP IF_END_29
	j IF_END_29
IF_END_29:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_35
	j B_35
B_35:
	# JUMP WHILE_12
	j WHILE_12
WHILE_END_14:
	# PRINT_INT INT(c[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
