# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "\n"
.text
	la $gp, global
	j FUNC_main
FUNC_main:
	# DEF, INT(n[sp-0x4]), 0
	li $16, 0
	# GETINT INT(n[sp-0x4])
	li $2, 5
	syscall
	move $16, $2
	# DEF, INT(i[sp-0x8]), 19241027
	li $15, 19241027
	# JUMP L_OR_EXP_0
L_OR_EXP_0:
	# JUMP L_AND_EXP_2
L_AND_EXP_2:
	# MOD, INT(tmp_int_0[temp]), INT(n[sp-0x4]), 4
	bltz $16, DIV_1
	andi $17, $16, 3
	j DIV_END_2
DIV_1:
	subu $16, $0, $16
	andi $17, $16, 3
	subu $17, $0, $17
DIV_END_2:
	# EQ, INT(tmp_int_1[temp]), INT(tmp_int_0[temp]), 0
	seq $18, $17, 0
	# ASS, INT(tmp_int_2[temp]), INT(tmp_int_1[temp])
	move $19, $18
	# Branch INT(tmp_int_1[temp]) ? AND_4 : AND_END_3
	sw $18, -0xc($29)
	sw $19, -0x10($29)
	lw $3, -0xc($29)
	bne $3, $0, AND_4
	j AND_END_3
AND_4:
	# JUMP AND_END_3
AND_END_3:
	# ASS, INT(tmp_int_3[temp]), INT(tmp_int_2[sp-0x10])
	lw $20, -0x10($29)
	move $21, $20
	# Branch INT(tmp_int_3[temp]) ? OR_END_1 : OR_5
	sw $21, -0x14($29)
	lw $3, -0x14($29)
	bne $3, $0, OR_END_1
OR_5:
	# JUMP OR_END_1
OR_END_1:
	# Branch INT(tmp_int_3[sp-0x14]) ? IF_BODY_6 : IF_END_7
	lw $3, -0x14($29)
	bne $3, $0, IF_BODY_6
	j IF_END_7
IF_BODY_6:
	# PRINT_INT INT(i[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP IF_END_7
IF_END_7:
	# RETURN 0
	li $2, 10
	syscall
	
