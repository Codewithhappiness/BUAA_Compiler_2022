# Yuelin's Compiler
	
.data
	global:
	0 1 2 3 4 3 4 5 6 7 6 7 8 9 10 9 10 11 12 13 12 13 14 15 16 5 10 15 20 25 0 1 2 3 5 0 5 561 5648 231 546 48651 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
	.space 4
	STR_1: .asciiz "19373330\n"
	STR_2: .asciiz "max of mnpq is "
	STR_3: .asciiz "\n"
	STR_4: .asciiz "i or m ? "
	STR_5: .asciiz "out1 "
	STR_6: .asciiz " out2 "
	STR_7: .asciiz "sum of array var33 is "
	STR_8: .asciiz "squ sum of s3 "
	STR_9: .asciiz "max of four number "
	STR_10: .asciiz "i don t want this\n"
	STR_11: .asciiz "Kirov reporrrting "
	STR_12: .asciiz "For the Union "
	STR_13: .asciiz "okmotherfuckeroveridontwanttobehornyanymoreijustwanttobehappy\n"
.text
	la $gp, global
	j FUNC_main
FUNC_getSqu:
	# MUL, INT(tmp_int_10602[temp]), INT(x[sp-0x4]), INT(x[sp-0x4])
	lw $5, -0x4($29)
	mult $5 $5
	mflo $6
	# RETURN INT(tmp_int_10602[temp])
	move $2, $6
	jr $ra
	
FUNC_set1N3:
	# DEF, INT(i[sp-0x4]), 0
	li $5, 0
	# JUMP WHILE_1
	sw $5, -0x4($29)
WHILE_1:
	# JUMP L_OR_EXP_4
L_OR_EXP_4:
	# JUMP L_AND_EXP_6
L_AND_EXP_6:
	# LT, INT(tmp_int_10603[temp]), INT(i[sp-0x4]), 3
	lw $6, -0x4($29)
	li $3, 3
	slt $7, $6, $3
	# ASS, INT(tmp_int_10604[temp]), INT(tmp_int_10603[temp])
	move $8, $7
	# Branch INT(tmp_int_10603[temp]) ? AND_8 : AND_END_7
	sw $8, -0x8($29)
	sw $7, -0xc($29)
	sw $6, -0x4($29)
	lw $3, -0xc($29)
	bne $3, $0, AND_8
	j AND_END_7
AND_8:
	# JUMP AND_END_7
AND_END_7:
	# ASS, INT(tmp_int_10605[temp]), INT(tmp_int_10604[sp-0x8])
	lw $9, -0x8($29)
	move $10, $9
	# Branch INT(tmp_int_10605[temp]) ? OR_END_5 : OR_9
	sw $10, -0x10($29)
	lw $3, -0x10($29)
	bne $3, $0, OR_END_5
	j OR_9
OR_9:
	# JUMP OR_END_5
OR_END_5:
	# Branch INT(tmp_int_10605[sp-0x10]) ? WHILE_BODY_2 : WHILE_END_3
	lw $3, -0x10($29)
	bne $3, $0, WHILE_BODY_2
	j WHILE_END_3
WHILE_BODY_2:
	# JUMP B_10
B_10:
	# JUMP B_11
	j B_11
	# JUMP B_13
	j B_13
B_11:
	# MUL, INT(tmp_int_10606[temp]), INT(i[sp-0x4]), 4
	lw $11, -0x4($29)
	sll $12, $11, 2
	# ADD, INT(tmp_int_10606[temp]), INT(tmp_int_10606[temp]), 0
	addiu $12, $12, 0
	# OFFSET (ARRAY(n3[data+0x9c])+INT(tmp_int_10606[temp]))->POINTER(tmp_pointer_2732[temp])
	addiu $3, $28, 156
	addu $13, $3, $12
	# STORE POINTER(tmp_pointer_2732[temp]), 1
	li $3, 1
	sw $3, 0x0($13)
	# ADD, INT(tmp_int_10607[temp]), INT(i[sp-0x4]), 1
	addiu $14, $11, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_10607[temp])
	move $11, $14
	# JUMP B_12
	sw $11, -0x4($29)
B_12:
	# JUMP B_13
B_13:
	# JUMP WHILE_1
	j WHILE_1
WHILE_END_3:
	# RETURN VOID
	jr $ra
	
FUNC_getSum:
	# DEF, INT(i[sp-0xc]), 0
	li $5, 0
	# ASS, INT(sum[sp-0x10]), 0
	li $6, 0
	# ASS, INT(j[sp-0x14]), 0
	li $7, 0
	# JUMP WHILE_15
	sw $5, -0xc($29)
	sw $7, -0x14($29)
	sw $6, -0x10($29)
WHILE_15:
	# JUMP L_OR_EXP_18
L_OR_EXP_18:
	# JUMP L_AND_EXP_20
L_AND_EXP_20:
	# LT, INT(tmp_int_10608[temp]), INT(i[sp-0xc]), INT(size0[sp-0x8])
	lw $8, -0xc($29)
	lw $9, -0x8($29)
	slt $10, $8, $9
	# ASS, INT(tmp_int_10609[temp]), INT(tmp_int_10608[temp])
	move $11, $10
	# Branch INT(tmp_int_10608[temp]) ? AND_22 : AND_END_21
	sw $11, -0x18($29)
	sw $8, -0xc($29)
	sw $10, -0x1c($29)
	sw $9, -0x8($29)
	lw $3, -0x1c($29)
	bne $3, $0, AND_22
	j AND_END_21
AND_22:
	# JUMP AND_END_21
AND_END_21:
	# ASS, INT(tmp_int_10610[temp]), INT(tmp_int_10609[sp-0x18])
	lw $12, -0x18($29)
	move $13, $12
	# Branch INT(tmp_int_10610[temp]) ? OR_END_19 : OR_23
	sw $13, -0x20($29)
	lw $3, -0x20($29)
	bne $3, $0, OR_END_19
	j OR_23
OR_23:
	# JUMP OR_END_19
OR_END_19:
	# Branch INT(tmp_int_10610[sp-0x20]) ? WHILE_BODY_16 : WHILE_END_17
	lw $3, -0x20($29)
	bne $3, $0, WHILE_BODY_16
	j WHILE_END_17
WHILE_BODY_16:
	# JUMP B_24
B_24:
	# JUMP WHILE_25
	j WHILE_25
	# JUMP B_36
	j B_36
WHILE_25:
	# JUMP L_OR_EXP_28
L_OR_EXP_28:
	# JUMP L_AND_EXP_30
L_AND_EXP_30:
	# LT, INT(tmp_int_10611[temp]), INT(j[sp-0x14]), 3
	lw $14, -0x14($29)
	li $3, 3
	slt $15, $14, $3
	# ASS, INT(tmp_int_10612[temp]), INT(tmp_int_10611[temp])
	move $16, $15
	# Branch INT(tmp_int_10611[temp]) ? AND_32 : AND_END_31
	sw $15, -0x24($29)
	sw $14, -0x14($29)
	sw $16, -0x28($29)
	lw $3, -0x24($29)
	bne $3, $0, AND_32
	j AND_END_31
AND_32:
	# JUMP AND_END_31
AND_END_31:
	# ASS, INT(tmp_int_10613[temp]), INT(tmp_int_10612[sp-0x28])
	lw $17, -0x28($29)
	move $18, $17
	# Branch INT(tmp_int_10613[temp]) ? OR_END_29 : OR_33
	sw $18, -0x2c($29)
	lw $3, -0x2c($29)
	bne $3, $0, OR_END_29
	j OR_33
OR_33:
	# JUMP OR_END_29
OR_END_29:
	# Branch INT(tmp_int_10613[sp-0x2c]) ? WHILE_BODY_26 : WHILE_END_27
	lw $3, -0x2c($29)
	bne $3, $0, WHILE_BODY_26
	j WHILE_END_27
WHILE_BODY_26:
	# JUMP B_34
B_34:
	# MUL, INT(tmp_int_10615[temp]), INT(j[sp-0x14]), 4
	lw $19, -0x14($29)
	sll $20, $19, 2
	# ADD, INT(tmp_int_10615[temp]), INT(tmp_int_10615[temp]), 0
	addiu $20, $20, 0
	# MUL, INT(tmp_int_10616[temp]), INT(i[sp-0xc]), 12
	lw $21, -0xc($29)
	sll $22, $21, 3
	sll $3, $21, 2
	addu $22, $22, $3
	# ADD, INT(tmp_int_10616[temp]), INT(tmp_int_10616[temp]), INT(tmp_int_10615[temp])
	addu $22, $22, $20
	# OFFSET (ARRAY(n[sp-0x4])+INT(tmp_int_10616[temp]))->POINTER(tmp_pointer_2733[temp])
	lw $3, -0x4($29)
	addu $23, $3, $22
	# LOAD POINTER(tmp_pointer_2733[temp]), INT(tmp_int_10617[temp])
	lw $24, 0x0($23)
	# ADD, INT(tmp_int_10614[temp]), INT(sum[sp-0x10]), INT(tmp_int_10617[temp])
	lw $25, -0x10($29)
	addu $26, $25, $24
	# ASS, INT(sum[sp-0x10]), INT(tmp_int_10614[temp])
	move $25, $26
	# ADD, INT(tmp_int_10618[temp]), INT(j[sp-0x14]), 1
	addiu $27, $19, 1
	# ASS, INT(j[sp-0x14]), INT(tmp_int_10618[temp])
	move $19, $27
	# JUMP B_35
	sw $21, -0xc($29)
	sw $19, -0x14($29)
	sw $25, -0x10($29)
B_35:
	# JUMP WHILE_25
	j WHILE_25
WHILE_END_27:
	# ADD, INT(tmp_int_10619[temp]), INT(i[sp-0xc]), 1
	lw $5, -0xc($29)
	addiu $7, $5, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_10619[temp])
	move $5, $7
	# JUMP B_36
	sw $5, -0xc($29)
B_36:
	# JUMP WHILE_15
	j WHILE_15
WHILE_END_17:
	# NEG, INT(tmp_int_10620[temp]), INT(sum[sp-0x10])
	lw $6, -0x10($29)
	subu $11, $0, $6
	# NEG, INT(tmp_int_10621[temp]), INT(tmp_int_10620[temp])
	subu $8, $0, $11
	# RETURN INT(tmp_int_10621[temp])
	move $2, $8
	jr $ra
	
FUNC_getMax:
	# DEF, INT(max[sp-0x14]), INT(m[sp-0x4])
	lw $5, -0x4($29)
	move $6, $5
	# JUMP L_OR_EXP_38
	sw $5, -0x4($29)
	sw $6, -0x14($29)
L_OR_EXP_38:
	# JUMP L_AND_EXP_40
L_AND_EXP_40:
	# GT, INT(tmp_int_10622[temp]), INT(n[sp-0x8]), INT(max[sp-0x14])
	lw $7, -0x8($29)
	lw $8, -0x14($29)
	sgt $9, $7, $8
	# ASS, INT(tmp_int_10623[temp]), INT(tmp_int_10622[temp])
	move $10, $9
	# Branch INT(tmp_int_10622[temp]) ? AND_42 : AND_END_41
	sw $8, -0x14($29)
	sw $9, -0x18($29)
	sw $7, -0x8($29)
	sw $10, -0x1c($29)
	lw $3, -0x18($29)
	bne $3, $0, AND_42
	j AND_END_41
AND_42:
	# EQ, INT(tmp_int_10624[temp]), 1, 1
	li $11, 1
	# AND, INT(tmp_int_10623[sp-0x1c]), INT(tmp_int_10624[temp]), INT(tmp_int_10623[sp-0x1c])
	lw $12, -0x1c($29)
	sne $2, $11, 0
	sne $3, $12, 0
	and $12, $2, $3
	# Branch INT(tmp_int_10623[sp-0x1c]) ? AND_43 : AND_END_41
	sw $12, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, AND_43
	j AND_END_41
AND_43:
	# AND, INT(tmp_int_10623[sp-0x1c]), 1, INT(tmp_int_10623[sp-0x1c])
	lw $13, -0x1c($29)
	move $13, $13
	# Branch INT(tmp_int_10623[sp-0x1c]) ? AND_44 : AND_END_41
	sw $13, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, AND_44
	j AND_END_41
AND_44:
	# JUMP AND_END_41
AND_END_41:
	# ASS, INT(tmp_int_10625[temp]), INT(tmp_int_10623[sp-0x1c])
	lw $14, -0x1c($29)
	move $15, $14
	# Branch INT(tmp_int_10625[temp]) ? OR_END_39 : OR_45
	sw $15, -0x20($29)
	lw $3, -0x20($29)
	bne $3, $0, OR_END_39
	j OR_45
OR_45:
	# JUMP L_AND_EXP_46
L_AND_EXP_46:
	# NEQ, INT(tmp_int_10626[temp]), 0, 0
	li $16, 0
	# ASS, INT(tmp_int_10627[temp]), INT(tmp_int_10626[temp])
	move $17, $16
	# Branch INT(tmp_int_10626[temp]) ? AND_48 : AND_END_47
	sw $16, -0x24($29)
	sw $17, -0x28($29)
	lw $3, -0x24($29)
	bne $3, $0, AND_48
	j AND_END_47
AND_48:
	# AND, INT(tmp_int_10627[sp-0x28]), 0, INT(tmp_int_10627[sp-0x28])
	lw $18, -0x28($29)
	li $18, 0
	# Branch INT(tmp_int_10627[sp-0x28]) ? AND_49 : AND_END_47
	sw $18, -0x28($29)
	lw $3, -0x28($29)
	bne $3, $0, AND_49
	j AND_END_47
AND_49:
	# JUMP AND_END_47
AND_END_47:
	# OR, INT(tmp_int_10625[sp-0x20]), INT(tmp_int_10627[sp-0x28]), INT(tmp_int_10625[sp-0x20])
	lw $19, -0x28($29)
	lw $20, -0x20($29)
	or $20, $19, $20
	# Branch INT(tmp_int_10625[sp-0x20]) ? OR_END_39 : OR_50
	sw $20, -0x20($29)
	lw $3, -0x20($29)
	bne $3, $0, OR_END_39
	j OR_50
OR_50:
	# JUMP L_AND_EXP_51
L_AND_EXP_51:
	# DIV, INT(tmp_int_10629[temp]), 5438, 2
	li $21, 2719
	# LE, INT(tmp_int_10628[temp]), 114514, INT(tmp_int_10629[temp])
	sge $22, $21, 114514
	# ASS, INT(tmp_int_10630[temp]), INT(tmp_int_10628[temp])
	move $23, $22
	# Branch INT(tmp_int_10628[temp]) ? AND_53 : AND_END_52
	sw $23, -0x2c($29)
	sw $22, -0x30($29)
	lw $3, -0x30($29)
	bne $3, $0, AND_53
	j AND_END_52
AND_53:
	# JUMP AND_END_52
AND_END_52:
	# OR, INT(tmp_int_10625[sp-0x20]), INT(tmp_int_10630[sp-0x2c]), INT(tmp_int_10625[sp-0x20])
	lw $24, -0x2c($29)
	lw $25, -0x20($29)
	or $25, $24, $25
	# Branch INT(tmp_int_10625[sp-0x20]) ? OR_END_39 : OR_54
	sw $25, -0x20($29)
	lw $3, -0x20($29)
	bne $3, $0, OR_END_39
	j OR_54
OR_54:
	# JUMP OR_END_39
OR_END_39:
	# Branch INT(tmp_int_10625[sp-0x20]) ? IF_BODY_55 : IF_END_56
	lw $3, -0x20($29)
	bne $3, $0, IF_BODY_55
	j IF_END_56
IF_BODY_55:
	# JUMP B_57
B_57:
	# ASS, INT(max[sp-0x14]), INT(n[sp-0x8])
	lw $26, -0x8($29)
	move $27, $26
	# JUMP B_58
	sw $27, -0x14($29)
	sw $26, -0x8($29)
B_58:
	# JUMP IF_END_56
IF_END_56:
	# JUMP L_OR_EXP_59
L_OR_EXP_59:
	# JUMP L_AND_EXP_61
L_AND_EXP_61:
	# GT, INT(tmp_int_10631[temp]), INT(p[sp-0xc]), INT(max[sp-0x14])
	lw $5, -0xc($29)
	lw $6, -0x14($29)
	sgt $8, $5, $6
	# ASS, INT(tmp_int_10632[temp]), INT(tmp_int_10631[temp])
	move $9, $8
	# Branch INT(tmp_int_10631[temp]) ? AND_63 : AND_END_62
	sw $6, -0x14($29)
	sw $8, -0x34($29)
	sw $5, -0xc($29)
	sw $9, -0x38($29)
	lw $3, -0x34($29)
	bne $3, $0, AND_63
	j AND_END_62
AND_63:
	# MOD, INT(tmp_int_10634[temp]), 5, 2
	li $7, 1
	# GE, INT(tmp_int_10633[temp]), 3, INT(tmp_int_10634[temp])
	sle $10, $7, 3
	# AND, INT(tmp_int_10632[sp-0x38]), INT(tmp_int_10633[temp]), INT(tmp_int_10632[sp-0x38])
	lw $11, -0x38($29)
	sne $2, $10, 0
	sne $3, $11, 0
	and $11, $2, $3
	# Branch INT(tmp_int_10632[sp-0x38]) ? AND_64 : AND_END_62
	sw $11, -0x38($29)
	lw $3, -0x38($29)
	bne $3, $0, AND_64
	j AND_END_62
AND_64:
	# JUMP AND_END_62
AND_END_62:
	# ASS, INT(tmp_int_10635[temp]), INT(tmp_int_10632[sp-0x38])
	lw $12, -0x38($29)
	move $13, $12
	# Branch INT(tmp_int_10635[temp]) ? OR_END_60 : OR_65
	sw $13, -0x3c($29)
	lw $3, -0x3c($29)
	bne $3, $0, OR_END_60
	j OR_65
OR_65:
	# JUMP L_AND_EXP_66
L_AND_EXP_66:
	# MUL, INT(tmp_int_10637[temp]), 2, 52
	li $14, 104
	# ADD, INT(tmp_int_10636[temp]), 1, INT(tmp_int_10637[temp])
	addiu $15, $14, 1
	# NOT, INT(tmp_int_10638[temp]), INT(tmp_int_10636[temp])
	seq $16, $0, $15
	# ASS, INT(tmp_int_10639[temp]), INT(tmp_int_10638[temp])
	move $17, $16
	# Branch INT(tmp_int_10638[temp]) ? AND_68 : AND_END_67
	sw $16, -0x40($29)
	sw $17, -0x44($29)
	lw $3, -0x40($29)
	bne $3, $0, AND_68
	j AND_END_67
AND_68:
	# JUMP AND_END_67
AND_END_67:
	# OR, INT(tmp_int_10635[sp-0x3c]), INT(tmp_int_10639[sp-0x44]), INT(tmp_int_10635[sp-0x3c])
	lw $18, -0x44($29)
	lw $19, -0x3c($29)
	or $19, $18, $19
	# Branch INT(tmp_int_10635[sp-0x3c]) ? OR_END_60 : OR_69
	sw $19, -0x3c($29)
	lw $3, -0x3c($29)
	bne $3, $0, OR_END_60
	j OR_69
OR_69:
	# JUMP OR_END_60
OR_END_60:
	# Branch INT(tmp_int_10635[sp-0x3c]) ? IF_BODY_70 : IF_ELSE_72
	lw $3, -0x3c($29)
	bne $3, $0, IF_BODY_70
	j IF_ELSE_72
IF_BODY_70:
	# JUMP B_73
B_73:
	# ASS, INT(max[sp-0x14]), INT(p[sp-0xc])
	lw $20, -0xc($29)
	move $21, $20
	# JUMP B_74
	sw $21, -0x14($29)
	sw $20, -0xc($29)
B_74:
	# JUMP IF_END_71
	j IF_END_71
IF_ELSE_72:
	# ASS, INT(max[sp-0x14]), INT(max[sp-0x14])
	lw $23, -0x14($29)
	move $23, $23
	# JUMP IF_END_71
	sw $23, -0x14($29)
IF_END_71:
	# JUMP L_OR_EXP_75
L_OR_EXP_75:
	# JUMP L_AND_EXP_77
L_AND_EXP_77:
	# GT, INT(tmp_int_10640[temp]), INT(q[sp-0x10]), INT(max[sp-0x14])
	lw $22, -0x10($29)
	lw $24, -0x14($29)
	sgt $25, $22, $24
	# ASS, INT(tmp_int_10641[temp]), INT(tmp_int_10640[temp])
	move $27, $25
	# Branch INT(tmp_int_10640[temp]) ? AND_79 : AND_END_78
	sw $25, -0x48($29)
	sw $24, -0x14($29)
	sw $27, -0x4c($29)
	sw $22, -0x10($29)
	lw $3, -0x48($29)
	bne $3, $0, AND_79
	j AND_END_78
AND_79:
	# JUMP AND_END_78
AND_END_78:
	# ASS, INT(tmp_int_10642[temp]), INT(tmp_int_10641[sp-0x4c])
	lw $26, -0x4c($29)
	move $6, $26
	# Branch INT(tmp_int_10642[temp]) ? OR_END_76 : OR_80
	sw $6, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_76
	j OR_80
OR_80:
	# JUMP L_AND_EXP_81
L_AND_EXP_81:
	# ASS, INT(tmp_int_10643[temp]), 0
	li $8, 0
	# Branch 0 ? AND_83 : AND_END_82
	sw $8, -0x54($29)
	li $3, 0
	bne $3, $0, AND_83
	j AND_END_82
AND_83:
	# JUMP AND_END_82
AND_END_82:
	# OR, INT(tmp_int_10642[sp-0x50]), INT(tmp_int_10643[sp-0x54]), INT(tmp_int_10642[sp-0x50])
	lw $5, -0x54($29)
	lw $9, -0x50($29)
	or $9, $5, $9
	# Branch INT(tmp_int_10642[sp-0x50]) ? OR_END_76 : OR_84
	sw $9, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_76
	j OR_84
OR_84:
	# JUMP L_AND_EXP_85
L_AND_EXP_85:
	# EQ, INT(tmp_int_10644[temp]), INT(max[sp-0x14]), INT(max[sp-0x14])
	lw $7, -0x14($29)
	seq $10, $7, $7
	# ASS, INT(tmp_int_10645[temp]), INT(tmp_int_10644[temp])
	move $11, $10
	# Branch INT(tmp_int_10644[temp]) ? AND_87 : AND_END_86
	sw $7, -0x14($29)
	sw $11, -0x58($29)
	sw $10, -0x5c($29)
	lw $3, -0x5c($29)
	bne $3, $0, AND_87
	j AND_END_86
AND_87:
	# NEG, INT(tmp_int_10647[temp]), INT(max[sp-0x14])
	lw $12, -0x14($29)
	subu $13, $0, $12
	# EQ, INT(tmp_int_10646[temp]), INT(max[sp-0x14]), INT(tmp_int_10647[temp])
	seq $14, $12, $13
	# AND, INT(tmp_int_10645[sp-0x58]), INT(tmp_int_10646[temp]), INT(tmp_int_10645[sp-0x58])
	lw $15, -0x58($29)
	sne $2, $14, 0
	sne $3, $15, 0
	and $15, $2, $3
	# Branch INT(tmp_int_10645[sp-0x58]) ? AND_88 : AND_END_86
	sw $12, -0x14($29)
	sw $15, -0x58($29)
	lw $3, -0x58($29)
	bne $3, $0, AND_88
	j AND_END_86
AND_88:
	# AND, INT(tmp_int_10645[sp-0x58]), 0, INT(tmp_int_10645[sp-0x58])
	lw $16, -0x58($29)
	li $16, 0
	# Branch INT(tmp_int_10645[sp-0x58]) ? AND_89 : AND_END_86
	sw $16, -0x58($29)
	lw $3, -0x58($29)
	bne $3, $0, AND_89
	j AND_END_86
AND_89:
	# JUMP AND_END_86
AND_END_86:
	# OR, INT(tmp_int_10642[sp-0x50]), INT(tmp_int_10645[sp-0x58]), INT(tmp_int_10642[sp-0x50])
	lw $17, -0x58($29)
	lw $18, -0x50($29)
	or $18, $17, $18
	# Branch INT(tmp_int_10642[sp-0x50]) ? OR_END_76 : OR_90
	sw $18, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_76
	j OR_90
OR_90:
	# JUMP L_AND_EXP_91
L_AND_EXP_91:
	# ADD, INT(tmp_int_10648[temp]), 1, 1
	li $19, 2
	# SUB, INT(tmp_int_10650[temp]), 23, 1
	li $21, 22
	# GT, INT(tmp_int_10649[temp]), INT(tmp_int_10648[temp]), INT(tmp_int_10650[temp])
	sgt $20, $19, $21
	# ASS, INT(tmp_int_10651[temp]), INT(tmp_int_10649[temp])
	move $23, $20
	# Branch INT(tmp_int_10649[temp]) ? AND_93 : AND_END_92
	sw $23, -0x60($29)
	sw $20, -0x64($29)
	lw $3, -0x64($29)
	bne $3, $0, AND_93
	j AND_END_92
AND_93:
	# JUMP AND_END_92
AND_END_92:
	# OR, INT(tmp_int_10642[sp-0x50]), INT(tmp_int_10651[sp-0x60]), INT(tmp_int_10642[sp-0x50])
	lw $25, -0x60($29)
	lw $24, -0x50($29)
	or $24, $25, $24
	# Branch INT(tmp_int_10642[sp-0x50]) ? OR_END_76 : OR_94
	sw $24, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_76
	j OR_94
OR_94:
	# JUMP OR_END_76
OR_END_76:
	# Branch INT(tmp_int_10642[sp-0x50]) ? IF_BODY_95 : IF_END_96
	lw $3, -0x50($29)
	bne $3, $0, IF_BODY_95
	j IF_END_96
IF_BODY_95:
	# JUMP B_97
B_97:
	# ASS, INT(max[sp-0x14]), INT(q[sp-0x10])
	lw $27, -0x10($29)
	move $22, $27
	# JUMP B_98
	sw $22, -0x14($29)
	sw $27, -0x10($29)
B_98:
	# JUMP IF_END_96
IF_END_96:
	# RETURN INT(max[sp-0x14])
	lw $2, -0x14($29)
	jr $ra
	
FUNC_getSquSum:
	# DEF, INT(i[sp-0xc]), 0
	li $5, 0
	# DEF, INT(sum[sp-0x10]), 0
	li $6, 0
	# JUMP WHILE_100
	sw $5, -0xc($29)
	sw $6, -0x10($29)
WHILE_100:
	# JUMP L_OR_EXP_103
L_OR_EXP_103:
	# JUMP L_AND_EXP_105
L_AND_EXP_105:
	# LT, INT(tmp_int_10652[temp]), INT(i[sp-0xc]), INT(size[sp-0x8])
	lw $7, -0xc($29)
	lw $8, -0x8($29)
	slt $9, $7, $8
	# ASS, INT(tmp_int_10653[temp]), INT(tmp_int_10652[temp])
	move $10, $9
	# Branch INT(tmp_int_10652[temp]) ? AND_107 : AND_END_106
	sw $8, -0x8($29)
	sw $9, -0x14($29)
	sw $10, -0x18($29)
	sw $7, -0xc($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_107
	j AND_END_106
AND_107:
	# JUMP AND_END_106
AND_END_106:
	# ASS, INT(tmp_int_10654[temp]), INT(tmp_int_10653[sp-0x18])
	lw $11, -0x18($29)
	move $12, $11
	# Branch INT(tmp_int_10654[temp]) ? OR_END_104 : OR_108
	sw $12, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_104
	j OR_108
OR_108:
	# JUMP OR_END_104
OR_END_104:
	# Branch INT(tmp_int_10654[sp-0x1c]) ? WHILE_BODY_101 : WHILE_END_102
	lw $3, -0x1c($29)
	bne $3, $0, WHILE_BODY_101
	j WHILE_END_102
WHILE_BODY_101:
	# JUMP B_109
B_109:
	# MUL, INT(tmp_int_10656[temp]), INT(i[sp-0xc]), 4
	lw $13, -0xc($29)
	sll $14, $13, 2
	# ADD, INT(tmp_int_10656[temp]), INT(tmp_int_10656[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(x[sp-0x4])+INT(tmp_int_10656[temp]))->POINTER(tmp_pointer_2734[temp])
	lw $3, -0x4($29)
	addu $15, $3, $14
	# LOAD POINTER(tmp_pointer_2734[temp]), INT(tmp_int_10657[temp])
	lw $16, 0x0($15)
	# Call FUNC_getSqu; Params: INT(tmp_int_10657[temp]); RET INT(tmp_int_10658[temp])
	sw $16, -0x20($29)
	sw $13, -0xc($29)
	sw $31, 0x0($29)
	addiu $4, $29, -36
	lw $3, -0x20($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_getSqu
	addiu $29, $29, 36
	lw $31, 0x0($29)
	move $17, $2
	# ADD, INT(tmp_int_10655[temp]), INT(sum[sp-0x10]), INT(tmp_int_10658[temp])
	lw $18, -0x10($29)
	addu $19, $18, $17
	# ASS, INT(sum[sp-0x10]), INT(tmp_int_10655[temp])
	move $18, $19
	# ADD, INT(tmp_int_10659[temp]), INT(i[sp-0xc]), 1
	lw $20, -0xc($29)
	addiu $21, $20, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_10659[temp])
	move $20, $21
	# JUMP B_110
	sw $20, -0xc($29)
	sw $18, -0x10($29)
B_110:
	# JUMP WHILE_100
	j WHILE_100
WHILE_END_102:
	# RETURN INT(sum[sp-0x10])
	lw $2, -0x10($29)
	jr $ra
	
FUNC_main:
	# DEF, INT(constInMain[sp-0x4]), 1
	li $5, 1
	# GETINT INT(m[sp-0x8])
	li $2, 5
	syscall
	move $6, $2
	# GETINT INT(n[sp-0xc])
	li $2, 5
	syscall
	move $7, $2
	# GETINT INT(p[sp-0x10])
	li $2, 5
	syscall
	move $8, $2
	# GETINT INT(q[sp-0x14])
	li $2, 5
	syscall
	move $9, $2
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# DEF, INT(i[sp-0x18]), 0
	li $10, 0
	# Call FUNC_getMax; Params: INT(m[sp-0x8]), INT(n[sp-0xc]), INT(p[sp-0x10]), INT(q[sp-0x14]); RET INT(tmp_int_10660[temp])
	sw $7, -0xc($29)
	sw $6, -0x8($29)
	sw $9, -0x14($29)
	sw $5, -0x4($29)
	sw $8, -0x10($29)
	sw $10, -0x18($29)
	sw $31, 0x0($29)
	addiu $4, $29, -60
	lw $3, -0x8($29)
	sw $3, -0x4($4)
	lw $3, -0xc($29)
	sw $3, -0x8($4)
	lw $3, -0x10($29)
	sw $3, -0xc($4)
	lw $3, -0x14($29)
	sw $3, -0x10($4)
	move $29, $4
	jal FUNC_getMax
	addiu $29, $29, 60
	lw $31, 0x0($29)
	move $11, $2
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(tmp_int_10660[temp])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# Call FUNC_getMax; Params: INT(m[sp-0x8]), INT(n[sp-0xc]), INT(p[sp-0x10]), INT(q[sp-0x14]); RET INT(tmp_int_10661[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -60
	lw $3, -0x8($29)
	sw $3, -0x4($4)
	lw $3, -0xc($29)
	sw $3, -0x8($4)
	lw $3, -0x10($29)
	sw $3, -0xc($4)
	lw $3, -0x14($29)
	sw $3, -0x10($4)
	move $29, $4
	jal FUNC_getMax
	addiu $29, $29, 60
	lw $31, 0x0($29)
	move $12, $2
	# Call FUNC_set1N3; Params: 
	sw $12, -0x3c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -64
	move $29, $4
	jal FUNC_set1N3
	addiu $29, $29, 64
	lw $31, 0x0($29)
	# JUMP B_112
B_112:
	# JUMP B_113
	j B_113
	# JUMP B_126
	j B_126
B_113:
	# JUMP WHILE_114
	j WHILE_114
	# JUMP B_125
	j B_125
WHILE_114:
	# JUMP L_OR_EXP_117
L_OR_EXP_117:
	# JUMP L_AND_EXP_119
L_AND_EXP_119:
	# LT, INT(tmp_int_10662[temp]), INT(i[sp-0x18]), INT(m[sp-0x8])
	lw $13, -0x18($29)
	lw $14, -0x8($29)
	slt $15, $13, $14
	# ASS, INT(tmp_int_10663[temp]), INT(tmp_int_10662[temp])
	move $16, $15
	# Branch INT(tmp_int_10662[temp]) ? AND_121 : AND_END_120
	sw $14, -0x8($29)
	sw $13, -0x18($29)
	sw $15, -0x40($29)
	sw $16, -0x44($29)
	lw $3, -0x40($29)
	bne $3, $0, AND_121
	j AND_END_120
AND_121:
	# JUMP AND_END_120
AND_END_120:
	# ASS, INT(tmp_int_10664[temp]), INT(tmp_int_10663[sp-0x44])
	lw $17, -0x44($29)
	move $18, $17
	# Branch INT(tmp_int_10664[temp]) ? OR_END_118 : OR_122
	sw $18, -0x48($29)
	lw $3, -0x48($29)
	bne $3, $0, OR_END_118
	j OR_122
OR_122:
	# JUMP OR_END_118
OR_END_118:
	# Branch INT(tmp_int_10664[sp-0x48]) ? WHILE_BODY_115 : WHILE_END_116
	lw $3, -0x48($29)
	bne $3, $0, WHILE_BODY_115
	j WHILE_END_116
WHILE_BODY_115:
	# JUMP B_123
B_123:
	# ADD, INT(tmp_int_10665[temp]), INT(i[sp-0x18]), 1
	lw $19, -0x18($29)
	addiu $20, $19, 1
	# ASS, INT(i[sp-0x18]), INT(tmp_int_10665[temp])
	move $19, $20
	# JUMP WHILE_END_116
	sw $19, -0x18($29)
	j WHILE_END_116
	# JUMP B_124
B_124:
	# JUMP WHILE_114
	j WHILE_114
WHILE_END_116:
	# NEG, INT(tmp_int_10666[temp]), 114514
	li $21, -114514
	# Call FUNC_getMax; Params: INT(i[sp-0x18]), INT(n[sp-0xc]), 0, INT(tmp_int_10666[temp]); RET INT(tmp_int_10667[temp])
	sw $21, -0x4c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -80
	lw $3, -0x18($29)
	sw $3, -0x4($4)
	lw $3, -0xc($29)
	sw $3, -0x8($4)
	li $3, 0
	sw $3, -0xc($4)
	lw $3, -0x4c($29)
	sw $3, -0x10($4)
	move $29, $4
	jal FUNC_getMax
	addiu $29, $29, 80
	lw $31, 0x0($29)
	move $22, $2
	# DEF, INT(out1[sp-0x24]), INT(tmp_int_10667[temp])
	move $23, $22
	# ASS, INT(temp[sp-0x20]), INT(out1[sp-0x24])
	move $24, $23
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(out1[sp-0x24])
	li $2, 1
	move $4, $23
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_125
	sw $23, -0x24($29)
	sw $24, -0x20($29)
B_125:
	# JUMP B_126
B_126:
	# DEF, INT(out2[sp-0x28]), 0
	li $25, 0
	# SUB, INT(tmp_int_10668[temp]), 54482261, 444561
	li $26, 54037700
	# MUL, INT(tmp_int_10669[temp]), INT(tmp_int_10668[temp]), 0
	li $27, 0
	# DIV, INT(tmp_int_10670[temp]), INT(tmp_int_10669[temp]), 521135
	bltz $27, DIV_441
	li $7, 2160476473
	multu $7 $27
	mfhi $7
	srl $7, $7, 18
	j DIV_END_442
DIV_441:
	subu $27, $0, $27
	li $7, 2160476473
	multu $7 $27
	mfhi $7
	srl $7, $7, 18
	subu $7, $0, $7
DIV_END_442:
	# MOD, INT(tmp_int_10671[temp]), INT(tmp_int_10670[temp]), 6371
	bltz $7, DIV_443
	li $6, 2761291170
	multu $6 $7
	mfhi $6
	srl $6, $6, 12
	li $3, 6371
	mult $6 $3
	mflo $2
	subu $6, $7, $2
	j DIV_END_444
DIV_443:
	subu $7, $0, $7
	li $6, 2761291170
	multu $6 $7
	mfhi $6
	srl $6, $6, 12
	li $3, 6371
	mult $6 $3
	mflo $2
	subu $6, $7, $2
	subu $6, $0, $6
DIV_END_444:
	# ASS, INT(i[sp-0x18]), INT(tmp_int_10671[temp])
	move $9, $6
	# JUMP WHILE_127
	sw $9, -0x18($29)
	sw $25, -0x28($29)
WHILE_127:
	# JUMP L_OR_EXP_130
L_OR_EXP_130:
	# JUMP L_AND_EXP_132
L_AND_EXP_132:
	# LT, INT(tmp_int_10672[temp]), INT(i[sp-0x18]), 3
	lw $5, -0x18($29)
	li $3, 3
	slt $8, $5, $3
	# ASS, INT(tmp_int_10673[temp]), INT(tmp_int_10672[temp])
	move $10, $8
	# Branch INT(tmp_int_10672[temp]) ? AND_134 : AND_END_133
	sw $10, -0x50($29)
	sw $5, -0x18($29)
	sw $8, -0x54($29)
	lw $3, -0x54($29)
	bne $3, $0, AND_134
	j AND_END_133
AND_134:
	# JUMP AND_END_133
AND_END_133:
	# ASS, INT(tmp_int_10674[temp]), INT(tmp_int_10673[sp-0x50])
	lw $11, -0x50($29)
	move $12, $11
	# Branch INT(tmp_int_10674[temp]) ? OR_END_131 : OR_135
	sw $12, -0x58($29)
	lw $3, -0x58($29)
	bne $3, $0, OR_END_131
	j OR_135
OR_135:
	# JUMP OR_END_131
OR_END_131:
	# Branch INT(tmp_int_10674[sp-0x58]) ? WHILE_BODY_128 : WHILE_END_129
	lw $3, -0x58($29)
	bne $3, $0, WHILE_BODY_128
	j WHILE_END_129
WHILE_BODY_128:
	# JUMP B_136
B_136:
	# ADD, INT(tmp_int_10675[temp]), INT(i[sp-0x18]), 1
	lw $14, -0x18($29)
	addiu $13, $14, 1
	# ASS, INT(i[sp-0x18]), INT(tmp_int_10675[temp])
	move $14, $13
	# JUMP L_OR_EXP_137
	sw $14, -0x18($29)
	j L_OR_EXP_137
	# JUMP B_146
	j B_146
L_OR_EXP_137:
	# JUMP L_AND_EXP_139
L_AND_EXP_139:
	# GT, INT(tmp_int_10676[temp]), INT(i[sp-0x18]), 2
	lw $15, -0x18($29)
	sgt $16, $15, 2
	# ASS, INT(tmp_int_10677[temp]), INT(tmp_int_10676[temp])
	move $17, $16
	# Branch INT(tmp_int_10676[temp]) ? AND_141 : AND_END_140
	sw $17, -0x5c($29)
	sw $16, -0x60($29)
	sw $15, -0x18($29)
	lw $3, -0x60($29)
	bne $3, $0, AND_141
	j AND_END_140
AND_141:
	# JUMP AND_END_140
AND_END_140:
	# ASS, INT(tmp_int_10678[temp]), INT(tmp_int_10677[sp-0x5c])
	lw $18, -0x5c($29)
	move $20, $18
	# Branch INT(tmp_int_10678[temp]) ? OR_END_138 : OR_142
	sw $20, -0x64($29)
	lw $3, -0x64($29)
	bne $3, $0, OR_END_138
	j OR_142
OR_142:
	# JUMP OR_END_138
OR_END_138:
	# Branch INT(tmp_int_10678[sp-0x64]) ? IF_BODY_143 : IF_ELSE_145
	lw $3, -0x64($29)
	bne $3, $0, IF_BODY_143
	j IF_ELSE_145
IF_BODY_143:
	# JUMP WHILE_127
	j WHILE_127
	# JUMP IF_END_144
	j IF_END_144
IF_ELSE_145:
	# MUL, INT(tmp_int_10680[temp]), INT(i[sp-0x18]), 4
	lw $19, -0x18($29)
	sll $21, $19, 2
	# ADD, INT(tmp_int_10680[temp]), INT(tmp_int_10680[temp]), 0
	addiu $21, $21, 0
	# OFFSET (ARRAY(n3[data+0x9c])+INT(tmp_int_10680[temp]))->POINTER(tmp_pointer_2735[temp])
	addiu $3, $28, 156
	addu $22, $3, $21
	# LOAD POINTER(tmp_pointer_2735[temp]), INT(tmp_int_10681[temp])
	lw $23, 0x0($22)
	# MUL, INT(tmp_int_10682[temp]), INT(tmp_int_10681[temp]), 8
	sll $24, $23, 3
	# ADD, INT(tmp_int_10679[temp]), INT(out2[sp-0x28]), INT(tmp_int_10682[temp])
	lw $26, -0x28($29)
	addu $27, $26, $24
	# SUB, INT(tmp_int_10683[temp]), INT(tmp_int_10679[temp]), 0
	addiu $7, $27, 0
	# ASS, INT(out2[sp-0x28]), INT(tmp_int_10683[temp])
	move $26, $7
	# JUMP IF_END_144
	sw $19, -0x18($29)
	sw $26, -0x28($29)
IF_END_144:
	# ADD, INT(tmp_int_10684[temp]), INT(out2[sp-0x28]), 114514
	lw $6, -0x28($29)
	addiu $9, $6, 114514
	# ASS, INT(out2[sp-0x28]), INT(tmp_int_10684[temp])
	move $6, $9
	# JUMP B_146
	sw $6, -0x28($29)
B_146:
	# JUMP WHILE_127
	j WHILE_127
WHILE_END_129:
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# PRINT_INT INT(temp[sp-0x20])
	li $2, 1
	lw $4, -0x20($29)
	syscall
	# PRINT_STR STR_6
	li $2, 4
	la $4, STR_6
	syscall
	# PRINT_INT INT(out2[sp-0x28])
	li $2, 1
	lw $4, -0x28($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# MUL, INT(tmp_int_10685[temp]), 0, 4
	li $25, 0
	# ADD, INT(tmp_int_10685[temp]), INT(tmp_int_10685[temp]), 0
	addiu $25, $25, 0
	# MUL, INT(tmp_int_10686[temp]), 0, 12
	li $10, 0
	# ADD, INT(tmp_int_10686[temp]), INT(tmp_int_10686[temp]), INT(tmp_int_10685[temp])
	addu $10, $10, $25
	# OFFSET (ARRAY(var33[data+0xbc])+INT(tmp_int_10686[temp]))->POINTER(tmp_pointer_2736[temp])
	addiu $3, $28, 188
	addu $5, $3, $10
	# MUL, INT(tmp_int_10687[temp]), 9, 8
	li $8, 72
	# DIV, INT(tmp_int_10688[temp]), INT(tmp_int_10687[temp]), 7
	bltz $8, DIV_445
	li $11, 2454267026
	multu $11 $8
	mfhi $11
	srl $11, $11, 2
	j DIV_END_446
DIV_445:
	subu $8, $0, $8
	li $11, 2454267026
	multu $11 $8
	mfhi $11
	srl $11, $11, 2
	subu $11, $0, $11
DIV_END_446:
	# SUB, INT(tmp_int_10689[temp]), INT(tmp_int_10688[temp]), 6
	addiu $12, $11, -6
	# MOD, INT(tmp_int_10691[temp]), 5, 4
	li $13, 1
	# ADD, INT(tmp_int_10690[temp]), INT(tmp_int_10689[temp]), INT(tmp_int_10691[temp])
	addu $14, $12, $13
	# STORE POINTER(tmp_pointer_2736[temp]), INT(tmp_int_10690[temp])
	sw $14, 0x0($5)
	# MUL, INT(tmp_int_10692[temp]), 1, 4
	li $17, 4
	# ADD, INT(tmp_int_10692[temp]), INT(tmp_int_10692[temp]), 0
	addiu $17, $17, 0
	# MUL, INT(tmp_int_10693[temp]), 0, 12
	li $16, 0
	# ADD, INT(tmp_int_10693[temp]), INT(tmp_int_10693[temp]), INT(tmp_int_10692[temp])
	addu $16, $16, $17
	# OFFSET (ARRAY(var33[data+0xbc])+INT(tmp_int_10693[temp]))->POINTER(tmp_pointer_2737[temp])
	addiu $3, $28, 188
	addu $15, $3, $16
	# DIV, INT(tmp_int_10695[temp]), 5, 2
	li $18, 2
	# MUL, INT(tmp_int_10698[temp]), 2, 5
	li $20, 10
	# MOD, INT(tmp_int_10699[temp]), INT(tmp_int_10698[temp]), 4
	bltz $20, DIV_447
	andi $21, $20, 3
	j DIV_END_448
DIV_447:
	subu $20, $0, $20
	andi $21, $20, 3
	subu $21, $0, $21
DIV_END_448:
	# SUB, INT(tmp_int_10697[temp]), 6, INT(tmp_int_10699[temp])
	subu $3, $0, $21
	addiu $22, $3, 6
	# MUL, INT(tmp_int_10696[temp]), INT(tmp_int_10695[temp]), INT(tmp_int_10697[temp])
	mult $18 $22
	mflo $23
	# ADD, INT(tmp_int_10694[temp]), 1, INT(tmp_int_10696[temp])
	addiu $24, $23, 1
	# MUL, INT(tmp_int_10701[temp]), 5, 4
	li $27, 20
	# SUB, INT(tmp_int_10700[temp]), INT(tmp_int_10694[temp]), INT(tmp_int_10701[temp])
	subu $7, $24, $27
	# STORE POINTER(tmp_pointer_2737[temp]), INT(tmp_int_10700[temp])
	sw $7, 0x0($15)
	# MUL, INT(tmp_int_10702[temp]), 2, 4
	li $19, 8
	# ADD, INT(tmp_int_10702[temp]), INT(tmp_int_10702[temp]), 0
	addiu $19, $19, 0
	# MUL, INT(tmp_int_10703[temp]), 0, 12
	li $26, 0
	# ADD, INT(tmp_int_10703[temp]), INT(tmp_int_10703[temp]), INT(tmp_int_10702[temp])
	addu $26, $26, $19
	# OFFSET (ARRAY(var33[data+0xbc])+INT(tmp_int_10703[temp]))->POINTER(tmp_pointer_2738[temp])
	addiu $3, $28, 188
	addu $9, $3, $26
	# Call FUNC_getMax; Params: 1, 2, 3, 4; RET INT(tmp_int_10704[temp])
	sw $9, -0x68($29)
	sw $31, 0x0($29)
	addiu $4, $29, -108
	li $3, 1
	sw $3, -0x4($4)
	li $3, 2
	sw $3, -0x8($4)
	li $3, 3
	sw $3, -0xc($4)
	li $3, 4
	sw $3, -0x10($4)
	move $29, $4
	jal FUNC_getMax
	addiu $29, $29, 108
	lw $31, 0x0($29)
	move $6, $2
	# MUL, INT(tmp_int_10706[temp]), 0, 4
	li $25, 0
	# ADD, INT(tmp_int_10706[temp]), INT(tmp_int_10706[temp]), 0
	addiu $25, $25, 0
	# MUL, INT(tmp_int_10707[temp]), 0, 12
	li $10, 0
	# ADD, INT(tmp_int_10707[temp]), INT(tmp_int_10707[temp]), INT(tmp_int_10706[temp])
	addu $10, $10, $25
	# OFFSET (ARRAY(var33[data+0xbc])+INT(tmp_int_10707[temp]))->POINTER(tmp_pointer_2739[temp])
	addiu $3, $28, 188
	addu $8, $3, $10
	# LOAD POINTER(tmp_pointer_2739[temp]), INT(tmp_int_10708[temp])
	lw $11, 0x0($8)
	# DIV, INT(tmp_int_10710[temp]), 5, 6
	li $12, 0
	# SUB, INT(tmp_int_10709[temp]), INT(tmp_int_10708[temp]), INT(tmp_int_10710[temp])
	subu $13, $11, $12
	# ADD, INT(tmp_int_10705[temp]), INT(tmp_int_10704[temp]), INT(tmp_int_10709[temp])
	addu $5, $6, $13
	# MOD, INT(tmp_int_10712[temp]), 648648, 2
	li $14, 0
	# ADD, INT(tmp_int_10711[temp]), INT(tmp_int_10705[temp]), INT(tmp_int_10712[temp])
	addu $17, $5, $14
	# ADD, INT(tmp_int_10714[temp]), INT(m[sp-0x8]), INT(n[sp-0xc])
	lw $16, -0x8($29)
	lw $20, -0xc($29)
	addu $21, $16, $20
	# MUL, INT(tmp_int_10716[temp]), 2, 1
	li $18, 2
	# SUB, INT(tmp_int_10715[temp]), INT(tmp_int_10714[temp]), INT(tmp_int_10716[temp])
	subu $22, $21, $18
	# ADD, INT(tmp_int_10717[temp]), INT(tmp_int_10715[temp]), 44
	addiu $23, $22, 44
	# ADD, INT(tmp_int_10719[temp]), 0, 0
	li $24, 0
	# SUB, INT(tmp_int_10718[temp]), INT(tmp_int_10717[temp]), INT(tmp_int_10719[temp])
	subu $27, $23, $24
	# MUL, INT(tmp_int_10713[temp]), INT(tmp_int_10711[temp]), INT(tmp_int_10718[temp])
	mult $17 $27
	mflo $15
	# STORE POINTER(tmp_pointer_2738[sp-0x68]), INT(tmp_int_10713[temp])
	lw $7, -0x68($29)
	sw $15, 0x0($7)
	# MUL, INT(tmp_int_10720[temp]), 0, 4
	li $19, 0
	# ADD, INT(tmp_int_10720[temp]), INT(tmp_int_10720[temp]), 0
	addiu $19, $19, 0
	# MUL, INT(tmp_int_10721[temp]), 1, 12
	li $26, 12
	# ADD, INT(tmp_int_10721[temp]), INT(tmp_int_10721[temp]), INT(tmp_int_10720[temp])
	addu $26, $26, $19
	# OFFSET (ARRAY(var33[data+0xbc])+INT(tmp_int_10721[temp]))->POINTER(tmp_pointer_2740[temp])
	addiu $3, $28, 188
	addu $9, $3, $26
	# ADD, INT(tmp_int_10722[temp]), 114514, INT(zero[data+0x78])
	lw $25, 0x78($28)
	addiu $10, $25, 114514
	# MUL, INT(tmp_int_10724[temp]), INT(zero[data+0x78]), INT(zero[data+0x78])
	mult $25 $25
	mflo $8
	# SUB, INT(tmp_int_10723[temp]), INT(tmp_int_10722[temp]), INT(tmp_int_10724[temp])
	subu $11, $10, $8
	# STORE POINTER(tmp_pointer_2740[temp]), INT(tmp_int_10723[temp])
	sw $11, 0x0($9)
	# OFFSET (ARRAY(var33[data+0xbc])+0)->POINTER(tmp_pointer_2741[temp])
	addiu $12, $28, 188
	# Call FUNC_getSum; Params: POINTER(tmp_pointer_2741[temp]), 3; RET INT(tmp_int_10725[temp])
	sw $25, 0x78($28)
	sw $12, -0x6c($29)
	sw $20, -0xc($29)
	sw $16, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -112
	lw $3, -0x6c($29)
	sw $3, -0x4($4)
	li $3, 3
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_getSum
	addiu $29, $29, 112
	lw $31, 0x0($29)
	move $6, $2
	# DEF, INT(sumVar33[sp-0x2c]), INT(tmp_int_10725[temp])
	move $13, $6
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# PRINT_INT INT(sumVar33[sp-0x2c])
	li $2, 1
	move $4, $13
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# OFFSET (ARRAY(n3[data+0x9c])+0)->POINTER(tmp_pointer_2742[temp])
	addiu $5, $28, 156
	# Call FUNC_getSquSum; Params: POINTER(tmp_pointer_2742[temp]), 3; RET INT(tmp_int_10726[temp])
	sw $5, -0x70($29)
	sw $13, -0x2c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -116
	lw $3, -0x70($29)
	sw $3, -0x4($4)
	li $3, 3
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_getSquSum
	addiu $29, $29, 116
	lw $31, 0x0($29)
	move $14, $2
	# ASS, INT(out3[sp-0x30]), INT(tmp_int_10726[temp])
	move $21, $14
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# PRINT_INT INT(out3[sp-0x30])
	li $2, 1
	move $4, $21
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# ADD, INT(tmp_int_10727[temp]), INT(out3[sp-0x30]), INT(constInMain[sp-0x4])
	lw $18, -0x4($29)
	addu $22, $21, $18
	# OFFSET (ARRAY(n3[data+0x9c])+0)->POINTER(tmp_pointer_2743[temp])
	addiu $23, $28, 156
	# Call FUNC_getSquSum; Params: POINTER(tmp_pointer_2743[temp]), 3; RET INT(tmp_int_10728[temp])
	sw $23, -0x74($29)
	sw $18, -0x4($29)
	sw $22, -0x78($29)
	sw $21, -0x30($29)
	sw $31, 0x0($29)
	addiu $4, $29, -124
	lw $3, -0x74($29)
	sw $3, -0x4($4)
	li $3, 3
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_getSquSum
	addiu $29, $29, 124
	lw $31, 0x0($29)
	move $24, $2
	# ADD, INT(tmp_int_10729[temp]), 1, 2
	li $17, 3
	# Call FUNC_getSqu; Params: INT(tmp_int_10729[temp]); RET INT(tmp_int_10730[temp])
	sw $17, -0x7c($29)
	sw $24, -0x80($29)
	sw $31, 0x0($29)
	addiu $4, $29, -132
	lw $3, -0x7c($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_getSqu
	addiu $29, $29, 132
	lw $31, 0x0($29)
	move $27, $2
	# MUL, INT(tmp_int_10731[temp]), 5, 8
	li $7, 40
	# MUL, INT(tmp_int_10732[temp]), 0, 4
	li $15, 0
	# ADD, INT(tmp_int_10732[temp]), INT(tmp_int_10732[temp]), 0
	addiu $15, $15, 0
	# MUL, INT(tmp_int_10733[temp]), 1, 8
	li $19, 8
	# ADD, INT(tmp_int_10733[temp]), INT(tmp_int_10733[temp]), INT(tmp_int_10732[temp])
	addu $19, $19, $15
	# OFFSET (ARRAY(n22[data+0x8c])+INT(tmp_int_10733[temp]))->POINTER(tmp_pointer_2744[temp])
	addiu $3, $28, 140
	addu $26, $3, $19
	# LOAD POINTER(tmp_pointer_2744[temp]), INT(tmp_int_10734[temp])
	lw $10, 0x0($26)
	# Call FUNC_getSqu; Params: INT(tmp_int_10734[temp]); RET INT(tmp_int_10735[temp])
	sw $7, -0x84($29)
	sw $27, -0x88($29)
	sw $10, -0x8c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -144
	lw $3, -0x8c($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_getSqu
	addiu $29, $29, 144
	lw $31, 0x0($29)
	move $8, $2
	# Call FUNC_getMax; Params: INT(tmp_int_10728[sp-0x80]), INT(tmp_int_10730[sp-0x88]), INT(tmp_int_10731[sp-0x84]), INT(tmp_int_10735[temp]); RET INT(tmp_int_10736[temp])
	sw $8, -0x90($29)
	sw $31, 0x0($29)
	addiu $4, $29, -148
	lw $3, -0x80($29)
	sw $3, -0x4($4)
	lw $3, -0x88($29)
	sw $3, -0x8($4)
	lw $3, -0x84($29)
	sw $3, -0xc($4)
	lw $3, -0x90($29)
	sw $3, -0x10($4)
	move $29, $4
	jal FUNC_getMax
	addiu $29, $29, 148
	lw $31, 0x0($29)
	move $9, $2
	# ASS, INT(out4[sp-0x34]), INT(tmp_int_10736[temp])
	move $11, $9
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# PRINT_INT INT(out4[sp-0x34])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP L_OR_EXP_147
	sw $11, -0x34($29)
L_OR_EXP_147:
	# JUMP L_AND_EXP_149
L_AND_EXP_149:
	# SUB, INT(tmp_int_10737[temp]), 5438, 2
	li $25, 5436
	# NOT, INT(tmp_int_10738[temp]), INT(tmp_int_10737[temp])
	seq $12, $0, $25
	# GE, INT(tmp_int_10739[temp]), INT(tmp_int_10738[temp]), 2
	sge $20, $12, 2
	# ASS, INT(tmp_int_10740[temp]), INT(tmp_int_10739[temp])
	move $16, $20
	# Branch INT(tmp_int_10739[temp]) ? AND_151 : AND_END_150
	sw $20, -0x94($29)
	sw $16, -0x98($29)
	lw $3, -0x94($29)
	bne $3, $0, AND_151
	j AND_END_150
AND_151:
	# JUMP AND_END_150
AND_END_150:
	# ASS, INT(tmp_int_10741[temp]), INT(tmp_int_10740[sp-0x98])
	lw $6, -0x98($29)
	move $5, $6
	# Branch INT(tmp_int_10741[temp]) ? OR_END_148 : OR_152
	sw $5, -0x9c($29)
	lw $3, -0x9c($29)
	bne $3, $0, OR_END_148
	j OR_152
OR_152:
	# JUMP OR_END_148
OR_END_148:
	# Branch INT(tmp_int_10741[sp-0x9c]) ? IF_BODY_153 : IF_ELSE_155
	lw $3, -0x9c($29)
	bne $3, $0, IF_BODY_153
	j IF_ELSE_155
IF_BODY_153:
	# JUMP B_156
B_156:
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# JUMP B_157
B_157:
	# JUMP IF_END_154
	j IF_END_154
IF_ELSE_155:
	# JUMP B_158
B_158:
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(constInMain[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_159
B_159:
	# JUMP IF_END_154
IF_END_154:
	# JUMP B_160
B_160:
	# ADD, INT(tmp_int_10742[temp]), INT(constInMain[sp-0x4]), 5
	lw $13, -0x4($29)
	addiu $14, $13, 5
	# ASS, INT(out5[sp-0x38]), INT(tmp_int_10742[temp])
	move $23, $14
	# NEG, INT(tmp_int_10744[temp]), 231
	li $18, -231
	# NEG, INT(tmp_int_10745[temp]), 156
	li $22, -156
	# MUL, INT(tmp_int_10746[temp]), INT(tmp_int_10745[temp]), 156
	li $3, 156
	mult $22 $3
	mflo $21
	# NEG, INT(tmp_int_10747[temp]), 123
	li $17, -123
	# DIV, INT(tmp_int_10748[temp]), INT(tmp_int_10747[temp]), 3501
	bltz $17, DIV_449
	li $24, 2512451592
	multu $24 $17
	mfhi $24
	srl $24, $24, 11
	j DIV_END_450
DIV_449:
	subu $17, $0, $17
	li $24, 2512451592
	multu $24 $17
	mfhi $24
	srl $24, $24, 11
	subu $24, $0, $24
DIV_END_450:
	# Call FUNC_getMax; Params: 1, INT(tmp_int_10744[temp]), INT(tmp_int_10746[temp]), INT(tmp_int_10748[temp]); RET INT(tmp_int_10749[temp])
	sw $23, -0x38($29)
	sw $24, -0xa0($29)
	sw $18, -0xa4($29)
	sw $21, -0xa8($29)
	sw $13, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -172
	li $3, 1
	sw $3, -0x4($4)
	lw $3, -0xa4($29)
	sw $3, -0x8($4)
	lw $3, -0xa8($29)
	sw $3, -0xc($4)
	lw $3, -0xa0($29)
	sw $3, -0x10($4)
	move $29, $4
	jal FUNC_getMax
	addiu $29, $29, 172
	lw $31, 0x0($29)
	move $15, $2
	# ADD, INT(tmp_int_10743[temp]), INT(out5[sp-0x38]), INT(tmp_int_10749[temp])
	lw $19, -0x38($29)
	addu $26, $19, $15
	# ASS, INT(out5[sp-0x38]), INT(tmp_int_10743[temp])
	move $19, $26
	# JUMP L_OR_EXP_161
	sw $19, -0x38($29)
	j L_OR_EXP_161
	# JUMP B_171
	j B_171
L_OR_EXP_161:
	# JUMP L_AND_EXP_163
L_AND_EXP_163:
	# ADD, INT(tmp_int_10750[temp]), 1, 2
	li $7, 3
	# NOT, INT(tmp_int_10751[temp]), INT(tmp_int_10750[temp])
	seq $27, $0, $7
	# ASS, INT(tmp_int_10752[temp]), INT(tmp_int_10751[temp])
	move $10, $27
	# Branch INT(tmp_int_10751[temp]) ? AND_165 : AND_END_164
	sw $27, -0xac($29)
	sw $10, -0xb0($29)
	lw $3, -0xac($29)
	bne $3, $0, AND_165
	j AND_END_164
AND_165:
	# JUMP AND_END_164
AND_END_164:
	# ASS, INT(tmp_int_10753[temp]), INT(tmp_int_10752[sp-0xb0])
	lw $8, -0xb0($29)
	move $9, $8
	# Branch INT(tmp_int_10753[temp]) ? OR_END_162 : OR_166
	sw $9, -0xb4($29)
	lw $3, -0xb4($29)
	bne $3, $0, OR_END_162
	j OR_166
OR_166:
	# JUMP OR_END_162
OR_END_162:
	# Branch INT(tmp_int_10753[sp-0xb4]) ? IF_BODY_167 : IF_END_168
	lw $3, -0xb4($29)
	bne $3, $0, IF_BODY_167
	j IF_END_168
IF_BODY_167:
	# JUMP B_169
B_169:
	# ASS, INT(out5[sp-0x38]), 32132132
	li $11, 32132132
	# JUMP B_170
	sw $11, -0x38($29)
B_170:
	# JUMP IF_END_168
IF_END_168:
	# JUMP B_171
B_171:
	# JUMP B_172
B_172:
	# JUMP B_173
B_173:
	# JUMP B_174
B_174:
	# JUMP B_175
B_175:
	# JUMP L_OR_EXP_176
L_OR_EXP_176:
	# JUMP L_AND_EXP_178
L_AND_EXP_178:
	# GT, INT(tmp_int_10754[temp]), 2, 1
	li $25, 1
	# ASS, INT(tmp_int_10755[temp]), INT(tmp_int_10754[temp])
	move $12, $25
	# Branch INT(tmp_int_10754[temp]) ? AND_180 : AND_END_179
	sw $25, -0xb8($29)
	sw $12, -0xbc($29)
	lw $3, -0xb8($29)
	bne $3, $0, AND_180
	j AND_END_179
AND_180:
	# JUMP AND_END_179
AND_END_179:
	# ASS, INT(tmp_int_10756[temp]), INT(tmp_int_10755[sp-0xbc])
	lw $20, -0xbc($29)
	move $16, $20
	# Branch INT(tmp_int_10756[temp]) ? OR_END_177 : OR_181
	sw $16, -0xc0($29)
	lw $3, -0xc0($29)
	bne $3, $0, OR_END_177
	j OR_181
OR_181:
	# JUMP OR_END_177
OR_END_177:
	# Branch INT(tmp_int_10756[sp-0xc0]) ? IF_BODY_182 : IF_END_183
	lw $3, -0xc0($29)
	bne $3, $0, IF_BODY_182
	j IF_END_183
IF_BODY_182:
	# JUMP IF_END_183
IF_END_183:
	# JUMP B_184
B_184:
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(out5[sp-0x38])
	li $2, 1
	lw $4, -0x38($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP B_185
B_185:
	# PRINT_STR STR_13
	li $2, 4
	la $4, STR_13
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
