# Yuelin's Compiler
	
.data
	global:
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 19260817 23333 -711942876 -1060809599 1758839997 423174272 1412407466 375872692 1543568839 915987033 698198080 -2143283456 2059223660 -34179219 378910912 1498631475 -1853883889 1640319187 1163758804 -931895085 -2061833199 -1556924115 -845977183 1847164385 1665603629 -1703548726 -344459473 -1589712906 149613887 -396337451 1064449581 -307889588 1661525227 -1284472061 -499795837 255615189 -729577785 -1032749994 -768262768 -597607786 851269079 1196148301 -429326133 882810866 115460578 1991442912 623829448 -1012146871 -1954608496 884135322 -1105545598 1517757891 -1152785601 1891446969 938484211 -1596516698 1681072330 1317584163 -484821643 489138378 -1535659242 2041004366 128222498 1090169129 -347746822 -326257601 -1366930863 -1094012930 -582270185 -1129905221 -700344045 851179157 -823961496 2103453081 -402114823 2139806715 -732814375 -923421957 -335456832 1792163742 303341687 2135186416 1302967469 1623817872 898372270 -812618050 -1403178881 -1394347584 -164180074 -121807758 -1732202680 1205353033 -1776328495 958769364 47496017 -1384738865 1751940200 -97172568 502251849 -1749005702 -921534697 -1202408560 307728049 -1625382311 1271106322 309930583 2007032850 1074055550 2036831205 -492323543 -252604752 1295820596 728458994 1673642498 -51943305 -1854253096 -1024571774 1430035460 1705232663 -1803769826 -1485716863 -1192520056 -1503793409 2027983592 -1911831470 -1387735054 -274170342 -39878981 1475936537 1944942266 1579815806 1734290467 1606724733 -1839064934 1749681186 1409364573 -68127266 1869282840 1574753938 1959861217 -425501077 -1281736928 -1304579021 -1777897472 -1921297034 1623258471 -226241316 824482268 -1840038765 -1238621050 1453319654 -1338682930
	.space 4
	STR_1: .asciiz "ooo"
	STR_2: .asciiz "\n"
	STR_3: .asciiz "ppp"
	STR_4: .asciiz "qqq"
	STR_5: .asciiz "19373354\n"
.text
	la $gp, global
	j FUNC_main
FUNC_rand:
	# MUL, INT(tmp_int_0[temp]), INT(mul[data+0x1184]), INT(seed[data+0x190])
	lw $5, 0x1184($28)
	lw $6, 0x190($28)
	mult $5 $6
	mflo $7
	# ADD, INT(tmp_int_1[temp]), INT(tmp_int_0[temp]), INT(add[data+0x1188])
	lw $8, 0x1188($28)
	addu $9, $7, $8
	# ASS, INT(seed[data+0x190]), INT(tmp_int_1[temp])
	move $6, $9
	# RETURN INT(seed[data+0x190])
	move $2, $6
	sw $5, 0x1184($28)
	sw $6, 0x190($28)
	sw $8, 0x1188($28)
	jr $ra
	
FUNC_printOne:
	# MOD, INT(tmp_int_4[temp]), INT(num[sp-0x4]), 50
	lw $10, -0x4($29)
	li $3, 50
	div $10 $3
	mfhi $11
	# ADD, INT(tmp_int_5[temp]), INT(tmp_int_4[temp]), 50
	addiu $12, $11, 50
	# MOD, INT(tmp_int_6[temp]), INT(tmp_int_5[temp]), 50
	li $3, 50
	div $12 $3
	mfhi $13
	# MUL, INT(tmp_int_3[temp]), INT(tmp_int_6[temp]), 4
	sll $14, $13, 2
	# ADD, INT(tmp_int_3[temp]), INT(tmp_int_3[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(reflect1[data+0x118c])+INT(tmp_int_3[temp]))->POINTER(tmp_pointer_0[temp])
	addiu $3, $28, 4492
	addu $15, $3, $14
	# LOAD POINTER(tmp_pointer_0[temp]), INT(tmp_int_7[temp])
	lw $16, 0x0($15)
	# MUL, INT(tmp_int_2[temp]), INT(num[sp-0x4]), INT(tmp_int_7[temp])
	mult $10 $16
	mflo $17
	# ASS, INT(num[sp-0x4]), INT(tmp_int_2[temp])
	move $10, $17
	# Call FUNC_rand; Params: ; RET INT(tmp_int_8[temp])
	sw $10, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -12
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 12
	lw $31, 0x0($29)
	move $18, $2
	# MOD, INT(tmp_int_9[temp]), INT(tmp_int_8[temp]), 4
	li $3, 4
	div $18 $3
	mfhi $19
	# ADD, INT(tmp_int_10[temp]), INT(tmp_int_9[temp]), 4
	addiu $20, $19, 4
	# MOD, INT(tmp_int_11[temp]), INT(tmp_int_10[temp]), 4
	li $3, 4
	div $20 $3
	mfhi $21
	# DEF, INT(select[sp-0x8]), INT(tmp_int_11[temp])
	move $22, $21
	# JUMP L_OR_EXP_1
	sw $22, -0x8($29)
	j L_OR_EXP_1
L_OR_EXP_1:
	# JUMP L_AND_EXP_3
	j L_AND_EXP_3
L_AND_EXP_3:
	# EQ, INT(tmp_int_12[temp]), INT(select[sp-0x8]), 0
	lw $23, -0x8($29)
	seq $24, $23, 0
	# ASS, INT(tmp_int_13[temp]), INT(tmp_int_12[temp])
	move $25, $24
	# Branch INT(tmp_int_12[temp]) ? AND_5 : AND_END_4
	sw $23, -0x8($29)
	sw $24, -0xc($29)
	sw $25, -0x10($29)
	lw $3, -0xc($29)
	bne $3, $0, AND_5
	j AND_END_4
AND_5:
	# JUMP AND_END_4
	j AND_END_4
AND_END_4:
	# ASS, INT(tmp_int_14[temp]), INT(tmp_int_13[sp-0x10])
	lw $26, -0x10($29)
	move $27, $26
	# Branch INT(tmp_int_14[temp]) ? OR_END_2 : OR_6
	sw $26, -0x10($29)
	sw $27, -0x14($29)
	lw $3, -0x14($29)
	bne $3, $0, OR_END_2
	j OR_6
OR_6:
	# JUMP OR_END_2
	j OR_END_2
OR_END_2:
	# Branch INT(tmp_int_14[sp-0x14]) ? IF_BODY_7 : IF_ELSE_9
	lw $3, -0x14($29)
	bne $3, $0, IF_BODY_7
	j IF_ELSE_9
IF_BODY_7:
	# PRINT_INT INT(num[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# JUMP IF_END_8
	j IF_END_8
IF_ELSE_9:
	# JUMP L_OR_EXP_10
	j L_OR_EXP_10
L_OR_EXP_10:
	# JUMP L_AND_EXP_12
	j L_AND_EXP_12
L_AND_EXP_12:
	# EQ, INT(tmp_int_15[temp]), INT(select[sp-0x8]), 1
	lw $7, -0x8($29)
	seq $9, $7, 1
	# ASS, INT(tmp_int_16[temp]), INT(tmp_int_15[temp])
	move $5, $9
	# Branch INT(tmp_int_15[temp]) ? AND_14 : AND_END_13
	sw $5, -0x18($29)
	sw $7, -0x8($29)
	sw $9, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, AND_14
	j AND_END_13
AND_14:
	# JUMP AND_END_13
	j AND_END_13
AND_END_13:
	# ASS, INT(tmp_int_17[temp]), INT(tmp_int_16[sp-0x18])
	lw $6, -0x18($29)
	move $8, $6
	# Branch INT(tmp_int_17[temp]) ? OR_END_11 : OR_15
	sw $6, -0x18($29)
	sw $8, -0x20($29)
	lw $3, -0x20($29)
	bne $3, $0, OR_END_11
	j OR_15
OR_15:
	# JUMP OR_END_11
	j OR_END_11
OR_END_11:
	# Branch INT(tmp_int_17[sp-0x20]) ? IF_BODY_16 : IF_ELSE_18
	lw $3, -0x20($29)
	bne $3, $0, IF_BODY_16
	j IF_ELSE_18
IF_BODY_16:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT INT(num[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# JUMP IF_END_17
	j IF_END_17
IF_ELSE_18:
	# JUMP L_OR_EXP_19
	j L_OR_EXP_19
L_OR_EXP_19:
	# JUMP L_AND_EXP_21
	j L_AND_EXP_21
L_AND_EXP_21:
	# EQ, INT(tmp_int_18[temp]), INT(select[sp-0x8]), 2
	lw $11, -0x8($29)
	seq $12, $11, 2
	# ASS, INT(tmp_int_19[temp]), INT(tmp_int_18[temp])
	move $13, $12
	# Branch INT(tmp_int_18[temp]) ? AND_23 : AND_END_22
	sw $11, -0x8($29)
	sw $12, -0x24($29)
	sw $13, -0x28($29)
	lw $3, -0x24($29)
	bne $3, $0, AND_23
	j AND_END_22
AND_23:
	# JUMP AND_END_22
	j AND_END_22
AND_END_22:
	# ASS, INT(tmp_int_20[temp]), INT(tmp_int_19[sp-0x28])
	lw $14, -0x28($29)
	move $15, $14
	# Branch INT(tmp_int_20[temp]) ? OR_END_20 : OR_24
	sw $14, -0x28($29)
	sw $15, -0x2c($29)
	lw $3, -0x2c($29)
	bne $3, $0, OR_END_20
	j OR_24
OR_24:
	# JUMP OR_END_20
	j OR_END_20
OR_END_20:
	# Branch INT(tmp_int_20[sp-0x2c]) ? IF_BODY_25 : IF_ELSE_27
	lw $3, -0x2c($29)
	bne $3, $0, IF_BODY_25
	j IF_ELSE_27
IF_BODY_25:
	# PRINT_INT INT(num[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP IF_END_26
	j IF_END_26
IF_ELSE_27:
	# JUMP L_OR_EXP_28
	j L_OR_EXP_28
L_OR_EXP_28:
	# JUMP L_AND_EXP_30
	j L_AND_EXP_30
L_AND_EXP_30:
	# EQ, INT(tmp_int_21[temp]), INT(select[sp-0x8]), 3
	lw $16, -0x8($29)
	seq $17, $16, 3
	# ASS, INT(tmp_int_22[temp]), INT(tmp_int_21[temp])
	move $10, $17
	# Branch INT(tmp_int_21[temp]) ? AND_32 : AND_END_31
	sw $16, -0x8($29)
	sw $17, -0x30($29)
	sw $10, -0x34($29)
	lw $3, -0x30($29)
	bne $3, $0, AND_32
	j AND_END_31
AND_32:
	# JUMP AND_END_31
	j AND_END_31
AND_END_31:
	# ASS, INT(tmp_int_23[temp]), INT(tmp_int_22[sp-0x34])
	lw $18, -0x34($29)
	move $19, $18
	# Branch INT(tmp_int_23[temp]) ? OR_END_29 : OR_33
	sw $18, -0x34($29)
	sw $19, -0x38($29)
	lw $3, -0x38($29)
	bne $3, $0, OR_END_29
	j OR_33
OR_33:
	# JUMP OR_END_29
	j OR_END_29
OR_END_29:
	# Branch INT(tmp_int_23[sp-0x38]) ? IF_BODY_34 : IF_END_35
	lw $3, -0x38($29)
	bne $3, $0, IF_BODY_34
	j IF_END_35
IF_BODY_34:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT INT(num[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP IF_END_35
	j IF_END_35
IF_END_35:
	# JUMP IF_END_26
	j IF_END_26
IF_END_26:
	# JUMP IF_END_17
	j IF_END_17
IF_END_17:
	# JUMP IF_END_8
	j IF_END_8
IF_END_8:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_printTwo:
	# MOD, INT(tmp_int_26[temp]), INT(num2[sp-0x8]), 10
	lw $20, -0x8($29)
	li $3, 10
	div $20 $3
	mfhi $21
	# ADD, INT(tmp_int_27[temp]), INT(tmp_int_26[temp]), 10
	addiu $22, $21, 10
	# MOD, INT(tmp_int_28[temp]), INT(tmp_int_27[temp]), 10
	li $3, 10
	div $22 $3
	mfhi $23
	# MUL, INT(tmp_int_25[temp]), INT(tmp_int_28[temp]), 4
	sll $24, $23, 2
	# ADD, INT(tmp_int_25[temp]), INT(tmp_int_25[temp]), 0
	addiu $24, $24, 0
	# MOD, INT(tmp_int_30[temp]), INT(num1[sp-0x4]), 10
	lw $25, -0x4($29)
	li $3, 10
	div $25 $3
	mfhi $26
	# ADD, INT(tmp_int_31[temp]), INT(tmp_int_30[temp]), 10
	addiu $27, $26, 10
	# MOD, INT(tmp_int_32[temp]), INT(tmp_int_31[temp]), 10
	li $3, 10
	div $27 $3
	mfhi $5
	# MUL, INT(tmp_int_29[temp]), INT(tmp_int_32[temp]), 40
	sll $7, $5, 5
	sll $3, $5, 3
	addu $7, $7, $3
	# ADD, INT(tmp_int_29[temp]), INT(tmp_int_29[temp]), INT(tmp_int_25[temp])
	addu $7, $7, $24
	# OFFSET (ARRAY(reflect2[data+0x1254])+INT(tmp_int_29[temp]))->POINTER(tmp_pointer_1[temp])
	addiu $3, $28, 4692
	addu $9, $3, $7
	# LOAD POINTER(tmp_pointer_1[temp]), INT(tmp_int_33[temp])
	lw $6, 0x0($9)
	# MUL, INT(tmp_int_24[temp]), INT(num1[sp-0x4]), INT(tmp_int_33[temp])
	mult $25 $6
	mflo $8
	# ASS, INT(num1[sp-0x4]), INT(tmp_int_24[temp])
	move $25, $8
	# MOD, INT(tmp_int_36[temp]), INT(num1[sp-0x4]), 10
	li $3, 10
	div $25 $3
	mfhi $11
	# ADD, INT(tmp_int_37[temp]), INT(tmp_int_36[temp]), 10
	addiu $12, $11, 10
	# MOD, INT(tmp_int_38[temp]), INT(tmp_int_37[temp]), 10
	li $3, 10
	div $12 $3
	mfhi $13
	# MUL, INT(tmp_int_35[temp]), INT(tmp_int_38[temp]), 4
	sll $14, $13, 2
	# ADD, INT(tmp_int_35[temp]), INT(tmp_int_35[temp]), 0
	addiu $14, $14, 0
	# MOD, INT(tmp_int_40[temp]), INT(num2[sp-0x8]), 10
	li $3, 10
	div $20 $3
	mfhi $15
	# ADD, INT(tmp_int_41[temp]), INT(tmp_int_40[temp]), 10
	addiu $16, $15, 10
	# MOD, INT(tmp_int_42[temp]), INT(tmp_int_41[temp]), 10
	li $3, 10
	div $16 $3
	mfhi $17
	# MUL, INT(tmp_int_39[temp]), INT(tmp_int_42[temp]), 40
	sll $10, $17, 5
	sll $3, $17, 3
	addu $10, $10, $3
	# ADD, INT(tmp_int_39[temp]), INT(tmp_int_39[temp]), INT(tmp_int_35[temp])
	addu $10, $10, $14
	# OFFSET (ARRAY(reflect2[data+0x1254])+INT(tmp_int_39[temp]))->POINTER(tmp_pointer_2[temp])
	addiu $3, $28, 4692
	addu $18, $3, $10
	# LOAD POINTER(tmp_pointer_2[temp]), INT(tmp_int_43[temp])
	lw $19, 0x0($18)
	# MUL, INT(tmp_int_34[temp]), INT(num2[sp-0x8]), INT(tmp_int_43[temp])
	mult $20 $19
	mflo $21
	# ASS, INT(num2[sp-0x8]), INT(tmp_int_34[temp])
	move $20, $21
	# Call FUNC_rand; Params: ; RET INT(tmp_int_44[temp])
	sw $20, -0x8($29)
	sw $25, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -16
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 16
	lw $31, 0x0($29)
	move $22, $2
	# MOD, INT(tmp_int_45[temp]), INT(tmp_int_44[temp]), 8
	li $3, 8
	div $22 $3
	mfhi $23
	# ADD, INT(tmp_int_46[temp]), INT(tmp_int_45[temp]), 8
	addiu $26, $23, 8
	# MOD, INT(tmp_int_47[temp]), INT(tmp_int_46[temp]), 8
	li $3, 8
	div $26 $3
	mfhi $27
	# DEF, INT(select[sp-0xc]), INT(tmp_int_47[temp])
	move $5, $27
	# JUMP L_OR_EXP_37
	sw $5, -0xc($29)
	j L_OR_EXP_37
L_OR_EXP_37:
	# JUMP L_AND_EXP_39
	j L_AND_EXP_39
L_AND_EXP_39:
	# EQ, INT(tmp_int_48[temp]), INT(select[sp-0xc]), 0
	lw $24, -0xc($29)
	seq $7, $24, 0
	# ASS, INT(tmp_int_49[temp]), INT(tmp_int_48[temp])
	move $9, $7
	# Branch INT(tmp_int_48[temp]) ? AND_41 : AND_END_40
	sw $7, -0x10($29)
	sw $24, -0xc($29)
	sw $9, -0x14($29)
	lw $3, -0x10($29)
	bne $3, $0, AND_41
	j AND_END_40
AND_41:
	# JUMP AND_END_40
	j AND_END_40
AND_END_40:
	# ASS, INT(tmp_int_50[temp]), INT(tmp_int_49[sp-0x14])
	lw $6, -0x14($29)
	move $8, $6
	# Branch INT(tmp_int_50[temp]) ? OR_END_38 : OR_42
	sw $6, -0x14($29)
	sw $8, -0x18($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_38
	j OR_42
OR_42:
	# JUMP OR_END_38
	j OR_END_38
OR_END_38:
	# Branch INT(tmp_int_50[sp-0x18]) ? IF_BODY_43 : IF_ELSE_45
	lw $3, -0x18($29)
	bne $3, $0, IF_BODY_43
	j IF_ELSE_45
IF_BODY_43:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# JUMP IF_END_44
	j IF_END_44
IF_ELSE_45:
	# JUMP L_OR_EXP_46
	j L_OR_EXP_46
L_OR_EXP_46:
	# JUMP L_AND_EXP_48
	j L_AND_EXP_48
L_AND_EXP_48:
	# EQ, INT(tmp_int_51[temp]), INT(select[sp-0xc]), 1
	lw $11, -0xc($29)
	seq $12, $11, 1
	# ASS, INT(tmp_int_52[temp]), INT(tmp_int_51[temp])
	move $13, $12
	# Branch INT(tmp_int_51[temp]) ? AND_50 : AND_END_49
	sw $11, -0xc($29)
	sw $12, -0x1c($29)
	sw $13, -0x20($29)
	lw $3, -0x1c($29)
	bne $3, $0, AND_50
	j AND_END_49
AND_50:
	# JUMP AND_END_49
	j AND_END_49
AND_END_49:
	# ASS, INT(tmp_int_53[temp]), INT(tmp_int_52[sp-0x20])
	lw $15, -0x20($29)
	move $16, $15
	# Branch INT(tmp_int_53[temp]) ? OR_END_47 : OR_51
	sw $16, -0x24($29)
	sw $15, -0x20($29)
	lw $3, -0x24($29)
	bne $3, $0, OR_END_47
	j OR_51
OR_51:
	# JUMP OR_END_47
	j OR_END_47
OR_END_47:
	# Branch INT(tmp_int_53[sp-0x24]) ? IF_BODY_52 : IF_ELSE_54
	lw $3, -0x24($29)
	bne $3, $0, IF_BODY_52
	j IF_ELSE_54
IF_BODY_52:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# JUMP IF_END_53
	j IF_END_53
IF_ELSE_54:
	# JUMP L_OR_EXP_55
	j L_OR_EXP_55
L_OR_EXP_55:
	# JUMP L_AND_EXP_57
	j L_AND_EXP_57
L_AND_EXP_57:
	# EQ, INT(tmp_int_54[temp]), INT(select[sp-0xc]), 2
	lw $17, -0xc($29)
	seq $14, $17, 2
	# ASS, INT(tmp_int_55[temp]), INT(tmp_int_54[temp])
	move $10, $14
	# Branch INT(tmp_int_54[temp]) ? AND_59 : AND_END_58
	sw $17, -0xc($29)
	sw $10, -0x28($29)
	sw $14, -0x2c($29)
	lw $3, -0x2c($29)
	bne $3, $0, AND_59
	j AND_END_58
AND_59:
	# JUMP AND_END_58
	j AND_END_58
AND_END_58:
	# ASS, INT(tmp_int_56[temp]), INT(tmp_int_55[sp-0x28])
	lw $18, -0x28($29)
	move $19, $18
	# Branch INT(tmp_int_56[temp]) ? OR_END_56 : OR_60
	sw $18, -0x28($29)
	sw $19, -0x30($29)
	lw $3, -0x30($29)
	bne $3, $0, OR_END_56
	j OR_60
OR_60:
	# JUMP OR_END_56
	j OR_END_56
OR_END_56:
	# Branch INT(tmp_int_56[sp-0x30]) ? IF_BODY_61 : IF_ELSE_63
	lw $3, -0x30($29)
	bne $3, $0, IF_BODY_61
	j IF_ELSE_63
IF_BODY_61:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP IF_END_62
	j IF_END_62
IF_ELSE_63:
	# JUMP L_OR_EXP_64
	j L_OR_EXP_64
L_OR_EXP_64:
	# JUMP L_AND_EXP_66
	j L_AND_EXP_66
L_AND_EXP_66:
	# EQ, INT(tmp_int_57[temp]), INT(select[sp-0xc]), 3
	lw $21, -0xc($29)
	seq $20, $21, 3
	# ASS, INT(tmp_int_58[temp]), INT(tmp_int_57[temp])
	move $25, $20
	# Branch INT(tmp_int_57[temp]) ? AND_68 : AND_END_67
	sw $20, -0x34($29)
	sw $21, -0xc($29)
	sw $25, -0x38($29)
	lw $3, -0x34($29)
	bne $3, $0, AND_68
	j AND_END_67
AND_68:
	# JUMP AND_END_67
	j AND_END_67
AND_END_67:
	# ASS, INT(tmp_int_59[temp]), INT(tmp_int_58[sp-0x38])
	lw $22, -0x38($29)
	move $23, $22
	# Branch INT(tmp_int_59[temp]) ? OR_END_65 : OR_69
	sw $22, -0x38($29)
	sw $23, -0x3c($29)
	lw $3, -0x3c($29)
	bne $3, $0, OR_END_65
	j OR_69
OR_69:
	# JUMP OR_END_65
	j OR_END_65
OR_END_65:
	# Branch INT(tmp_int_59[sp-0x3c]) ? IF_BODY_70 : IF_ELSE_72
	lw $3, -0x3c($29)
	bne $3, $0, IF_BODY_70
	j IF_ELSE_72
IF_BODY_70:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP IF_END_71
	j IF_END_71
IF_ELSE_72:
	# JUMP L_OR_EXP_73
	j L_OR_EXP_73
L_OR_EXP_73:
	# JUMP L_AND_EXP_75
	j L_AND_EXP_75
L_AND_EXP_75:
	# EQ, INT(tmp_int_60[temp]), INT(select[sp-0xc]), 4
	lw $26, -0xc($29)
	seq $27, $26, 4
	# ASS, INT(tmp_int_61[temp]), INT(tmp_int_60[temp])
	move $5, $27
	# Branch INT(tmp_int_60[temp]) ? AND_77 : AND_END_76
	sw $5, -0x40($29)
	sw $26, -0xc($29)
	sw $27, -0x44($29)
	lw $3, -0x44($29)
	bne $3, $0, AND_77
	j AND_END_76
AND_77:
	# JUMP AND_END_76
	j AND_END_76
AND_END_76:
	# ASS, INT(tmp_int_62[temp]), INT(tmp_int_61[sp-0x40])
	lw $7, -0x40($29)
	move $24, $7
	# Branch INT(tmp_int_62[temp]) ? OR_END_74 : OR_78
	sw $7, -0x40($29)
	sw $24, -0x48($29)
	lw $3, -0x48($29)
	bne $3, $0, OR_END_74
	j OR_78
OR_78:
	# JUMP OR_END_74
	j OR_END_74
OR_END_74:
	# Branch INT(tmp_int_62[sp-0x48]) ? IF_BODY_79 : IF_ELSE_81
	lw $3, -0x48($29)
	bne $3, $0, IF_BODY_79
	j IF_ELSE_81
IF_BODY_79:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# JUMP IF_END_80
	j IF_END_80
IF_ELSE_81:
	# JUMP L_OR_EXP_82
	j L_OR_EXP_82
L_OR_EXP_82:
	# JUMP L_AND_EXP_84
	j L_AND_EXP_84
L_AND_EXP_84:
	# EQ, INT(tmp_int_63[temp]), INT(select[sp-0xc]), 5
	lw $9, -0xc($29)
	seq $6, $9, 5
	# ASS, INT(tmp_int_64[temp]), INT(tmp_int_63[temp])
	move $8, $6
	# Branch INT(tmp_int_63[temp]) ? AND_86 : AND_END_85
	sw $6, -0x4c($29)
	sw $8, -0x50($29)
	sw $9, -0xc($29)
	lw $3, -0x4c($29)
	bne $3, $0, AND_86
	j AND_END_85
AND_86:
	# JUMP AND_END_85
	j AND_END_85
AND_END_85:
	# ASS, INT(tmp_int_65[temp]), INT(tmp_int_64[sp-0x50])
	lw $11, -0x50($29)
	move $12, $11
	# Branch INT(tmp_int_65[temp]) ? OR_END_83 : OR_87
	sw $11, -0x50($29)
	sw $12, -0x54($29)
	lw $3, -0x54($29)
	bne $3, $0, OR_END_83
	j OR_87
OR_87:
	# JUMP OR_END_83
	j OR_END_83
OR_END_83:
	# Branch INT(tmp_int_65[sp-0x54]) ? IF_BODY_88 : IF_ELSE_90
	lw $3, -0x54($29)
	bne $3, $0, IF_BODY_88
	j IF_ELSE_90
IF_BODY_88:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# JUMP IF_END_89
	j IF_END_89
IF_ELSE_90:
	# JUMP L_OR_EXP_91
	j L_OR_EXP_91
L_OR_EXP_91:
	# JUMP L_AND_EXP_93
	j L_AND_EXP_93
L_AND_EXP_93:
	# EQ, INT(tmp_int_66[temp]), INT(select[sp-0xc]), 6
	lw $13, -0xc($29)
	seq $16, $13, 6
	# ASS, INT(tmp_int_67[temp]), INT(tmp_int_66[temp])
	move $15, $16
	# Branch INT(tmp_int_66[temp]) ? AND_95 : AND_END_94
	sw $16, -0x58($29)
	sw $13, -0xc($29)
	sw $15, -0x5c($29)
	lw $3, -0x58($29)
	bne $3, $0, AND_95
	j AND_END_94
AND_95:
	# JUMP AND_END_94
	j AND_END_94
AND_END_94:
	# ASS, INT(tmp_int_68[temp]), INT(tmp_int_67[sp-0x5c])
	lw $17, -0x5c($29)
	move $10, $17
	# Branch INT(tmp_int_68[temp]) ? OR_END_92 : OR_96
	sw $17, -0x5c($29)
	sw $10, -0x60($29)
	lw $3, -0x60($29)
	bne $3, $0, OR_END_92
	j OR_96
OR_96:
	# JUMP OR_END_92
	j OR_END_92
OR_END_92:
	# Branch INT(tmp_int_68[sp-0x60]) ? IF_BODY_97 : IF_ELSE_99
	lw $3, -0x60($29)
	bne $3, $0, IF_BODY_97
	j IF_ELSE_99
IF_BODY_97:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP IF_END_98
	j IF_END_98
IF_ELSE_99:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP IF_END_98
	j IF_END_98
IF_END_98:
	# JUMP IF_END_89
	j IF_END_89
IF_END_89:
	# JUMP IF_END_80
	j IF_END_80
IF_END_80:
	# JUMP IF_END_71
	j IF_END_71
IF_END_71:
	# JUMP IF_END_62
	j IF_END_62
IF_END_62:
	# JUMP IF_END_53
	j IF_END_53
IF_END_53:
	# JUMP IF_END_44
	j IF_END_44
IF_END_44:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_printThree:
	# MOD, INT(tmp_int_71[temp]), INT(num1[sp-0x4]), 50
	lw $14, -0x4($29)
	li $3, 50
	div $14 $3
	mfhi $18
	# ADD, INT(tmp_int_72[temp]), INT(tmp_int_71[temp]), 50
	addiu $19, $18, 50
	# MOD, INT(tmp_int_73[temp]), INT(tmp_int_72[temp]), 50
	li $3, 50
	div $19 $3
	mfhi $20
	# MUL, INT(tmp_int_70[temp]), INT(tmp_int_73[temp]), 4
	sll $21, $20, 2
	# ADD, INT(tmp_int_70[temp]), INT(tmp_int_70[temp]), 0
	addiu $21, $21, 0
	# OFFSET (ARRAY(reflect1[data+0x118c])+INT(tmp_int_70[temp]))->POINTER(tmp_pointer_3[temp])
	addiu $3, $28, 4492
	addu $25, $3, $21
	# LOAD POINTER(tmp_pointer_3[temp]), INT(tmp_int_74[temp])
	lw $22, 0x0($25)
	# MUL, INT(tmp_int_69[temp]), INT(num1[sp-0x4]), INT(tmp_int_74[temp])
	mult $14 $22
	mflo $23
	# ASS, INT(num1[sp-0x4]), INT(tmp_int_69[temp])
	move $14, $23
	# MOD, INT(tmp_int_77[temp]), INT(num3[sp-0xc]), 10
	lw $5, -0xc($29)
	li $3, 10
	div $5 $3
	mfhi $26
	# ADD, INT(tmp_int_78[temp]), INT(tmp_int_77[temp]), 10
	addiu $27, $26, 10
	# MOD, INT(tmp_int_79[temp]), INT(tmp_int_78[temp]), 10
	li $3, 10
	div $27 $3
	mfhi $7
	# MUL, INT(tmp_int_76[temp]), INT(tmp_int_79[temp]), 4
	sll $24, $7, 2
	# ADD, INT(tmp_int_76[temp]), INT(tmp_int_76[temp]), 0
	addiu $24, $24, 0
	# MOD, INT(tmp_int_81[temp]), INT(num2[sp-0x8]), 10
	lw $6, -0x8($29)
	li $3, 10
	div $6 $3
	mfhi $8
	# ADD, INT(tmp_int_82[temp]), INT(tmp_int_81[temp]), 10
	addiu $9, $8, 10
	# MOD, INT(tmp_int_83[temp]), INT(tmp_int_82[temp]), 10
	li $3, 10
	div $9 $3
	mfhi $11
	# MUL, INT(tmp_int_80[temp]), INT(tmp_int_83[temp]), 40
	sll $12, $11, 5
	sll $3, $11, 3
	addu $12, $12, $3
	# ADD, INT(tmp_int_80[temp]), INT(tmp_int_80[temp]), INT(tmp_int_76[temp])
	addu $12, $12, $24
	# OFFSET (ARRAY(reflect2[data+0x1254])+INT(tmp_int_80[temp]))->POINTER(tmp_pointer_4[temp])
	addiu $3, $28, 4692
	addu $16, $3, $12
	# LOAD POINTER(tmp_pointer_4[temp]), INT(tmp_int_84[temp])
	lw $13, 0x0($16)
	# MUL, INT(tmp_int_75[temp]), INT(num2[sp-0x8]), INT(tmp_int_84[temp])
	mult $6 $13
	mflo $15
	# ASS, INT(num2[sp-0x8]), INT(tmp_int_75[temp])
	move $6, $15
	# MOD, INT(tmp_int_87[temp]), INT(num2[sp-0x8]), 10
	li $3, 10
	div $6 $3
	mfhi $17
	# ADD, INT(tmp_int_88[temp]), INT(tmp_int_87[temp]), 10
	addiu $10, $17, 10
	# MOD, INT(tmp_int_89[temp]), INT(tmp_int_88[temp]), 10
	li $3, 10
	div $10 $3
	mfhi $18
	# MUL, INT(tmp_int_86[temp]), INT(tmp_int_89[temp]), 4
	sll $19, $18, 2
	# ADD, INT(tmp_int_86[temp]), INT(tmp_int_86[temp]), 0
	addiu $19, $19, 0
	# MOD, INT(tmp_int_91[temp]), INT(num3[sp-0xc]), 10
	li $3, 10
	div $5 $3
	mfhi $20
	# ADD, INT(tmp_int_92[temp]), INT(tmp_int_91[temp]), 10
	addiu $21, $20, 10
	# MOD, INT(tmp_int_93[temp]), INT(tmp_int_92[temp]), 10
	li $3, 10
	div $21 $3
	mfhi $25
	# MUL, INT(tmp_int_90[temp]), INT(tmp_int_93[temp]), 40
	sll $22, $25, 5
	sll $3, $25, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_90[temp]), INT(tmp_int_90[temp]), INT(tmp_int_86[temp])
	addu $22, $22, $19
	# OFFSET (ARRAY(reflect2[data+0x1254])+INT(tmp_int_90[temp]))->POINTER(tmp_pointer_5[temp])
	addiu $3, $28, 4692
	addu $23, $3, $22
	# LOAD POINTER(tmp_pointer_5[temp]), INT(tmp_int_94[temp])
	lw $26, 0x0($23)
	# MUL, INT(tmp_int_85[temp]), INT(num3[sp-0xc]), INT(tmp_int_94[temp])
	mult $5 $26
	mflo $27
	# ASS, INT(num3[sp-0xc]), INT(tmp_int_85[temp])
	move $5, $27
	# Call FUNC_rand; Params: ; RET INT(tmp_int_95[temp])
	sw $5, -0xc($29)
	sw $6, -0x8($29)
	sw $14, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -20
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $7, $2
	# MOD, INT(tmp_int_96[temp]), INT(tmp_int_95[temp]), 16
	li $3, 16
	div $7 $3
	mfhi $8
	# ADD, INT(tmp_int_97[temp]), INT(tmp_int_96[temp]), 16
	addiu $9, $8, 16
	# MOD, INT(tmp_int_98[temp]), INT(tmp_int_97[temp]), 16
	li $3, 16
	div $9 $3
	mfhi $11
	# DEF, INT(select[sp-0x10]), INT(tmp_int_98[temp])
	move $24, $11
	# JUMP L_OR_EXP_101
	sw $24, -0x10($29)
	j L_OR_EXP_101
L_OR_EXP_101:
	# JUMP L_AND_EXP_103
	j L_AND_EXP_103
L_AND_EXP_103:
	# EQ, INT(tmp_int_99[temp]), INT(select[sp-0x10]), 0
	lw $12, -0x10($29)
	seq $16, $12, 0
	# ASS, INT(tmp_int_100[temp]), INT(tmp_int_99[temp])
	move $13, $16
	# Branch INT(tmp_int_99[temp]) ? AND_105 : AND_END_104
	sw $16, -0x14($29)
	sw $12, -0x10($29)
	sw $13, -0x18($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_105
	j AND_END_104
AND_105:
	# JUMP AND_END_104
	j AND_END_104
AND_END_104:
	# ASS, INT(tmp_int_101[temp]), INT(tmp_int_100[sp-0x18])
	lw $15, -0x18($29)
	move $17, $15
	# Branch INT(tmp_int_101[temp]) ? OR_END_102 : OR_106
	sw $17, -0x1c($29)
	sw $15, -0x18($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_102
	j OR_106
OR_106:
	# JUMP OR_END_102
	j OR_END_102
OR_END_102:
	# Branch INT(tmp_int_101[sp-0x1c]) ? IF_BODY_107 : IF_ELSE_109
	lw $3, -0x1c($29)
	bne $3, $0, IF_BODY_107
	j IF_ELSE_109
IF_BODY_107:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_108
	j IF_END_108
IF_ELSE_109:
	# JUMP L_OR_EXP_110
	j L_OR_EXP_110
L_OR_EXP_110:
	# JUMP L_AND_EXP_112
	j L_AND_EXP_112
L_AND_EXP_112:
	# EQ, INT(tmp_int_102[temp]), INT(select[sp-0x10]), 1
	lw $10, -0x10($29)
	seq $18, $10, 1
	# ASS, INT(tmp_int_103[temp]), INT(tmp_int_102[temp])
	move $20, $18
	# Branch INT(tmp_int_102[temp]) ? AND_114 : AND_END_113
	sw $18, -0x20($29)
	sw $20, -0x24($29)
	sw $10, -0x10($29)
	lw $3, -0x20($29)
	bne $3, $0, AND_114
	j AND_END_113
AND_114:
	# JUMP AND_END_113
	j AND_END_113
AND_END_113:
	# ASS, INT(tmp_int_104[temp]), INT(tmp_int_103[sp-0x24])
	lw $21, -0x24($29)
	move $25, $21
	# Branch INT(tmp_int_104[temp]) ? OR_END_111 : OR_115
	sw $21, -0x24($29)
	sw $25, -0x28($29)
	lw $3, -0x28($29)
	bne $3, $0, OR_END_111
	j OR_115
OR_115:
	# JUMP OR_END_111
	j OR_END_111
OR_END_111:
	# Branch INT(tmp_int_104[sp-0x28]) ? IF_BODY_116 : IF_ELSE_118
	lw $3, -0x28($29)
	bne $3, $0, IF_BODY_116
	j IF_ELSE_118
IF_BODY_116:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_117
	j IF_END_117
IF_ELSE_118:
	# JUMP L_OR_EXP_119
	j L_OR_EXP_119
L_OR_EXP_119:
	# JUMP L_AND_EXP_121
	j L_AND_EXP_121
L_AND_EXP_121:
	# EQ, INT(tmp_int_105[temp]), INT(select[sp-0x10]), 2
	lw $19, -0x10($29)
	seq $22, $19, 2
	# ASS, INT(tmp_int_106[temp]), INT(tmp_int_105[temp])
	move $23, $22
	# Branch INT(tmp_int_105[temp]) ? AND_123 : AND_END_122
	sw $19, -0x10($29)
	sw $22, -0x2c($29)
	sw $23, -0x30($29)
	lw $3, -0x2c($29)
	bne $3, $0, AND_123
	j AND_END_122
AND_123:
	# JUMP AND_END_122
	j AND_END_122
AND_END_122:
	# ASS, INT(tmp_int_107[temp]), INT(tmp_int_106[sp-0x30])
	lw $26, -0x30($29)
	move $27, $26
	# Branch INT(tmp_int_107[temp]) ? OR_END_120 : OR_124
	sw $26, -0x30($29)
	sw $27, -0x34($29)
	lw $3, -0x34($29)
	bne $3, $0, OR_END_120
	j OR_124
OR_124:
	# JUMP OR_END_120
	j OR_END_120
OR_END_120:
	# Branch INT(tmp_int_107[sp-0x34]) ? IF_BODY_125 : IF_ELSE_127
	lw $3, -0x34($29)
	bne $3, $0, IF_BODY_125
	j IF_ELSE_127
IF_BODY_125:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_126
	j IF_END_126
IF_ELSE_127:
	# JUMP L_OR_EXP_128
	j L_OR_EXP_128
L_OR_EXP_128:
	# JUMP L_AND_EXP_130
	j L_AND_EXP_130
L_AND_EXP_130:
	# EQ, INT(tmp_int_108[temp]), INT(select[sp-0x10]), 3
	lw $5, -0x10($29)
	seq $6, $5, 3
	# ASS, INT(tmp_int_109[temp]), INT(tmp_int_108[temp])
	move $14, $6
	# Branch INT(tmp_int_108[temp]) ? AND_132 : AND_END_131
	sw $5, -0x10($29)
	sw $6, -0x38($29)
	sw $14, -0x3c($29)
	lw $3, -0x38($29)
	bne $3, $0, AND_132
	j AND_END_131
AND_132:
	# JUMP AND_END_131
	j AND_END_131
AND_END_131:
	# ASS, INT(tmp_int_110[temp]), INT(tmp_int_109[sp-0x3c])
	lw $7, -0x3c($29)
	move $8, $7
	# Branch INT(tmp_int_110[temp]) ? OR_END_129 : OR_133
	sw $7, -0x3c($29)
	sw $8, -0x40($29)
	lw $3, -0x40($29)
	bne $3, $0, OR_END_129
	j OR_133
OR_133:
	# JUMP OR_END_129
	j OR_END_129
OR_END_129:
	# Branch INT(tmp_int_110[sp-0x40]) ? IF_BODY_134 : IF_ELSE_136
	lw $3, -0x40($29)
	bne $3, $0, IF_BODY_134
	j IF_ELSE_136
IF_BODY_134:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_135
	j IF_END_135
IF_ELSE_136:
	# JUMP L_OR_EXP_137
	j L_OR_EXP_137
L_OR_EXP_137:
	# JUMP L_AND_EXP_139
	j L_AND_EXP_139
L_AND_EXP_139:
	# EQ, INT(tmp_int_111[temp]), INT(select[sp-0x10]), 4
	lw $9, -0x10($29)
	seq $11, $9, 4
	# ASS, INT(tmp_int_112[temp]), INT(tmp_int_111[temp])
	move $24, $11
	# Branch INT(tmp_int_111[temp]) ? AND_141 : AND_END_140
	sw $24, -0x44($29)
	sw $9, -0x10($29)
	sw $11, -0x48($29)
	lw $3, -0x48($29)
	bne $3, $0, AND_141
	j AND_END_140
AND_141:
	# JUMP AND_END_140
	j AND_END_140
AND_END_140:
	# ASS, INT(tmp_int_113[temp]), INT(tmp_int_112[sp-0x44])
	lw $16, -0x44($29)
	move $12, $16
	# Branch INT(tmp_int_113[temp]) ? OR_END_138 : OR_142
	sw $16, -0x44($29)
	sw $12, -0x4c($29)
	lw $3, -0x4c($29)
	bne $3, $0, OR_END_138
	j OR_142
OR_142:
	# JUMP OR_END_138
	j OR_END_138
OR_END_138:
	# Branch INT(tmp_int_113[sp-0x4c]) ? IF_BODY_143 : IF_ELSE_145
	lw $3, -0x4c($29)
	bne $3, $0, IF_BODY_143
	j IF_ELSE_145
IF_BODY_143:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_144
	j IF_END_144
IF_ELSE_145:
	# JUMP L_OR_EXP_146
	j L_OR_EXP_146
L_OR_EXP_146:
	# JUMP L_AND_EXP_148
	j L_AND_EXP_148
L_AND_EXP_148:
	# EQ, INT(tmp_int_114[temp]), INT(select[sp-0x10]), 5
	lw $13, -0x10($29)
	seq $17, $13, 5
	# ASS, INT(tmp_int_115[temp]), INT(tmp_int_114[temp])
	move $15, $17
	# Branch INT(tmp_int_114[temp]) ? AND_150 : AND_END_149
	sw $17, -0x50($29)
	sw $13, -0x10($29)
	sw $15, -0x54($29)
	lw $3, -0x50($29)
	bne $3, $0, AND_150
	j AND_END_149
AND_150:
	# JUMP AND_END_149
	j AND_END_149
AND_END_149:
	# ASS, INT(tmp_int_116[temp]), INT(tmp_int_115[sp-0x54])
	lw $18, -0x54($29)
	move $20, $18
	# Branch INT(tmp_int_116[temp]) ? OR_END_147 : OR_151
	sw $18, -0x54($29)
	sw $20, -0x58($29)
	lw $3, -0x58($29)
	bne $3, $0, OR_END_147
	j OR_151
OR_151:
	# JUMP OR_END_147
	j OR_END_147
OR_END_147:
	# Branch INT(tmp_int_116[sp-0x58]) ? IF_BODY_152 : IF_ELSE_154
	lw $3, -0x58($29)
	bne $3, $0, IF_BODY_152
	j IF_ELSE_154
IF_BODY_152:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_153
	j IF_END_153
IF_ELSE_154:
	# JUMP L_OR_EXP_155
	j L_OR_EXP_155
L_OR_EXP_155:
	# JUMP L_AND_EXP_157
	j L_AND_EXP_157
L_AND_EXP_157:
	# EQ, INT(tmp_int_117[temp]), INT(select[sp-0x10]), 6
	lw $10, -0x10($29)
	seq $21, $10, 6
	# ASS, INT(tmp_int_118[temp]), INT(tmp_int_117[temp])
	move $25, $21
	# Branch INT(tmp_int_117[temp]) ? AND_159 : AND_END_158
	sw $21, -0x5c($29)
	sw $25, -0x60($29)
	sw $10, -0x10($29)
	lw $3, -0x5c($29)
	bne $3, $0, AND_159
	j AND_END_158
AND_159:
	# JUMP AND_END_158
	j AND_END_158
AND_END_158:
	# ASS, INT(tmp_int_119[temp]), INT(tmp_int_118[sp-0x60])
	lw $19, -0x60($29)
	move $22, $19
	# Branch INT(tmp_int_119[temp]) ? OR_END_156 : OR_160
	sw $19, -0x60($29)
	sw $22, -0x64($29)
	lw $3, -0x64($29)
	bne $3, $0, OR_END_156
	j OR_160
OR_160:
	# JUMP OR_END_156
	j OR_END_156
OR_END_156:
	# Branch INT(tmp_int_119[sp-0x64]) ? IF_BODY_161 : IF_ELSE_163
	lw $3, -0x64($29)
	bne $3, $0, IF_BODY_161
	j IF_ELSE_163
IF_BODY_161:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_162
	j IF_END_162
IF_ELSE_163:
	# JUMP L_OR_EXP_164
	j L_OR_EXP_164
L_OR_EXP_164:
	# JUMP L_AND_EXP_166
	j L_AND_EXP_166
L_AND_EXP_166:
	# EQ, INT(tmp_int_120[temp]), INT(select[sp-0x10]), 7
	lw $23, -0x10($29)
	seq $26, $23, 7
	# ASS, INT(tmp_int_121[temp]), INT(tmp_int_120[temp])
	move $27, $26
	# Branch INT(tmp_int_120[temp]) ? AND_168 : AND_END_167
	sw $23, -0x10($29)
	sw $26, -0x68($29)
	sw $27, -0x6c($29)
	lw $3, -0x68($29)
	bne $3, $0, AND_168
	j AND_END_167
AND_168:
	# JUMP AND_END_167
	j AND_END_167
AND_END_167:
	# ASS, INT(tmp_int_122[temp]), INT(tmp_int_121[sp-0x6c])
	lw $5, -0x6c($29)
	move $6, $5
	# Branch INT(tmp_int_122[temp]) ? OR_END_165 : OR_169
	sw $5, -0x6c($29)
	sw $6, -0x70($29)
	lw $3, -0x70($29)
	bne $3, $0, OR_END_165
	j OR_169
OR_169:
	# JUMP OR_END_165
	j OR_END_165
OR_END_165:
	# Branch INT(tmp_int_122[sp-0x70]) ? IF_BODY_170 : IF_ELSE_172
	lw $3, -0x70($29)
	bne $3, $0, IF_BODY_170
	j IF_ELSE_172
IF_BODY_170:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_171
	j IF_END_171
IF_ELSE_172:
	# JUMP L_OR_EXP_173
	j L_OR_EXP_173
L_OR_EXP_173:
	# JUMP L_AND_EXP_175
	j L_AND_EXP_175
L_AND_EXP_175:
	# EQ, INT(tmp_int_123[temp]), INT(select[sp-0x10]), 8
	lw $14, -0x10($29)
	seq $7, $14, 8
	# ASS, INT(tmp_int_124[temp]), INT(tmp_int_123[temp])
	move $8, $7
	# Branch INT(tmp_int_123[temp]) ? AND_177 : AND_END_176
	sw $7, -0x74($29)
	sw $8, -0x78($29)
	sw $14, -0x10($29)
	lw $3, -0x74($29)
	bne $3, $0, AND_177
	j AND_END_176
AND_177:
	# JUMP AND_END_176
	j AND_END_176
AND_END_176:
	# ASS, INT(tmp_int_125[temp]), INT(tmp_int_124[sp-0x78])
	lw $24, -0x78($29)
	move $9, $24
	# Branch INT(tmp_int_125[temp]) ? OR_END_174 : OR_178
	sw $24, -0x78($29)
	sw $9, -0x7c($29)
	lw $3, -0x7c($29)
	bne $3, $0, OR_END_174
	j OR_178
OR_178:
	# JUMP OR_END_174
	j OR_END_174
OR_END_174:
	# Branch INT(tmp_int_125[sp-0x7c]) ? IF_BODY_179 : IF_ELSE_181
	lw $3, -0x7c($29)
	bne $3, $0, IF_BODY_179
	j IF_ELSE_181
IF_BODY_179:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_180
	j IF_END_180
IF_ELSE_181:
	# JUMP L_OR_EXP_182
	j L_OR_EXP_182
L_OR_EXP_182:
	# JUMP L_AND_EXP_184
	j L_AND_EXP_184
L_AND_EXP_184:
	# EQ, INT(tmp_int_126[temp]), INT(select[sp-0x10]), 9
	lw $11, -0x10($29)
	seq $16, $11, 9
	# ASS, INT(tmp_int_127[temp]), INT(tmp_int_126[temp])
	move $12, $16
	# Branch INT(tmp_int_126[temp]) ? AND_186 : AND_END_185
	sw $16, -0x80($29)
	sw $11, -0x10($29)
	sw $12, -0x84($29)
	lw $3, -0x80($29)
	bne $3, $0, AND_186
	j AND_END_185
AND_186:
	# JUMP AND_END_185
	j AND_END_185
AND_END_185:
	# ASS, INT(tmp_int_128[temp]), INT(tmp_int_127[sp-0x84])
	lw $17, -0x84($29)
	move $13, $17
	# Branch INT(tmp_int_128[temp]) ? OR_END_183 : OR_187
	sw $17, -0x84($29)
	sw $13, -0x88($29)
	lw $3, -0x88($29)
	bne $3, $0, OR_END_183
	j OR_187
OR_187:
	# JUMP OR_END_183
	j OR_END_183
OR_END_183:
	# Branch INT(tmp_int_128[sp-0x88]) ? IF_BODY_188 : IF_ELSE_190
	lw $3, -0x88($29)
	bne $3, $0, IF_BODY_188
	j IF_ELSE_190
IF_BODY_188:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_189
	j IF_END_189
IF_ELSE_190:
	# JUMP L_OR_EXP_191
	j L_OR_EXP_191
L_OR_EXP_191:
	# JUMP L_AND_EXP_193
	j L_AND_EXP_193
L_AND_EXP_193:
	# EQ, INT(tmp_int_129[temp]), INT(select[sp-0x10]), 10
	lw $15, -0x10($29)
	seq $18, $15, 10
	# ASS, INT(tmp_int_130[temp]), INT(tmp_int_129[temp])
	move $20, $18
	# Branch INT(tmp_int_129[temp]) ? AND_195 : AND_END_194
	sw $18, -0x8c($29)
	sw $20, -0x90($29)
	sw $15, -0x10($29)
	lw $3, -0x8c($29)
	bne $3, $0, AND_195
	j AND_END_194
AND_195:
	# JUMP AND_END_194
	j AND_END_194
AND_END_194:
	# ASS, INT(tmp_int_131[temp]), INT(tmp_int_130[sp-0x90])
	lw $21, -0x90($29)
	move $25, $21
	# Branch INT(tmp_int_131[temp]) ? OR_END_192 : OR_196
	sw $21, -0x90($29)
	sw $25, -0x94($29)
	lw $3, -0x94($29)
	bne $3, $0, OR_END_192
	j OR_196
OR_196:
	# JUMP OR_END_192
	j OR_END_192
OR_END_192:
	# Branch INT(tmp_int_131[sp-0x94]) ? IF_BODY_197 : IF_ELSE_199
	lw $3, -0x94($29)
	bne $3, $0, IF_BODY_197
	j IF_ELSE_199
IF_BODY_197:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_198
	j IF_END_198
IF_ELSE_199:
	# JUMP L_OR_EXP_200
	j L_OR_EXP_200
L_OR_EXP_200:
	# JUMP L_AND_EXP_202
	j L_AND_EXP_202
L_AND_EXP_202:
	# EQ, INT(tmp_int_132[temp]), INT(select[sp-0x10]), 11
	lw $10, -0x10($29)
	seq $19, $10, 11
	# ASS, INT(tmp_int_133[temp]), INT(tmp_int_132[temp])
	move $22, $19
	# Branch INT(tmp_int_132[temp]) ? AND_204 : AND_END_203
	sw $19, -0x98($29)
	sw $22, -0x9c($29)
	sw $10, -0x10($29)
	lw $3, -0x98($29)
	bne $3, $0, AND_204
	j AND_END_203
AND_204:
	# JUMP AND_END_203
	j AND_END_203
AND_END_203:
	# ASS, INT(tmp_int_134[temp]), INT(tmp_int_133[sp-0x9c])
	lw $23, -0x9c($29)
	move $26, $23
	# Branch INT(tmp_int_134[temp]) ? OR_END_201 : OR_205
	sw $23, -0x9c($29)
	sw $26, -0xa0($29)
	lw $3, -0xa0($29)
	bne $3, $0, OR_END_201
	j OR_205
OR_205:
	# JUMP OR_END_201
	j OR_END_201
OR_END_201:
	# Branch INT(tmp_int_134[sp-0xa0]) ? IF_BODY_206 : IF_ELSE_208
	lw $3, -0xa0($29)
	bne $3, $0, IF_BODY_206
	j IF_ELSE_208
IF_BODY_206:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_207
	j IF_END_207
IF_ELSE_208:
	# JUMP L_OR_EXP_209
	j L_OR_EXP_209
L_OR_EXP_209:
	# JUMP L_AND_EXP_211
	j L_AND_EXP_211
L_AND_EXP_211:
	# EQ, INT(tmp_int_135[temp]), INT(select[sp-0x10]), 12
	lw $27, -0x10($29)
	seq $5, $27, 12
	# ASS, INT(tmp_int_136[temp]), INT(tmp_int_135[temp])
	move $6, $5
	# Branch INT(tmp_int_135[temp]) ? AND_213 : AND_END_212
	sw $5, -0xa4($29)
	sw $6, -0xa8($29)
	sw $27, -0x10($29)
	lw $3, -0xa4($29)
	bne $3, $0, AND_213
	j AND_END_212
AND_213:
	# JUMP AND_END_212
	j AND_END_212
AND_END_212:
	# ASS, INT(tmp_int_137[temp]), INT(tmp_int_136[sp-0xa8])
	lw $7, -0xa8($29)
	move $8, $7
	# Branch INT(tmp_int_137[temp]) ? OR_END_210 : OR_214
	sw $7, -0xa8($29)
	sw $8, -0xac($29)
	lw $3, -0xac($29)
	bne $3, $0, OR_END_210
	j OR_214
OR_214:
	# JUMP OR_END_210
	j OR_END_210
OR_END_210:
	# Branch INT(tmp_int_137[sp-0xac]) ? IF_BODY_215 : IF_ELSE_217
	lw $3, -0xac($29)
	bne $3, $0, IF_BODY_215
	j IF_ELSE_217
IF_BODY_215:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_216
	j IF_END_216
IF_ELSE_217:
	# JUMP L_OR_EXP_218
	j L_OR_EXP_218
L_OR_EXP_218:
	# JUMP L_AND_EXP_220
	j L_AND_EXP_220
L_AND_EXP_220:
	# EQ, INT(tmp_int_138[temp]), INT(select[sp-0x10]), 13
	lw $14, -0x10($29)
	seq $24, $14, 13
	# ASS, INT(tmp_int_139[temp]), INT(tmp_int_138[temp])
	move $9, $24
	# Branch INT(tmp_int_138[temp]) ? AND_222 : AND_END_221
	sw $24, -0xb0($29)
	sw $9, -0xb4($29)
	sw $14, -0x10($29)
	lw $3, -0xb0($29)
	bne $3, $0, AND_222
	j AND_END_221
AND_222:
	# JUMP AND_END_221
	j AND_END_221
AND_END_221:
	# ASS, INT(tmp_int_140[temp]), INT(tmp_int_139[sp-0xb4])
	lw $16, -0xb4($29)
	move $11, $16
	# Branch INT(tmp_int_140[temp]) ? OR_END_219 : OR_223
	sw $16, -0xb4($29)
	sw $11, -0xb8($29)
	lw $3, -0xb8($29)
	bne $3, $0, OR_END_219
	j OR_223
OR_223:
	# JUMP OR_END_219
	j OR_END_219
OR_END_219:
	# Branch INT(tmp_int_140[sp-0xb8]) ? IF_BODY_224 : IF_ELSE_226
	lw $3, -0xb8($29)
	bne $3, $0, IF_BODY_224
	j IF_ELSE_226
IF_BODY_224:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# JUMP IF_END_225
	j IF_END_225
IF_ELSE_226:
	# JUMP L_OR_EXP_227
	j L_OR_EXP_227
L_OR_EXP_227:
	# JUMP L_AND_EXP_229
	j L_AND_EXP_229
L_AND_EXP_229:
	# EQ, INT(tmp_int_141[temp]), INT(select[sp-0x10]), 14
	lw $12, -0x10($29)
	seq $17, $12, 14
	# ASS, INT(tmp_int_142[temp]), INT(tmp_int_141[temp])
	move $13, $17
	# Branch INT(tmp_int_141[temp]) ? AND_231 : AND_END_230
	sw $17, -0xbc($29)
	sw $12, -0x10($29)
	sw $13, -0xc0($29)
	lw $3, -0xbc($29)
	bne $3, $0, AND_231
	j AND_END_230
AND_231:
	# JUMP AND_END_230
	j AND_END_230
AND_END_230:
	# ASS, INT(tmp_int_143[temp]), INT(tmp_int_142[sp-0xc0])
	lw $18, -0xc0($29)
	move $20, $18
	# Branch INT(tmp_int_143[temp]) ? OR_END_228 : OR_232
	sw $18, -0xc0($29)
	sw $20, -0xc4($29)
	lw $3, -0xc4($29)
	bne $3, $0, OR_END_228
	j OR_232
OR_232:
	# JUMP OR_END_228
	j OR_END_228
OR_END_228:
	# Branch INT(tmp_int_143[sp-0xc4]) ? IF_BODY_233 : IF_ELSE_235
	lw $3, -0xc4($29)
	bne $3, $0, IF_BODY_233
	j IF_ELSE_235
IF_BODY_233:
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_234
	j IF_END_234
IF_ELSE_235:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num1[sp-0x4])
	li $2, 1
	lw $4, -0x4($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num2[sp-0x8])
	li $2, 1
	lw $4, -0x8($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(num3[sp-0xc])
	li $2, 1
	lw $4, -0xc($29)
	syscall
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# JUMP IF_END_234
	j IF_END_234
IF_END_234:
	# JUMP IF_END_225
	j IF_END_225
IF_END_225:
	# JUMP IF_END_216
	j IF_END_216
IF_END_216:
	# JUMP IF_END_207
	j IF_END_207
IF_END_207:
	# JUMP IF_END_198
	j IF_END_198
IF_END_198:
	# JUMP IF_END_189
	j IF_END_189
IF_END_189:
	# JUMP IF_END_180
	j IF_END_180
IF_END_180:
	# JUMP IF_END_171
	j IF_END_171
IF_END_171:
	# JUMP IF_END_162
	j IF_END_162
IF_END_162:
	# JUMP IF_END_153
	j IF_END_153
IF_END_153:
	# JUMP IF_END_144
	j IF_END_144
IF_END_144:
	# JUMP IF_END_135
	j IF_END_135
IF_END_135:
	# JUMP IF_END_126
	j IF_END_126
IF_END_126:
	# JUMP IF_END_117
	j IF_END_117
IF_END_117:
	# JUMP IF_END_108
	j IF_END_108
IF_END_108:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_initArr:
	# DEF, INT(i[sp-0xc]), 0
	li $15, 0
	# JUMP WHILE_237
	sw $15, -0xc($29)
	j WHILE_237
WHILE_237:
	# JUMP L_OR_EXP_240
	j L_OR_EXP_240
L_OR_EXP_240:
	# JUMP L_AND_EXP_242
	j L_AND_EXP_242
L_AND_EXP_242:
	# LT, INT(tmp_int_144[temp]), INT(i[sp-0xc]), INT(total[sp-0x8])
	lw $21, -0xc($29)
	lw $25, -0x8($29)
	slt $19, $21, $25
	# ASS, INT(tmp_int_145[temp]), INT(tmp_int_144[temp])
	move $22, $19
	# Branch INT(tmp_int_144[temp]) ? AND_244 : AND_END_243
	sw $19, -0x10($29)
	sw $21, -0xc($29)
	sw $22, -0x14($29)
	sw $25, -0x8($29)
	lw $3, -0x10($29)
	bne $3, $0, AND_244
	j AND_END_243
AND_244:
	# JUMP AND_END_243
	j AND_END_243
AND_END_243:
	# ASS, INT(tmp_int_146[temp]), INT(tmp_int_145[sp-0x14])
	lw $10, -0x14($29)
	move $23, $10
	# Branch INT(tmp_int_146[temp]) ? OR_END_241 : OR_245
	sw $23, -0x18($29)
	sw $10, -0x14($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_241
	j OR_245
OR_245:
	# JUMP OR_END_241
	j OR_END_241
OR_END_241:
	# Branch INT(tmp_int_146[sp-0x18]) ? WHILE_BODY_238 : WHILE_END_239
	lw $3, -0x18($29)
	bne $3, $0, WHILE_BODY_238
	j WHILE_END_239
WHILE_BODY_238:
	# JUMP B_246
	j B_246
B_246:
	# MUL, INT(tmp_int_147[temp]), INT(i[sp-0xc]), 4
	lw $26, -0xc($29)
	sll $5, $26, 2
	# ADD, INT(tmp_int_147[temp]), INT(tmp_int_147[temp]), 0
	addiu $5, $5, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_147[temp]))->POINTER(tmp_pointer_6[temp])
	lw $3, -0x4($29)
	addu $6, $3, $5
	# Call FUNC_rand; Params: ; RET INT(tmp_int_148[temp])
	sw $6, -0x1c($29)
	sw $26, -0xc($29)
	sw $31, 0x0($29)
	addiu $4, $29, -32
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 32
	lw $31, 0x0($29)
	move $27, $2
	# STORE POINTER(tmp_pointer_6[sp-0x1c]), INT(tmp_int_148[temp])
	lw $7, -0x1c($29)
	sw $27, 0x0($7)
	# ADD, INT(tmp_int_149[temp]), INT(i[sp-0xc]), 1
	lw $8, -0xc($29)
	addiu $24, $8, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_149[temp])
	move $8, $24
	# JUMP B_247
	sw $7, -0x1c($29)
	sw $8, -0xc($29)
	j B_247
B_247:
	# JUMP WHILE_237
	j WHILE_237
WHILE_END_239:
	# RETURN VOID
	jr $ra
	
FUNC_initDouble:
	# DEF, INT(i[sp-0xc]), 0
	li $9, 0
	# JUMP WHILE_249
	sw $9, -0xc($29)
	j WHILE_249
WHILE_249:
	# JUMP L_OR_EXP_252
	j L_OR_EXP_252
L_OR_EXP_252:
	# JUMP L_AND_EXP_254
	j L_AND_EXP_254
L_AND_EXP_254:
	# LT, INT(tmp_int_150[temp]), INT(i[sp-0xc]), INT(total[sp-0x8])
	lw $14, -0xc($29)
	lw $16, -0x8($29)
	slt $11, $14, $16
	# ASS, INT(tmp_int_151[temp]), INT(tmp_int_150[temp])
	move $17, $11
	# Branch INT(tmp_int_150[temp]) ? AND_256 : AND_END_255
	sw $16, -0x8($29)
	sw $17, -0x10($29)
	sw $11, -0x14($29)
	sw $14, -0xc($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_256
	j AND_END_255
AND_256:
	# JUMP AND_END_255
	j AND_END_255
AND_END_255:
	# ASS, INT(tmp_int_152[temp]), INT(tmp_int_151[sp-0x10])
	lw $12, -0x10($29)
	move $13, $12
	# Branch INT(tmp_int_152[temp]) ? OR_END_253 : OR_257
	sw $12, -0x10($29)
	sw $13, -0x18($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_253
	j OR_257
OR_257:
	# JUMP OR_END_253
	j OR_END_253
OR_END_253:
	# Branch INT(tmp_int_152[sp-0x18]) ? WHILE_BODY_250 : WHILE_END_251
	lw $3, -0x18($29)
	bne $3, $0, WHILE_BODY_250
	j WHILE_END_251
WHILE_BODY_250:
	# JUMP B_258
	j B_258
B_258:
	# MUL, INT(tmp_int_153[temp]), INT(i[sp-0xc]), 40
	lw $18, -0xc($29)
	sll $20, $18, 5
	sll $3, $18, 3
	addu $20, $20, $3
	# ADD, INT(tmp_int_153[temp]), INT(tmp_int_153[temp]), 0
	addiu $20, $20, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_153[temp]))->POINTER(tmp_pointer_7[temp])
	lw $3, -0x4($29)
	addu $15, $3, $20
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_7[temp]), INT(total[sp-0x8])
	sw $18, -0xc($29)
	sw $15, -0x1c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -32
	lw $3, -0x1c($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 32
	lw $31, 0x0($29)
	# ADD, INT(tmp_int_154[temp]), INT(i[sp-0xc]), 1
	lw $19, -0xc($29)
	addiu $21, $19, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_154[temp])
	move $19, $21
	# JUMP B_259
	sw $19, -0xc($29)
	j B_259
B_259:
	# JUMP WHILE_249
	j WHILE_249
WHILE_END_251:
	# RETURN VOID
	jr $ra
	
FUNC_calSum:
	# DEF, INT(i[sp-0xc]), 0
	li $22, 0
	# DEF, INT(ans[sp-0x10]), 0
	li $25, 0
	# JUMP WHILE_261
	sw $22, -0xc($29)
	sw $25, -0x10($29)
	j WHILE_261
WHILE_261:
	# JUMP L_OR_EXP_264
	j L_OR_EXP_264
L_OR_EXP_264:
	# JUMP L_AND_EXP_266
	j L_AND_EXP_266
L_AND_EXP_266:
	# LT, INT(tmp_int_155[temp]), INT(i[sp-0xc]), INT(total[sp-0x8])
	lw $23, -0xc($29)
	lw $10, -0x8($29)
	slt $5, $23, $10
	# ASS, INT(tmp_int_156[temp]), INT(tmp_int_155[temp])
	move $6, $5
	# Branch INT(tmp_int_155[temp]) ? AND_268 : AND_END_267
	sw $5, -0x14($29)
	sw $6, -0x18($29)
	sw $23, -0xc($29)
	sw $10, -0x8($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_268
	j AND_END_267
AND_268:
	# JUMP AND_END_267
	j AND_END_267
AND_END_267:
	# ASS, INT(tmp_int_157[temp]), INT(tmp_int_156[sp-0x18])
	lw $26, -0x18($29)
	move $27, $26
	# Branch INT(tmp_int_157[temp]) ? OR_END_265 : OR_269
	sw $26, -0x18($29)
	sw $27, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_265
	j OR_269
OR_269:
	# JUMP OR_END_265
	j OR_END_265
OR_END_265:
	# Branch INT(tmp_int_157[sp-0x1c]) ? WHILE_BODY_262 : WHILE_END_263
	lw $3, -0x1c($29)
	bne $3, $0, WHILE_BODY_262
	j WHILE_END_263
WHILE_BODY_262:
	# JUMP B_270
	j B_270
B_270:
	# MUL, INT(tmp_int_159[temp]), INT(i[sp-0xc]), 4
	lw $24, -0xc($29)
	sll $7, $24, 2
	# ADD, INT(tmp_int_159[temp]), INT(tmp_int_159[temp]), 0
	addiu $7, $7, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_159[temp]))->POINTER(tmp_pointer_8[temp])
	lw $3, -0x4($29)
	addu $8, $3, $7
	# LOAD POINTER(tmp_pointer_8[temp]), INT(tmp_int_160[temp])
	lw $9, 0x0($8)
	# ADD, INT(tmp_int_158[temp]), INT(ans[sp-0x10]), INT(tmp_int_160[temp])
	lw $16, -0x10($29)
	addu $17, $16, $9
	# ASS, INT(ans[sp-0x10]), INT(tmp_int_158[temp])
	move $16, $17
	# JUMP L_OR_EXP_271
	sw $16, -0x10($29)
	sw $24, -0xc($29)
	j L_OR_EXP_271
	# JUMP B_280
	j B_280
L_OR_EXP_271:
	# JUMP L_AND_EXP_273
	j L_AND_EXP_273
L_AND_EXP_273:
	# MOD, INT(tmp_int_161[temp]), INT(i[sp-0xc]), 2
	lw $11, -0xc($29)
	li $3, 2
	div $11 $3
	mfhi $14
	# ASS, INT(tmp_int_162[temp]), INT(tmp_int_161[temp])
	move $12, $14
	# Branch INT(tmp_int_161[temp]) ? AND_275 : AND_END_274
	sw $11, -0xc($29)
	sw $12, -0x20($29)
	sw $14, -0x24($29)
	lw $3, -0x24($29)
	bne $3, $0, AND_275
	j AND_END_274
AND_275:
	# JUMP AND_END_274
	j AND_END_274
AND_END_274:
	# ASS, INT(tmp_int_163[temp]), INT(tmp_int_162[sp-0x20])
	lw $13, -0x20($29)
	move $20, $13
	# Branch INT(tmp_int_163[temp]) ? OR_END_272 : OR_276
	sw $20, -0x28($29)
	sw $13, -0x20($29)
	lw $3, -0x28($29)
	bne $3, $0, OR_END_272
	j OR_276
OR_276:
	# JUMP OR_END_272
	j OR_END_272
OR_END_272:
	# Branch INT(tmp_int_163[sp-0x28]) ? IF_BODY_277 : IF_ELSE_279
	lw $3, -0x28($29)
	bne $3, $0, IF_BODY_277
	j IF_ELSE_279
IF_BODY_277:
	# ASS, INT(ans[sp-0x10]), INT(ans[sp-0x10])
	lw $18, -0x10($29)
	move $18, $18
	# JUMP IF_END_278
	sw $18, -0x10($29)
	j IF_END_278
IF_ELSE_279:
	# NEG, INT(tmp_int_164[temp]), INT(ans[sp-0x10])
	lw $15, -0x10($29)
	subu $21, $0, $15
	# ASS, INT(ans[sp-0x10]), INT(tmp_int_164[temp])
	move $15, $21
	# JUMP IF_END_278
	sw $15, -0x10($29)
	j IF_END_278
IF_END_278:
	# ADD, INT(tmp_int_165[temp]), INT(i[sp-0xc]), 1
	lw $19, -0xc($29)
	addiu $22, $19, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_165[temp])
	move $19, $22
	# JUMP B_280
	sw $19, -0xc($29)
	j B_280
B_280:
	# JUMP WHILE_261
	j WHILE_261
WHILE_END_263:
	# RETURN INT(ans[sp-0x10])
	lw $2, -0x10($29)
	jr $ra
	
FUNC_checkArr:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_166[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -16
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 16
	lw $31, 0x0($29)
	move $25, $2
	# MOD, INT(tmp_int_167[temp]), INT(tmp_int_166[temp]), 3
	li $3, 3
	div $25 $3
	mfhi $5
	# ADD, INT(tmp_int_168[temp]), INT(tmp_int_167[temp]), 3
	addiu $6, $5, 3
	# MOD, INT(tmp_int_169[temp]), INT(tmp_int_168[temp]), 3
	li $3, 3
	div $6 $3
	mfhi $23
	# DEF, INT(select[sp-0xc]), INT(tmp_int_169[temp])
	move $10, $23
	# JUMP L_OR_EXP_282
	sw $10, -0xc($29)
	j L_OR_EXP_282
L_OR_EXP_282:
	# JUMP L_AND_EXP_284
	j L_AND_EXP_284
L_AND_EXP_284:
	# EQ, INT(tmp_int_170[temp]), INT(select[sp-0xc]), 0
	lw $26, -0xc($29)
	seq $27, $26, 0
	# ASS, INT(tmp_int_171[temp]), INT(tmp_int_170[temp])
	move $7, $27
	# Branch INT(tmp_int_170[temp]) ? AND_286 : AND_END_285
	sw $7, -0x10($29)
	sw $26, -0xc($29)
	sw $27, -0x14($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_286
	j AND_END_285
AND_286:
	# JUMP AND_END_285
	j AND_END_285
AND_END_285:
	# ASS, INT(tmp_int_172[temp]), INT(tmp_int_171[sp-0x10])
	lw $8, -0x10($29)
	move $9, $8
	# Branch INT(tmp_int_172[temp]) ? OR_END_283 : OR_287
	sw $8, -0x10($29)
	sw $9, -0x18($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_283
	j OR_287
OR_287:
	# JUMP OR_END_283
	j OR_END_283
OR_END_283:
	# Branch INT(tmp_int_172[sp-0x18]) ? IF_BODY_288 : IF_END_289
	lw $3, -0x18($29)
	bne $3, $0, IF_BODY_288
	j IF_END_289
IF_BODY_288:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_174[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -28
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 28
	lw $31, 0x0($29)
	move $17, $2
	# MOD, INT(tmp_int_175[temp]), INT(tmp_int_174[temp]), INT(total[sp-0x8])
	lw $16, -0x8($29)
	div $17 $16
	mfhi $24
	# ADD, INT(tmp_int_176[temp]), INT(tmp_int_175[temp]), INT(total[sp-0x8])
	addu $11, $24, $16
	# MOD, INT(tmp_int_177[temp]), INT(tmp_int_176[temp]), INT(total[sp-0x8])
	div $11 $16
	mfhi $12
	# MUL, INT(tmp_int_173[temp]), INT(tmp_int_177[temp]), 4
	sll $14, $12, 2
	# ADD, INT(tmp_int_173[temp]), INT(tmp_int_173[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_173[temp]))->POINTER(tmp_pointer_9[temp])
	lw $3, -0x4($29)
	addu $20, $3, $14
	# LOAD POINTER(tmp_pointer_9[temp]), INT(tmp_int_178[temp])
	lw $13, 0x0($20)
	# Call FUNC_printOne; Params: INT(tmp_int_178[temp])
	sw $16, -0x8($29)
	sw $13, -0x1c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -32
	lw $3, -0x1c($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_printOne
	addiu $29, $29, 32
	lw $31, 0x0($29)
	# JUMP IF_END_289
	j IF_END_289
IF_END_289:
	# JUMP L_OR_EXP_290
	j L_OR_EXP_290
L_OR_EXP_290:
	# JUMP L_AND_EXP_292
	j L_AND_EXP_292
L_AND_EXP_292:
	# EQ, INT(tmp_int_179[temp]), INT(select[sp-0xc]), 1
	lw $18, -0xc($29)
	seq $21, $18, 1
	# ASS, INT(tmp_int_180[temp]), INT(tmp_int_179[temp])
	move $15, $21
	# Branch INT(tmp_int_179[temp]) ? AND_294 : AND_END_293
	sw $18, -0xc($29)
	sw $21, -0x20($29)
	sw $15, -0x24($29)
	lw $3, -0x20($29)
	bne $3, $0, AND_294
	j AND_END_293
AND_294:
	# JUMP AND_END_293
	j AND_END_293
AND_END_293:
	# ASS, INT(tmp_int_181[temp]), INT(tmp_int_180[sp-0x24])
	lw $22, -0x24($29)
	move $19, $22
	# Branch INT(tmp_int_181[temp]) ? OR_END_291 : OR_295
	sw $19, -0x28($29)
	sw $22, -0x24($29)
	lw $3, -0x28($29)
	bne $3, $0, OR_END_291
	j OR_295
OR_295:
	# JUMP OR_END_291
	j OR_END_291
OR_END_291:
	# Branch INT(tmp_int_181[sp-0x28]) ? IF_BODY_296 : IF_END_297
	lw $3, -0x28($29)
	bne $3, $0, IF_BODY_296
	j IF_END_297
IF_BODY_296:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_183[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -44
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 44
	lw $31, 0x0($29)
	move $25, $2
	# MOD, INT(tmp_int_184[temp]), INT(tmp_int_183[temp]), INT(total[sp-0x8])
	lw $5, -0x8($29)
	div $25 $5
	mfhi $6
	# ADD, INT(tmp_int_185[temp]), INT(tmp_int_184[temp]), INT(total[sp-0x8])
	addu $23, $6, $5
	# MOD, INT(tmp_int_186[temp]), INT(tmp_int_185[temp]), INT(total[sp-0x8])
	div $23 $5
	mfhi $10
	# MUL, INT(tmp_int_182[temp]), INT(tmp_int_186[temp]), 4
	sll $7, $10, 2
	# ADD, INT(tmp_int_182[temp]), INT(tmp_int_182[temp]), 0
	addiu $7, $7, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_182[temp]))->POINTER(tmp_pointer_10[temp])
	lw $3, -0x4($29)
	addu $26, $3, $7
	# LOAD POINTER(tmp_pointer_10[temp]), INT(tmp_int_187[temp])
	lw $27, 0x0($26)
	# Call FUNC_rand; Params: ; RET INT(tmp_int_189[temp])
	sw $5, -0x8($29)
	sw $27, -0x2c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -48
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 48
	lw $31, 0x0($29)
	move $8, $2
	# MOD, INT(tmp_int_190[temp]), INT(tmp_int_189[temp]), INT(total[sp-0x8])
	lw $9, -0x8($29)
	div $8 $9
	mfhi $17
	# ADD, INT(tmp_int_191[temp]), INT(tmp_int_190[temp]), INT(total[sp-0x8])
	addu $24, $17, $9
	# MOD, INT(tmp_int_192[temp]), INT(tmp_int_191[temp]), INT(total[sp-0x8])
	div $24 $9
	mfhi $11
	# MUL, INT(tmp_int_188[temp]), INT(tmp_int_192[temp]), 4
	sll $12, $11, 2
	# ADD, INT(tmp_int_188[temp]), INT(tmp_int_188[temp]), 0
	addiu $12, $12, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_188[temp]))->POINTER(tmp_pointer_11[temp])
	lw $3, -0x4($29)
	addu $14, $3, $12
	# LOAD POINTER(tmp_pointer_11[temp]), INT(tmp_int_193[temp])
	lw $20, 0x0($14)
	# Call FUNC_printTwo; Params: INT(tmp_int_187[sp-0x2c]), INT(tmp_int_193[temp])
	sw $20, -0x30($29)
	sw $9, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -52
	lw $3, -0x2c($29)
	sw $3, -0x4($4)
	lw $3, -0x30($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_printTwo
	addiu $29, $29, 52
	lw $31, 0x0($29)
	# JUMP IF_END_297
	j IF_END_297
IF_END_297:
	# JUMP L_OR_EXP_298
	j L_OR_EXP_298
L_OR_EXP_298:
	# JUMP L_AND_EXP_300
	j L_AND_EXP_300
L_AND_EXP_300:
	# EQ, INT(tmp_int_194[temp]), INT(select[sp-0xc]), 2
	lw $16, -0xc($29)
	seq $13, $16, 2
	# ASS, INT(tmp_int_195[temp]), INT(tmp_int_194[temp])
	move $18, $13
	# Branch INT(tmp_int_194[temp]) ? AND_302 : AND_END_301
	sw $16, -0xc($29)
	sw $18, -0x34($29)
	sw $13, -0x38($29)
	lw $3, -0x38($29)
	bne $3, $0, AND_302
	j AND_END_301
AND_302:
	# JUMP AND_END_301
	j AND_END_301
AND_END_301:
	# ASS, INT(tmp_int_196[temp]), INT(tmp_int_195[sp-0x34])
	lw $21, -0x34($29)
	move $15, $21
	# Branch INT(tmp_int_196[temp]) ? OR_END_299 : OR_303
	sw $21, -0x34($29)
	sw $15, -0x3c($29)
	lw $3, -0x3c($29)
	bne $3, $0, OR_END_299
	j OR_303
OR_303:
	# JUMP OR_END_299
	j OR_END_299
OR_END_299:
	# Branch INT(tmp_int_196[sp-0x3c]) ? IF_BODY_304 : IF_END_305
	lw $3, -0x3c($29)
	bne $3, $0, IF_BODY_304
	j IF_END_305
IF_BODY_304:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_198[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -64
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 64
	lw $31, 0x0($29)
	move $19, $2
	# MOD, INT(tmp_int_199[temp]), INT(tmp_int_198[temp]), INT(total[sp-0x8])
	lw $22, -0x8($29)
	div $19 $22
	mfhi $25
	# ADD, INT(tmp_int_200[temp]), INT(tmp_int_199[temp]), INT(total[sp-0x8])
	addu $6, $25, $22
	# MOD, INT(tmp_int_201[temp]), INT(tmp_int_200[temp]), INT(total[sp-0x8])
	div $6 $22
	mfhi $23
	# MUL, INT(tmp_int_197[temp]), INT(tmp_int_201[temp]), 4
	sll $10, $23, 2
	# ADD, INT(tmp_int_197[temp]), INT(tmp_int_197[temp]), 0
	addiu $10, $10, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_197[temp]))->POINTER(tmp_pointer_12[temp])
	lw $3, -0x4($29)
	addu $7, $3, $10
	# LOAD POINTER(tmp_pointer_12[temp]), INT(tmp_int_202[temp])
	lw $26, 0x0($7)
	# Call FUNC_rand; Params: ; RET INT(tmp_int_204[temp])
	sw $22, -0x8($29)
	sw $26, -0x40($29)
	sw $31, 0x0($29)
	addiu $4, $29, -68
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 68
	lw $31, 0x0($29)
	move $5, $2
	# MOD, INT(tmp_int_205[temp]), INT(tmp_int_204[temp]), INT(total[sp-0x8])
	lw $27, -0x8($29)
	div $5 $27
	mfhi $8
	# ADD, INT(tmp_int_206[temp]), INT(tmp_int_205[temp]), INT(total[sp-0x8])
	addu $17, $8, $27
	# MOD, INT(tmp_int_207[temp]), INT(tmp_int_206[temp]), INT(total[sp-0x8])
	div $17 $27
	mfhi $24
	# MUL, INT(tmp_int_203[temp]), INT(tmp_int_207[temp]), 4
	sll $11, $24, 2
	# ADD, INT(tmp_int_203[temp]), INT(tmp_int_203[temp]), 0
	addiu $11, $11, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_203[temp]))->POINTER(tmp_pointer_13[temp])
	lw $3, -0x4($29)
	addu $12, $3, $11
	# LOAD POINTER(tmp_pointer_13[temp]), INT(tmp_int_208[temp])
	lw $14, 0x0($12)
	# Call FUNC_rand; Params: ; RET INT(tmp_int_210[temp])
	sw $27, -0x8($29)
	sw $14, -0x44($29)
	sw $31, 0x0($29)
	addiu $4, $29, -72
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 72
	lw $31, 0x0($29)
	move $20, $2
	# MOD, INT(tmp_int_211[temp]), INT(tmp_int_210[temp]), INT(total[sp-0x8])
	lw $9, -0x8($29)
	div $20 $9
	mfhi $16
	# ADD, INT(tmp_int_212[temp]), INT(tmp_int_211[temp]), INT(total[sp-0x8])
	addu $18, $16, $9
	# MOD, INT(tmp_int_213[temp]), INT(tmp_int_212[temp]), INT(total[sp-0x8])
	div $18 $9
	mfhi $13
	# MUL, INT(tmp_int_209[temp]), INT(tmp_int_213[temp]), 4
	sll $21, $13, 2
	# ADD, INT(tmp_int_209[temp]), INT(tmp_int_209[temp]), 0
	addiu $21, $21, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_209[temp]))->POINTER(tmp_pointer_14[temp])
	lw $3, -0x4($29)
	addu $15, $3, $21
	# LOAD POINTER(tmp_pointer_14[temp]), INT(tmp_int_214[temp])
	lw $19, 0x0($15)
	# Call FUNC_printThree; Params: INT(tmp_int_202[sp-0x40]), INT(tmp_int_208[sp-0x44]), INT(tmp_int_214[temp])
	sw $19, -0x48($29)
	sw $9, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -76
	lw $3, -0x40($29)
	sw $3, -0x4($4)
	lw $3, -0x44($29)
	sw $3, -0x8($4)
	lw $3, -0x48($29)
	sw $3, -0xc($4)
	move $29, $4
	jal FUNC_printThree
	addiu $29, $29, 76
	lw $31, 0x0($29)
	# JUMP IF_END_305
	j IF_END_305
IF_END_305:
	# RETURN VOID
	jr $ra
	
FUNC_checkDouble:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_215[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -16
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 16
	lw $31, 0x0($29)
	move $25, $2
	# MOD, INT(tmp_int_216[temp]), INT(tmp_int_215[temp]), 3
	li $3, 3
	div $25 $3
	mfhi $6
	# ADD, INT(tmp_int_217[temp]), INT(tmp_int_216[temp]), 3
	addiu $23, $6, 3
	# MOD, INT(tmp_int_218[temp]), INT(tmp_int_217[temp]), 3
	li $3, 3
	div $23 $3
	mfhi $10
	# DEF, INT(select[sp-0xc]), INT(tmp_int_218[temp])
	move $7, $10
	# JUMP L_OR_EXP_307
	sw $7, -0xc($29)
	j L_OR_EXP_307
L_OR_EXP_307:
	# JUMP L_AND_EXP_309
	j L_AND_EXP_309
L_AND_EXP_309:
	# EQ, INT(tmp_int_219[temp]), INT(select[sp-0xc]), 0
	lw $22, -0xc($29)
	seq $26, $22, 0
	# ASS, INT(tmp_int_220[temp]), INT(tmp_int_219[temp])
	move $5, $26
	# Branch INT(tmp_int_219[temp]) ? AND_311 : AND_END_310
	sw $5, -0x10($29)
	sw $22, -0xc($29)
	sw $26, -0x14($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_311
	j AND_END_310
AND_311:
	# JUMP AND_END_310
	j AND_END_310
AND_END_310:
	# ASS, INT(tmp_int_221[temp]), INT(tmp_int_220[sp-0x10])
	lw $8, -0x10($29)
	move $17, $8
	# Branch INT(tmp_int_221[temp]) ? OR_END_308 : OR_312
	sw $17, -0x18($29)
	sw $8, -0x10($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_308
	j OR_312
OR_312:
	# JUMP OR_END_308
	j OR_END_308
OR_END_308:
	# Branch INT(tmp_int_221[sp-0x18]) ? IF_BODY_313 : IF_END_314
	lw $3, -0x18($29)
	bne $3, $0, IF_BODY_313
	j IF_END_314
IF_BODY_313:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_223[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -28
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 28
	lw $31, 0x0($29)
	move $24, $2
	# MOD, INT(tmp_int_224[temp]), INT(tmp_int_223[temp]), INT(total[sp-0x8])
	lw $11, -0x8($29)
	div $24 $11
	mfhi $12
	# ADD, INT(tmp_int_225[temp]), INT(tmp_int_224[temp]), INT(total[sp-0x8])
	addu $27, $12, $11
	# MOD, INT(tmp_int_226[temp]), INT(tmp_int_225[temp]), INT(total[sp-0x8])
	div $27 $11
	mfhi $14
	# MUL, INT(tmp_int_222[temp]), INT(tmp_int_226[temp]), 40
	sll $20, $14, 5
	sll $3, $14, 3
	addu $20, $20, $3
	# ADD, INT(tmp_int_222[temp]), INT(tmp_int_222[temp]), 0
	addiu $20, $20, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_222[temp]))->POINTER(tmp_pointer_15[temp])
	lw $3, -0x4($29)
	addu $16, $3, $20
	# Call FUNC_calSum; Params: POINTER(tmp_pointer_15[temp]), INT(total[sp-0x8]); RET INT(tmp_int_227[temp])
	sw $16, -0x1c($29)
	sw $11, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -32
	lw $3, -0x1c($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_calSum
	addiu $29, $29, 32
	lw $31, 0x0($29)
	move $18, $2
	# Call FUNC_printOne; Params: INT(tmp_int_227[temp])
	sw $18, -0x20($29)
	sw $31, 0x0($29)
	addiu $4, $29, -36
	lw $3, -0x20($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_printOne
	addiu $29, $29, 36
	lw $31, 0x0($29)
	# JUMP IF_END_314
	j IF_END_314
IF_END_314:
	# JUMP L_OR_EXP_315
	j L_OR_EXP_315
L_OR_EXP_315:
	# JUMP L_AND_EXP_317
	j L_AND_EXP_317
L_AND_EXP_317:
	# EQ, INT(tmp_int_228[temp]), INT(select[sp-0xc]), 1
	lw $13, -0xc($29)
	seq $21, $13, 1
	# ASS, INT(tmp_int_229[temp]), INT(tmp_int_228[temp])
	move $15, $21
	# Branch INT(tmp_int_228[temp]) ? AND_319 : AND_END_318
	sw $21, -0x24($29)
	sw $13, -0xc($29)
	sw $15, -0x28($29)
	lw $3, -0x24($29)
	bne $3, $0, AND_319
	j AND_END_318
AND_319:
	# JUMP AND_END_318
	j AND_END_318
AND_END_318:
	# ASS, INT(tmp_int_230[temp]), INT(tmp_int_229[sp-0x28])
	lw $19, -0x28($29)
	move $9, $19
	# Branch INT(tmp_int_230[temp]) ? OR_END_316 : OR_320
	sw $19, -0x28($29)
	sw $9, -0x2c($29)
	lw $3, -0x2c($29)
	bne $3, $0, OR_END_316
	j OR_320
OR_320:
	# JUMP OR_END_316
	j OR_END_316
OR_END_316:
	# Branch INT(tmp_int_230[sp-0x2c]) ? IF_BODY_321 : IF_END_322
	lw $3, -0x2c($29)
	bne $3, $0, IF_BODY_321
	j IF_END_322
IF_BODY_321:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_232[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -48
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 48
	lw $31, 0x0($29)
	move $25, $2
	# MOD, INT(tmp_int_233[temp]), INT(tmp_int_232[temp]), INT(total[sp-0x8])
	lw $6, -0x8($29)
	div $25 $6
	mfhi $23
	# ADD, INT(tmp_int_234[temp]), INT(tmp_int_233[temp]), INT(total[sp-0x8])
	addu $10, $23, $6
	# MOD, INT(tmp_int_235[temp]), INT(tmp_int_234[temp]), INT(total[sp-0x8])
	div $10 $6
	mfhi $7
	# MUL, INT(tmp_int_231[temp]), INT(tmp_int_235[temp]), 40
	sll $5, $7, 5
	sll $3, $7, 3
	addu $5, $5, $3
	# ADD, INT(tmp_int_231[temp]), INT(tmp_int_231[temp]), 0
	addiu $5, $5, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_231[temp]))->POINTER(tmp_pointer_16[temp])
	lw $3, -0x4($29)
	addu $22, $3, $5
	# Call FUNC_calSum; Params: POINTER(tmp_pointer_16[temp]), INT(total[sp-0x8]); RET INT(tmp_int_236[temp])
	sw $6, -0x8($29)
	sw $22, -0x30($29)
	sw $31, 0x0($29)
	addiu $4, $29, -52
	lw $3, -0x30($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_calSum
	addiu $29, $29, 52
	lw $31, 0x0($29)
	move $26, $2
	# Call FUNC_rand; Params: ; RET INT(tmp_int_238[temp])
	sw $26, -0x34($29)
	sw $31, 0x0($29)
	addiu $4, $29, -56
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 56
	lw $31, 0x0($29)
	move $17, $2
	# MOD, INT(tmp_int_239[temp]), INT(tmp_int_238[temp]), INT(total[sp-0x8])
	lw $8, -0x8($29)
	div $17 $8
	mfhi $24
	# ADD, INT(tmp_int_240[temp]), INT(tmp_int_239[temp]), INT(total[sp-0x8])
	addu $12, $24, $8
	# MOD, INT(tmp_int_241[temp]), INT(tmp_int_240[temp]), INT(total[sp-0x8])
	div $12 $8
	mfhi $27
	# MUL, INT(tmp_int_237[temp]), INT(tmp_int_241[temp]), 40
	sll $14, $27, 5
	sll $3, $27, 3
	addu $14, $14, $3
	# ADD, INT(tmp_int_237[temp]), INT(tmp_int_237[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_237[temp]))->POINTER(tmp_pointer_17[temp])
	lw $3, -0x4($29)
	addu $20, $3, $14
	# Call FUNC_calSum; Params: POINTER(tmp_pointer_17[temp]), INT(total[sp-0x8]); RET INT(tmp_int_242[temp])
	sw $20, -0x38($29)
	sw $8, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -60
	lw $3, -0x38($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_calSum
	addiu $29, $29, 60
	lw $31, 0x0($29)
	move $16, $2
	# Call FUNC_printTwo; Params: INT(tmp_int_236[sp-0x34]), INT(tmp_int_242[temp])
	sw $16, -0x3c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -64
	lw $3, -0x34($29)
	sw $3, -0x4($4)
	lw $3, -0x3c($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_printTwo
	addiu $29, $29, 64
	lw $31, 0x0($29)
	# JUMP IF_END_322
	j IF_END_322
IF_END_322:
	# JUMP L_OR_EXP_323
	j L_OR_EXP_323
L_OR_EXP_323:
	# JUMP L_AND_EXP_325
	j L_AND_EXP_325
L_AND_EXP_325:
	# EQ, INT(tmp_int_243[temp]), INT(select[sp-0xc]), 2
	lw $11, -0xc($29)
	seq $18, $11, 2
	# ASS, INT(tmp_int_244[temp]), INT(tmp_int_243[temp])
	move $21, $18
	# Branch INT(tmp_int_243[temp]) ? AND_327 : AND_END_326
	sw $18, -0x40($29)
	sw $21, -0x44($29)
	sw $11, -0xc($29)
	lw $3, -0x40($29)
	bne $3, $0, AND_327
	j AND_END_326
AND_327:
	# JUMP AND_END_326
	j AND_END_326
AND_END_326:
	# ASS, INT(tmp_int_245[temp]), INT(tmp_int_244[sp-0x44])
	lw $13, -0x44($29)
	move $15, $13
	# Branch INT(tmp_int_245[temp]) ? OR_END_324 : OR_328
	sw $13, -0x44($29)
	sw $15, -0x48($29)
	lw $3, -0x48($29)
	bne $3, $0, OR_END_324
	j OR_328
OR_328:
	# JUMP OR_END_324
	j OR_END_324
OR_END_324:
	# Branch INT(tmp_int_245[sp-0x48]) ? IF_BODY_329 : IF_END_330
	lw $3, -0x48($29)
	bne $3, $0, IF_BODY_329
	j IF_END_330
IF_BODY_329:
	# Call FUNC_rand; Params: ; RET INT(tmp_int_247[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -76
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 76
	lw $31, 0x0($29)
	move $19, $2
	# MOD, INT(tmp_int_248[temp]), INT(tmp_int_247[temp]), INT(total[sp-0x8])
	lw $9, -0x8($29)
	div $19 $9
	mfhi $25
	# ADD, INT(tmp_int_249[temp]), INT(tmp_int_248[temp]), INT(total[sp-0x8])
	addu $23, $25, $9
	# MOD, INT(tmp_int_250[temp]), INT(tmp_int_249[temp]), INT(total[sp-0x8])
	div $23 $9
	mfhi $10
	# MUL, INT(tmp_int_246[temp]), INT(tmp_int_250[temp]), 40
	sll $7, $10, 5
	sll $3, $10, 3
	addu $7, $7, $3
	# ADD, INT(tmp_int_246[temp]), INT(tmp_int_246[temp]), 0
	addiu $7, $7, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_246[temp]))->POINTER(tmp_pointer_18[temp])
	lw $3, -0x4($29)
	addu $5, $3, $7
	# Call FUNC_calSum; Params: POINTER(tmp_pointer_18[temp]), INT(total[sp-0x8]); RET INT(tmp_int_251[temp])
	sw $5, -0x4c($29)
	sw $9, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -80
	lw $3, -0x4c($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_calSum
	addiu $29, $29, 80
	lw $31, 0x0($29)
	move $6, $2
	# Call FUNC_rand; Params: ; RET INT(tmp_int_253[temp])
	sw $6, -0x50($29)
	sw $31, 0x0($29)
	addiu $4, $29, -84
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 84
	lw $31, 0x0($29)
	move $22, $2
	# MOD, INT(tmp_int_254[temp]), INT(tmp_int_253[temp]), INT(total[sp-0x8])
	lw $26, -0x8($29)
	div $22 $26
	mfhi $17
	# ADD, INT(tmp_int_255[temp]), INT(tmp_int_254[temp]), INT(total[sp-0x8])
	addu $24, $17, $26
	# MOD, INT(tmp_int_256[temp]), INT(tmp_int_255[temp]), INT(total[sp-0x8])
	div $24 $26
	mfhi $12
	# MUL, INT(tmp_int_252[temp]), INT(tmp_int_256[temp]), 40
	sll $27, $12, 5
	sll $3, $12, 3
	addu $27, $27, $3
	# ADD, INT(tmp_int_252[temp]), INT(tmp_int_252[temp]), 0
	addiu $27, $27, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_252[temp]))->POINTER(tmp_pointer_19[temp])
	lw $3, -0x4($29)
	addu $14, $3, $27
	# Call FUNC_calSum; Params: POINTER(tmp_pointer_19[temp]), INT(total[sp-0x8]); RET INT(tmp_int_257[temp])
	sw $26, -0x8($29)
	sw $14, -0x54($29)
	sw $31, 0x0($29)
	addiu $4, $29, -88
	lw $3, -0x54($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_calSum
	addiu $29, $29, 88
	lw $31, 0x0($29)
	move $20, $2
	# Call FUNC_rand; Params: ; RET INT(tmp_int_259[temp])
	sw $20, -0x58($29)
	sw $31, 0x0($29)
	addiu $4, $29, -92
	move $29, $4
	jal FUNC_rand
	addiu $29, $29, 92
	lw $31, 0x0($29)
	move $8, $2
	# MOD, INT(tmp_int_260[temp]), INT(tmp_int_259[temp]), INT(total[sp-0x8])
	lw $16, -0x8($29)
	div $8 $16
	mfhi $18
	# ADD, INT(tmp_int_261[temp]), INT(tmp_int_260[temp]), INT(total[sp-0x8])
	addu $21, $18, $16
	# MOD, INT(tmp_int_262[temp]), INT(tmp_int_261[temp]), INT(total[sp-0x8])
	div $21 $16
	mfhi $11
	# MUL, INT(tmp_int_258[temp]), INT(tmp_int_262[temp]), 40
	sll $13, $11, 5
	sll $3, $11, 3
	addu $13, $13, $3
	# ADD, INT(tmp_int_258[temp]), INT(tmp_int_258[temp]), 0
	addiu $13, $13, 0
	# OFFSET (ARRAY(arr[sp-0x4])+INT(tmp_int_258[temp]))->POINTER(tmp_pointer_20[temp])
	lw $3, -0x4($29)
	addu $15, $3, $13
	# Call FUNC_calSum; Params: POINTER(tmp_pointer_20[temp]), INT(total[sp-0x8]); RET INT(tmp_int_263[temp])
	sw $16, -0x8($29)
	sw $15, -0x5c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -96
	lw $3, -0x5c($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_calSum
	addiu $29, $29, 96
	lw $31, 0x0($29)
	move $19, $2
	# Call FUNC_printThree; Params: INT(tmp_int_251[sp-0x50]), INT(tmp_int_257[sp-0x58]), INT(tmp_int_263[temp])
	sw $19, -0x60($29)
	sw $31, 0x0($29)
	addiu $4, $29, -100
	lw $3, -0x50($29)
	sw $3, -0x4($4)
	lw $3, -0x58($29)
	sw $3, -0x8($4)
	lw $3, -0x60($29)
	sw $3, -0xc($4)
	move $29, $4
	jal FUNC_printThree
	addiu $29, $29, 100
	lw $31, 0x0($29)
	# JUMP IF_END_330
	j IF_END_330
IF_END_330:
	# RETURN VOID
	jr $ra
	
FUNC_bubbleSort:
	# DEF, INT(i[sp-0x8]), 0
	li $25, 0
	# JUMP L_OR_EXP_332
	sw $25, -0x8($29)
	j L_OR_EXP_332
L_OR_EXP_332:
	# JUMP L_AND_EXP_334
	j L_AND_EXP_334
L_AND_EXP_334:
	# LT, INT(tmp_int_264[temp]), INT(i[sp-0x8]), INT(total[sp-0x4])
	lw $23, -0x8($29)
	lw $10, -0x4($29)
	slt $7, $23, $10
	# ASS, INT(tmp_int_265[temp]), INT(tmp_int_264[temp])
	move $5, $7
	# Branch INT(tmp_int_264[temp]) ? AND_336 : AND_END_335
	sw $5, -0x14($29)
	sw $23, -0x8($29)
	sw $7, -0x18($29)
	sw $10, -0x4($29)
	lw $3, -0x18($29)
	bne $3, $0, AND_336
	j AND_END_335
AND_336:
	# JUMP AND_END_335
	j AND_END_335
AND_END_335:
	# ASS, INT(tmp_int_266[temp]), INT(tmp_int_265[sp-0x14])
	lw $9, -0x14($29)
	move $6, $9
	# Branch INT(tmp_int_266[temp]) ? OR_END_333 : OR_337
	sw $6, -0x1c($29)
	sw $9, -0x14($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_333
	j OR_337
OR_337:
	# JUMP OR_END_333
	j OR_END_333
OR_END_333:
	# Branch INT(tmp_int_266[sp-0x1c]) ? IF_BODY_338 : IF_END_339
	lw $3, -0x1c($29)
	bne $3, $0, IF_BODY_338
	j IF_END_339
IF_BODY_338:
	# JUMP WHILE_340
	j WHILE_340
WHILE_340:
	# JUMP L_OR_EXP_343
	j L_OR_EXP_343
L_OR_EXP_343:
	# JUMP L_AND_EXP_345
	j L_AND_EXP_345
L_AND_EXP_345:
	# ASS, INT(tmp_int_267[temp]), 114514
	li $22, 114514
	# Branch 114514 ? AND_347 : AND_END_346
	sw $22, -0x20($29)
	li $3, 114514
	bne $3, $0, AND_347
	j AND_END_346
AND_347:
	# JUMP AND_END_346
	j AND_END_346
AND_END_346:
	# ASS, INT(tmp_int_268[temp]), INT(tmp_int_267[sp-0x20])
	lw $17, -0x20($29)
	move $24, $17
	# Branch INT(tmp_int_268[temp]) ? OR_END_344 : OR_348
	sw $17, -0x20($29)
	sw $24, -0x24($29)
	lw $3, -0x24($29)
	bne $3, $0, OR_END_344
	j OR_348
OR_348:
	# JUMP OR_END_344
	j OR_END_344
OR_END_344:
	# Branch INT(tmp_int_268[sp-0x24]) ? WHILE_BODY_341 : WHILE_END_342
	lw $3, -0x24($29)
	bne $3, $0, WHILE_BODY_341
	j WHILE_END_342
WHILE_BODY_341:
	# JUMP B_349
	j B_349
B_349:
	# JUMP B_350
	j B_350
	# JUMP B_401
	j B_401
B_350:
	# DEF, INT(j[sp-0xc]), 0
	li $12, 0
	# JUMP L_OR_EXP_351
	sw $12, -0xc($29)
	j L_OR_EXP_351
	# JUMP B_400
	j B_400
L_OR_EXP_351:
	# JUMP L_AND_EXP_353
	j L_AND_EXP_353
L_AND_EXP_353:
	# SUB, INT(tmp_int_270[temp]), INT(total[sp-0x4]), INT(i[sp-0x8])
	lw $27, -0x4($29)
	lw $26, -0x8($29)
	subu $14, $27, $26
	# SUB, INT(tmp_int_271[temp]), INT(tmp_int_270[temp]), 1
	addiu $20, $14, -1
	# LT, INT(tmp_int_269[temp]), INT(j[sp-0xc]), INT(tmp_int_271[temp])
	lw $8, -0xc($29)
	slt $18, $8, $20
	# ASS, INT(tmp_int_272[temp]), INT(tmp_int_269[temp])
	move $21, $18
	# Branch INT(tmp_int_269[temp]) ? AND_355 : AND_END_354
	sw $18, -0x28($29)
	sw $21, -0x2c($29)
	sw $8, -0xc($29)
	sw $26, -0x8($29)
	sw $27, -0x4($29)
	lw $3, -0x28($29)
	bne $3, $0, AND_355
	j AND_END_354
AND_355:
	# JUMP AND_END_354
	j AND_END_354
AND_END_354:
	# ASS, INT(tmp_int_273[temp]), INT(tmp_int_272[sp-0x2c])
	lw $11, -0x2c($29)
	move $13, $11
	# Branch INT(tmp_int_273[temp]) ? OR_END_352 : OR_356
	sw $11, -0x2c($29)
	sw $13, -0x30($29)
	lw $3, -0x30($29)
	bne $3, $0, OR_END_352
	j OR_356
OR_356:
	# JUMP OR_END_352
	j OR_END_352
OR_END_352:
	# Branch INT(tmp_int_273[sp-0x30]) ? IF_BODY_357 : IF_END_358
	lw $3, -0x30($29)
	bne $3, $0, IF_BODY_357
	j IF_END_358
IF_BODY_357:
	# JUMP WHILE_359
	j WHILE_359
WHILE_359:
	# JUMP L_OR_EXP_362
	j L_OR_EXP_362
L_OR_EXP_362:
	# JUMP L_AND_EXP_364
	j L_AND_EXP_364
L_AND_EXP_364:
	# ASS, INT(tmp_int_274[temp]), 114514
	li $16, 114514
	# Branch 114514 ? AND_366 : AND_END_365
	sw $16, -0x34($29)
	li $3, 114514
	bne $3, $0, AND_366
	j AND_END_365
AND_366:
	# JUMP AND_END_365
	j AND_END_365
AND_END_365:
	# ASS, INT(tmp_int_275[temp]), INT(tmp_int_274[sp-0x34])
	lw $15, -0x34($29)
	move $19, $15
	# Branch INT(tmp_int_275[temp]) ? OR_END_363 : OR_367
	sw $19, -0x38($29)
	sw $15, -0x34($29)
	lw $3, -0x38($29)
	bne $3, $0, OR_END_363
	j OR_367
OR_367:
	# JUMP OR_END_363
	j OR_END_363
OR_END_363:
	# Branch INT(tmp_int_275[sp-0x38]) ? WHILE_BODY_360 : WHILE_END_361
	lw $3, -0x38($29)
	bne $3, $0, WHILE_BODY_360
	j WHILE_END_361
WHILE_BODY_360:
	# JUMP B_368
	j B_368
B_368:
	# JUMP B_369
	j B_369
	# JUMP B_391
	j B_391
B_369:
	# JUMP L_OR_EXP_370
	j L_OR_EXP_370
	# JUMP B_390
	j B_390
L_OR_EXP_370:
	# JUMP L_AND_EXP_372
	j L_AND_EXP_372
L_AND_EXP_372:
	# MUL, INT(tmp_int_276[temp]), INT(j[sp-0xc]), 4
	lw $25, -0xc($29)
	sll $5, $25, 2
	# ADD, INT(tmp_int_276[temp]), INT(tmp_int_276[temp]), 0
	addiu $5, $5, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_276[temp]))->POINTER(tmp_pointer_21[temp])
	addiu $3, $28, 2444
	addu $23, $3, $5
	# LOAD POINTER(tmp_pointer_21[temp]), INT(tmp_int_277[temp])
	lw $7, 0x0($23)
	# ADD, INT(tmp_int_280[temp]), INT(j[sp-0xc]), 1
	addiu $10, $25, 1
	# MUL, INT(tmp_int_279[temp]), INT(tmp_int_280[temp]), 4
	sll $6, $10, 2
	# ADD, INT(tmp_int_279[temp]), INT(tmp_int_279[temp]), 0
	addiu $6, $6, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_279[temp]))->POINTER(tmp_pointer_22[temp])
	addiu $3, $28, 2444
	addu $9, $3, $6
	# LOAD POINTER(tmp_pointer_22[temp]), INT(tmp_int_281[temp])
	lw $22, 0x0($9)
	# GT, INT(tmp_int_278[temp]), INT(tmp_int_277[temp]), INT(tmp_int_281[temp])
	sgt $17, $7, $22
	# ASS, INT(tmp_int_282[temp]), INT(tmp_int_278[temp])
	move $24, $17
	# Branch INT(tmp_int_278[temp]) ? AND_374 : AND_END_373
	sw $17, -0x3c($29)
	sw $24, -0x40($29)
	sw $25, -0xc($29)
	lw $3, -0x3c($29)
	bne $3, $0, AND_374
	j AND_END_373
AND_374:
	# JUMP AND_END_373
	j AND_END_373
AND_END_373:
	# ASS, INT(tmp_int_283[temp]), INT(tmp_int_282[sp-0x40])
	lw $12, -0x40($29)
	move $14, $12
	# Branch INT(tmp_int_283[temp]) ? OR_END_371 : OR_375
	sw $12, -0x40($29)
	sw $14, -0x44($29)
	lw $3, -0x44($29)
	bne $3, $0, OR_END_371
	j OR_375
OR_375:
	# JUMP OR_END_371
	j OR_END_371
OR_END_371:
	# Branch INT(tmp_int_283[sp-0x44]) ? IF_BODY_376 : IF_END_377
	lw $3, -0x44($29)
	bne $3, $0, IF_BODY_376
	j IF_END_377
IF_BODY_376:
	# JUMP B_378
	j B_378
B_378:
	# JUMP B_379
	j B_379
	# JUMP B_381
	j B_381
B_379:
	# MUL, INT(tmp_int_284[temp]), INT(j[sp-0xc]), 4
	lw $20, -0xc($29)
	sll $18, $20, 2
	# ADD, INT(tmp_int_284[temp]), INT(tmp_int_284[temp]), 0
	addiu $18, $18, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_284[temp]))->POINTER(tmp_pointer_23[temp])
	addiu $3, $28, 2444
	addu $21, $3, $18
	# LOAD POINTER(tmp_pointer_23[temp]), INT(tmp_int_285[temp])
	lw $8, 0x0($21)
	# DEF, INT(i[sp-0x10]), INT(tmp_int_285[temp])
	move $26, $8
	# MUL, INT(tmp_int_286[temp]), INT(j[sp-0xc]), 4
	sll $27, $20, 2
	# ADD, INT(tmp_int_286[temp]), INT(tmp_int_286[temp]), 0
	addiu $27, $27, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_286[temp]))->POINTER(tmp_pointer_24[temp])
	addiu $3, $28, 2444
	addu $11, $3, $27
	# ADD, INT(tmp_int_288[temp]), INT(j[sp-0xc]), 1
	addiu $13, $20, 1
	# MUL, INT(tmp_int_287[temp]), INT(tmp_int_288[temp]), 4
	sll $16, $13, 2
	# ADD, INT(tmp_int_287[temp]), INT(tmp_int_287[temp]), 0
	addiu $16, $16, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_287[temp]))->POINTER(tmp_pointer_25[temp])
	addiu $3, $28, 2444
	addu $19, $3, $16
	# LOAD POINTER(tmp_pointer_25[temp]), INT(tmp_int_289[temp])
	lw $15, 0x0($19)
	# STORE POINTER(tmp_pointer_24[temp]), INT(tmp_int_289[temp])
	sw $15, 0x0($11)
	# ADD, INT(tmp_int_291[temp]), INT(j[sp-0xc]), 1
	addiu $5, $20, 1
	# MUL, INT(tmp_int_290[temp]), INT(tmp_int_291[temp]), 4
	sll $23, $5, 2
	# ADD, INT(tmp_int_290[temp]), INT(tmp_int_290[temp]), 0
	addiu $23, $23, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_290[temp]))->POINTER(tmp_pointer_26[temp])
	addiu $3, $28, 2444
	addu $10, $3, $23
	# STORE POINTER(tmp_pointer_26[temp]), INT(i[sp-0x10])
	sw $26, 0x0($10)
	# JUMP B_380
	sw $20, -0xc($29)
	sw $26, -0x10($29)
	j B_380
B_380:
	# JUMP B_381
	j B_381
B_381:
	# JUMP IF_END_377
	j IF_END_377
IF_END_377:
	# ADD, INT(tmp_int_292[temp]), INT(j[sp-0xc]), 1
	lw $6, -0xc($29)
	addiu $9, $6, 1
	# ASS, INT(j[sp-0xc]), INT(tmp_int_292[temp])
	move $6, $9
	# JUMP L_OR_EXP_382
	sw $6, -0xc($29)
	j L_OR_EXP_382
L_OR_EXP_382:
	# JUMP L_AND_EXP_384
	j L_AND_EXP_384
L_AND_EXP_384:
	# SUB, INT(tmp_int_294[temp]), INT(total[sp-0x4]), INT(i[sp-0x8])
	lw $7, -0x4($29)
	lw $22, -0x8($29)
	subu $17, $7, $22
	# SUB, INT(tmp_int_295[temp]), INT(tmp_int_294[temp]), 1
	addiu $24, $17, -1
	# LT, INT(tmp_int_293[temp]), INT(j[sp-0xc]), INT(tmp_int_295[temp])
	lw $25, -0xc($29)
	slt $12, $25, $24
	# ASS, INT(tmp_int_296[temp]), INT(tmp_int_293[temp])
	move $14, $12
	# Branch INT(tmp_int_293[temp]) ? AND_386 : AND_END_385
	sw $22, -0x8($29)
	sw $7, -0x4($29)
	sw $25, -0xc($29)
	sw $12, -0x48($29)
	sw $14, -0x4c($29)
	lw $3, -0x48($29)
	bne $3, $0, AND_386
	j AND_END_385
AND_386:
	# JUMP AND_END_385
	j AND_END_385
AND_END_385:
	# ASS, INT(tmp_int_297[temp]), INT(tmp_int_296[sp-0x4c])
	lw $18, -0x4c($29)
	move $21, $18
	# Branch INT(tmp_int_297[temp]) ? OR_END_383 : OR_387
	sw $18, -0x4c($29)
	sw $21, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_383
	j OR_387
OR_387:
	# JUMP OR_END_383
	j OR_END_383
OR_END_383:
	# Branch INT(tmp_int_297[sp-0x50]) ? IF_BODY_388 : IF_END_389
	lw $3, -0x50($29)
	bne $3, $0, IF_BODY_388
	j IF_END_389
IF_BODY_388:
	# JUMP WHILE_359
	j WHILE_359
	# JUMP IF_END_389
	j IF_END_389
IF_END_389:
	# JUMP WHILE_END_361
	j WHILE_END_361
B_390:
	# JUMP B_391
	j B_391
B_391:
	# JUMP WHILE_359
	j WHILE_359
WHILE_END_361:
	# JUMP IF_END_358
	j IF_END_358
IF_END_358:
	# ADD, INT(tmp_int_298[temp]), INT(i[sp-0x8]), 1
	lw $8, -0x8($29)
	addiu $27, $8, 1
	# ASS, INT(i[sp-0x8]), INT(tmp_int_298[temp])
	move $8, $27
	# JUMP L_OR_EXP_392
	sw $8, -0x8($29)
	j L_OR_EXP_392
L_OR_EXP_392:
	# JUMP L_AND_EXP_394
	j L_AND_EXP_394
L_AND_EXP_394:
	# LT, INT(tmp_int_299[temp]), INT(i[sp-0x8]), INT(total[sp-0x4])
	lw $13, -0x8($29)
	lw $16, -0x4($29)
	slt $19, $13, $16
	# ASS, INT(tmp_int_300[temp]), INT(tmp_int_299[temp])
	move $11, $19
	# Branch INT(tmp_int_299[temp]) ? AND_396 : AND_END_395
	sw $16, -0x4($29)
	sw $19, -0x54($29)
	sw $11, -0x58($29)
	sw $13, -0x8($29)
	lw $3, -0x54($29)
	bne $3, $0, AND_396
	j AND_END_395
AND_396:
	# JUMP AND_END_395
	j AND_END_395
AND_END_395:
	# ASS, INT(tmp_int_301[temp]), INT(tmp_int_300[sp-0x58])
	lw $15, -0x58($29)
	move $5, $15
	# Branch INT(tmp_int_301[temp]) ? OR_END_393 : OR_397
	sw $5, -0x5c($29)
	sw $15, -0x58($29)
	lw $3, -0x5c($29)
	bne $3, $0, OR_END_393
	j OR_397
OR_397:
	# JUMP OR_END_393
	j OR_END_393
OR_END_393:
	# Branch INT(tmp_int_301[sp-0x5c]) ? IF_BODY_398 : IF_END_399
	lw $3, -0x5c($29)
	bne $3, $0, IF_BODY_398
	j IF_END_399
IF_BODY_398:
	# JUMP WHILE_340
	j WHILE_340
	# JUMP IF_END_399
	j IF_END_399
IF_END_399:
	# JUMP WHILE_END_342
	j WHILE_END_342
B_400:
	# JUMP B_401
	j B_401
B_401:
	# JUMP WHILE_340
	j WHILE_340
WHILE_END_342:
	# JUMP IF_END_339
	j IF_END_339
IF_END_339:
	# RETURN VOID
	jr $ra
	
FUNC_shellSort:
	# DIV, INT(tmp_int_302[temp]), INT(total[sp-0x4]), 2
	lw $23, -0x4($29)
	li $3, 2
	div $23 $3
	mflo $10
	# DEF, INT(gap[sp-0x8]), INT(tmp_int_302[temp])
	move $20, $10
	# JUMP WHILE_403
	sw $20, -0x8($29)
	sw $23, -0x4($29)
	j WHILE_403
WHILE_403:
	# JUMP L_OR_EXP_406
	j L_OR_EXP_406
L_OR_EXP_406:
	# JUMP L_AND_EXP_408
	j L_AND_EXP_408
L_AND_EXP_408:
	# ASS, INT(tmp_int_303[temp]), 114514
	li $26, 114514
	# Branch 114514 ? AND_410 : AND_END_409
	sw $26, -0x18($29)
	li $3, 114514
	bne $3, $0, AND_410
	j AND_END_409
AND_410:
	# JUMP AND_END_409
	j AND_END_409
AND_END_409:
	# ASS, INT(tmp_int_304[temp]), INT(tmp_int_303[sp-0x18])
	lw $9, -0x18($29)
	move $6, $9
	# Branch INT(tmp_int_304[temp]) ? OR_END_407 : OR_411
	sw $6, -0x1c($29)
	sw $9, -0x18($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_407
	j OR_411
OR_411:
	# JUMP OR_END_407
	j OR_END_407
OR_END_407:
	# Branch INT(tmp_int_304[sp-0x1c]) ? WHILE_BODY_404 : WHILE_END_405
	lw $3, -0x1c($29)
	bne $3, $0, WHILE_BODY_404
	j WHILE_END_405
WHILE_BODY_404:
	# JUMP B_412
	j B_412
B_412:
	# JUMP B_413
	j B_413
	# JUMP B_469
	j B_469
B_413:
	# JUMP L_OR_EXP_414
	j L_OR_EXP_414
	# JUMP B_468
	j B_468
L_OR_EXP_414:
	# JUMP L_AND_EXP_416
	j L_AND_EXP_416
L_AND_EXP_416:
	# NOT, INT(tmp_int_305[temp]), INT(gap[sp-0x8])
	lw $17, -0x8($29)
	seq $24, $0, $17
	# ASS, INT(tmp_int_306[temp]), INT(tmp_int_305[temp])
	move $22, $24
	# Branch INT(tmp_int_305[temp]) ? AND_418 : AND_END_417
	sw $17, -0x8($29)
	sw $22, -0x20($29)
	sw $24, -0x24($29)
	lw $3, -0x24($29)
	bne $3, $0, AND_418
	j AND_END_417
AND_418:
	# JUMP AND_END_417
	j AND_END_417
AND_END_417:
	# ASS, INT(tmp_int_307[temp]), INT(tmp_int_306[sp-0x20])
	lw $7, -0x20($29)
	move $25, $7
	# Branch INT(tmp_int_307[temp]) ? OR_END_415 : OR_419
	sw $7, -0x20($29)
	sw $25, -0x28($29)
	lw $3, -0x28($29)
	bne $3, $0, OR_END_415
	j OR_419
OR_419:
	# JUMP OR_END_415
	j OR_END_415
OR_END_415:
	# Branch INT(tmp_int_307[sp-0x28]) ? IF_BODY_420 : IF_END_421
	lw $3, -0x28($29)
	bne $3, $0, IF_BODY_420
	j IF_END_421
IF_BODY_420:
	# JUMP WHILE_END_405
	j WHILE_END_405
	# JUMP IF_END_421
	j IF_END_421
IF_END_421:
	# DEF, INT(i[sp-0xc]), INT(gap[sp-0x8])
	lw $12, -0x8($29)
	move $14, $12
	# JUMP WHILE_422
	sw $12, -0x8($29)
	sw $14, -0xc($29)
	j WHILE_422
WHILE_422:
	# JUMP L_OR_EXP_425
	j L_OR_EXP_425
L_OR_EXP_425:
	# JUMP L_AND_EXP_427
	j L_AND_EXP_427
L_AND_EXP_427:
	# ASS, INT(tmp_int_308[temp]), 114514
	li $18, 114514
	# Branch 114514 ? AND_429 : AND_END_428
	sw $18, -0x2c($29)
	li $3, 114514
	bne $3, $0, AND_429
	j AND_END_428
AND_429:
	# JUMP AND_END_428
	j AND_END_428
AND_END_428:
	# ASS, INT(tmp_int_309[temp]), INT(tmp_int_308[sp-0x2c])
	lw $21, -0x2c($29)
	move $27, $21
	# Branch INT(tmp_int_309[temp]) ? OR_END_426 : OR_430
	sw $21, -0x2c($29)
	sw $27, -0x30($29)
	lw $3, -0x30($29)
	bne $3, $0, OR_END_426
	j OR_430
OR_430:
	# JUMP OR_END_426
	j OR_END_426
OR_END_426:
	# Branch INT(tmp_int_309[sp-0x30]) ? WHILE_BODY_423 : WHILE_END_424
	lw $3, -0x30($29)
	bne $3, $0, WHILE_BODY_423
	j WHILE_END_424
WHILE_BODY_423:
	# JUMP B_431
	j B_431
B_431:
	# JUMP B_432
	j B_432
	# JUMP B_467
	j B_467
B_432:
	# JUMP L_OR_EXP_433
	j L_OR_EXP_433
	# JUMP B_466
	j B_466
L_OR_EXP_433:
	# JUMP L_AND_EXP_435
	j L_AND_EXP_435
L_AND_EXP_435:
	# GE, INT(tmp_int_310[temp]), INT(i[sp-0xc]), INT(total[sp-0x4])
	lw $8, -0xc($29)
	lw $16, -0x4($29)
	sge $19, $8, $16
	# ASS, INT(tmp_int_311[temp]), INT(tmp_int_310[temp])
	move $11, $19
	# Branch INT(tmp_int_310[temp]) ? AND_437 : AND_END_436
	sw $16, -0x4($29)
	sw $19, -0x34($29)
	sw $8, -0xc($29)
	sw $11, -0x38($29)
	lw $3, -0x34($29)
	bne $3, $0, AND_437
	j AND_END_436
AND_437:
	# JUMP AND_END_436
	j AND_END_436
AND_END_436:
	# ASS, INT(tmp_int_312[temp]), INT(tmp_int_311[sp-0x38])
	lw $13, -0x38($29)
	move $5, $13
	# Branch INT(tmp_int_312[temp]) ? OR_END_434 : OR_438
	sw $5, -0x3c($29)
	sw $13, -0x38($29)
	lw $3, -0x3c($29)
	bne $3, $0, OR_END_434
	j OR_438
OR_438:
	# JUMP OR_END_434
	j OR_END_434
OR_END_434:
	# Branch INT(tmp_int_312[sp-0x3c]) ? IF_BODY_439 : IF_END_440
	lw $3, -0x3c($29)
	bne $3, $0, IF_BODY_439
	j IF_END_440
IF_BODY_439:
	# JUMP WHILE_END_424
	j WHILE_END_424
	# JUMP IF_END_440
	j IF_END_440
IF_END_440:
	# SUB, INT(tmp_int_313[temp]), INT(i[sp-0xc]), INT(gap[sp-0x8])
	lw $15, -0xc($29)
	lw $10, -0x8($29)
	subu $20, $15, $10
	# DEF, INT(j[sp-0x10]), INT(tmp_int_313[temp])
	move $23, $20
	# JUMP WHILE_441
	sw $23, -0x10($29)
	sw $10, -0x8($29)
	sw $15, -0xc($29)
	j WHILE_441
WHILE_441:
	# JUMP L_OR_EXP_444
	j L_OR_EXP_444
L_OR_EXP_444:
	# JUMP L_AND_EXP_446
	j L_AND_EXP_446
L_AND_EXP_446:
	# ASS, INT(tmp_int_314[temp]), 114514
	li $26, 114514
	# Branch 114514 ? AND_448 : AND_END_447
	sw $26, -0x40($29)
	li $3, 114514
	bne $3, $0, AND_448
	j AND_END_447
AND_448:
	# JUMP AND_END_447
	j AND_END_447
AND_END_447:
	# ASS, INT(tmp_int_315[temp]), INT(tmp_int_314[sp-0x40])
	lw $6, -0x40($29)
	move $9, $6
	# Branch INT(tmp_int_315[temp]) ? OR_END_445 : OR_449
	sw $6, -0x40($29)
	sw $9, -0x44($29)
	lw $3, -0x44($29)
	bne $3, $0, OR_END_445
	j OR_449
OR_449:
	# JUMP OR_END_445
	j OR_END_445
OR_END_445:
	# Branch INT(tmp_int_315[sp-0x44]) ? WHILE_BODY_442 : WHILE_END_443
	lw $3, -0x44($29)
	bne $3, $0, WHILE_BODY_442
	j WHILE_END_443
WHILE_BODY_442:
	# JUMP B_450
	j B_450
B_450:
	# JUMP B_451
	j B_451
	# JUMP B_465
	j B_465
B_451:
	# JUMP L_OR_EXP_452
	j L_OR_EXP_452
	# JUMP B_464
	j B_464
L_OR_EXP_452:
	# JUMP L_AND_EXP_454
	j L_AND_EXP_454
L_AND_EXP_454:
	# LT, INT(tmp_int_316[temp]), INT(j[sp-0x10]), 0
	lw $17, -0x10($29)
	li $3, 0
	slt $22, $17, $3
	# ASS, INT(tmp_int_317[temp]), INT(tmp_int_316[temp])
	move $24, $22
	# Branch INT(tmp_int_316[temp]) ? AND_456 : AND_END_455
	sw $17, -0x10($29)
	sw $22, -0x48($29)
	sw $24, -0x4c($29)
	lw $3, -0x48($29)
	bne $3, $0, AND_456
	j AND_END_455
AND_456:
	# JUMP AND_END_455
	j AND_END_455
AND_END_455:
	# ASS, INT(tmp_int_318[temp]), INT(tmp_int_317[sp-0x4c])
	lw $7, -0x4c($29)
	move $25, $7
	# Branch INT(tmp_int_318[temp]) ? OR_END_453 : OR_457
	sw $7, -0x4c($29)
	sw $25, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_453
	j OR_457
OR_457:
	# JUMP L_AND_EXP_458
	j L_AND_EXP_458
L_AND_EXP_458:
	# MUL, INT(tmp_int_319[temp]), INT(j[sp-0x10]), 4
	lw $12, -0x10($29)
	sll $14, $12, 2
	# ADD, INT(tmp_int_319[temp]), INT(tmp_int_319[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_319[temp]))->POINTER(tmp_pointer_27[temp])
	addiu $3, $28, 2444
	addu $18, $3, $14
	# LOAD POINTER(tmp_pointer_27[temp]), INT(tmp_int_320[temp])
	lw $21, 0x0($18)
	# ADD, INT(tmp_int_323[temp]), INT(j[sp-0x10]), INT(gap[sp-0x8])
	lw $27, -0x8($29)
	addu $16, $12, $27
	# MUL, INT(tmp_int_322[temp]), INT(tmp_int_323[temp]), 4
	sll $19, $16, 2
	# ADD, INT(tmp_int_322[temp]), INT(tmp_int_322[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_322[temp]))->POINTER(tmp_pointer_28[temp])
	addiu $3, $28, 2444
	addu $8, $3, $19
	# LOAD POINTER(tmp_pointer_28[temp]), INT(tmp_int_324[temp])
	lw $11, 0x0($8)
	# LE, INT(tmp_int_321[temp]), INT(tmp_int_320[temp]), INT(tmp_int_324[temp])
	sle $5, $21, $11
	# ASS, INT(tmp_int_325[temp]), INT(tmp_int_321[temp])
	move $13, $5
	# Branch INT(tmp_int_321[temp]) ? AND_460 : AND_END_459
	sw $5, -0x54($29)
	sw $27, -0x8($29)
	sw $12, -0x10($29)
	sw $13, -0x58($29)
	lw $3, -0x54($29)
	bne $3, $0, AND_460
	j AND_END_459
AND_460:
	# JUMP AND_END_459
	j AND_END_459
AND_END_459:
	# OR, INT(tmp_int_318[sp-0x50]), INT(tmp_int_325[sp-0x58]), INT(tmp_int_318[sp-0x50])
	lw $20, -0x58($29)
	lw $23, -0x50($29)
	or $23, $20, $23
	# Branch INT(tmp_int_318[sp-0x50]) ? OR_END_453 : OR_461
	sw $20, -0x58($29)
	sw $23, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_453
	j OR_461
OR_461:
	# JUMP OR_END_453
	j OR_END_453
OR_END_453:
	# Branch INT(tmp_int_318[sp-0x50]) ? IF_BODY_462 : IF_END_463
	lw $3, -0x50($29)
	bne $3, $0, IF_BODY_462
	j IF_END_463
IF_BODY_462:
	# JUMP WHILE_END_443
	j WHILE_END_443
	# JUMP IF_END_463
	j IF_END_463
IF_END_463:
	# MUL, INT(tmp_int_326[temp]), INT(j[sp-0x10]), 4
	lw $10, -0x10($29)
	sll $15, $10, 2
	# ADD, INT(tmp_int_326[temp]), INT(tmp_int_326[temp]), 0
	addiu $15, $15, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_326[temp]))->POINTER(tmp_pointer_29[temp])
	addiu $3, $28, 2444
	addu $26, $3, $15
	# LOAD POINTER(tmp_pointer_29[temp]), INT(tmp_int_327[temp])
	lw $6, 0x0($26)
	# DEF, INT(i[sp-0x14]), INT(tmp_int_327[temp])
	move $9, $6
	# MUL, INT(tmp_int_328[temp]), INT(j[sp-0x10]), 4
	sll $17, $10, 2
	# ADD, INT(tmp_int_328[temp]), INT(tmp_int_328[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_328[temp]))->POINTER(tmp_pointer_30[temp])
	addiu $3, $28, 2444
	addu $22, $3, $17
	# ADD, INT(tmp_int_330[temp]), INT(j[sp-0x10]), INT(gap[sp-0x8])
	lw $24, -0x8($29)
	addu $7, $10, $24
	# MUL, INT(tmp_int_329[temp]), INT(tmp_int_330[temp]), 4
	sll $25, $7, 2
	# ADD, INT(tmp_int_329[temp]), INT(tmp_int_329[temp]), 0
	addiu $25, $25, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_329[temp]))->POINTER(tmp_pointer_31[temp])
	addiu $3, $28, 2444
	addu $14, $3, $25
	# LOAD POINTER(tmp_pointer_31[temp]), INT(tmp_int_331[temp])
	lw $18, 0x0($14)
	# STORE POINTER(tmp_pointer_30[temp]), INT(tmp_int_331[temp])
	sw $18, 0x0($22)
	# ADD, INT(tmp_int_333[temp]), INT(j[sp-0x10]), INT(gap[sp-0x8])
	addu $16, $10, $24
	# MUL, INT(tmp_int_332[temp]), INT(tmp_int_333[temp]), 4
	sll $19, $16, 2
	# ADD, INT(tmp_int_332[temp]), INT(tmp_int_332[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_332[temp]))->POINTER(tmp_pointer_32[temp])
	addiu $3, $28, 2444
	addu $8, $3, $19
	# STORE POINTER(tmp_pointer_32[temp]), INT(i[sp-0x14])
	sw $9, 0x0($8)
	# SUB, INT(tmp_int_334[temp]), INT(j[sp-0x10]), INT(gap[sp-0x8])
	subu $21, $10, $24
	# ASS, INT(j[sp-0x10]), INT(tmp_int_334[temp])
	move $10, $21
	# JUMP B_464
	sw $24, -0x8($29)
	sw $9, -0x14($29)
	sw $10, -0x10($29)
	j B_464
B_464:
	# JUMP B_465
	j B_465
B_465:
	# JUMP WHILE_441
	j WHILE_441
WHILE_END_443:
	# ADD, INT(tmp_int_335[temp]), INT(i[sp-0xc]), 1
	lw $11, -0xc($29)
	addiu $5, $11, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_335[temp])
	move $11, $5
	# JUMP B_466
	sw $11, -0xc($29)
	j B_466
B_466:
	# JUMP B_467
	j B_467
B_467:
	# JUMP WHILE_422
	j WHILE_422
WHILE_END_424:
	# DIV, INT(tmp_int_336[temp]), INT(gap[sp-0x8]), 2
	lw $27, -0x8($29)
	li $3, 2
	div $27 $3
	mflo $12
	# ASS, INT(gap[sp-0x8]), INT(tmp_int_336[temp])
	move $27, $12
	# JUMP B_468
	sw $27, -0x8($29)
	j B_468
B_468:
	# JUMP B_469
	j B_469
B_469:
	# JUMP WHILE_403
	j WHILE_403
WHILE_END_405:
	# RETURN VOID
	jr $ra
	
FUNC_merge:
	# DEF, INT(i[sp-0x10]), INT(l[sp-0x4])
	lw $13, -0x4($29)
	move $20, $13
	# ADD, INT(tmp_int_337[temp]), INT(mid[sp-0x8]), 1
	lw $23, -0x8($29)
	addiu $15, $23, 1
	# DEF, INT(j[sp-0x14]), INT(tmp_int_337[temp])
	move $26, $15
	# DEF, INT(k[sp-0x18]), INT(l[sp-0x4])
	move $6, $13
	# JUMP WHILE_471
	sw $20, -0x10($29)
	sw $6, -0x18($29)
	sw $23, -0x8($29)
	sw $26, -0x14($29)
	sw $13, -0x4($29)
	j WHILE_471
WHILE_471:
	# JUMP L_OR_EXP_474
	j L_OR_EXP_474
L_OR_EXP_474:
	# JUMP L_AND_EXP_476
	j L_AND_EXP_476
L_AND_EXP_476:
	# LE, INT(tmp_int_338[temp]), INT(i[sp-0x10]), INT(r[sp-0xc])
	lw $17, -0x10($29)
	lw $7, -0xc($29)
	sle $25, $17, $7
	# ASS, INT(tmp_int_339[temp]), INT(tmp_int_338[temp])
	move $14, $25
	# Branch INT(tmp_int_338[temp]) ? AND_478 : AND_END_477
	sw $17, -0x10($29)
	sw $7, -0xc($29)
	sw $25, -0x1c($29)
	sw $14, -0x20($29)
	lw $3, -0x1c($29)
	bne $3, $0, AND_478
	j AND_END_477
AND_478:
	# JUMP AND_END_477
	j AND_END_477
AND_END_477:
	# ASS, INT(tmp_int_340[temp]), INT(tmp_int_339[sp-0x20])
	lw $22, -0x20($29)
	move $18, $22
	# Branch INT(tmp_int_340[temp]) ? OR_END_475 : OR_479
	sw $18, -0x24($29)
	sw $22, -0x20($29)
	lw $3, -0x24($29)
	bne $3, $0, OR_END_475
	j OR_479
OR_479:
	# JUMP OR_END_475
	j OR_END_475
OR_END_475:
	# Branch INT(tmp_int_340[sp-0x24]) ? WHILE_BODY_472 : WHILE_END_473
	lw $3, -0x24($29)
	bne $3, $0, WHILE_BODY_472
	j WHILE_END_473
WHILE_BODY_472:
	# JUMP B_480
	j B_480
B_480:
	# JUMP B_481
	j B_481
	# JUMP B_485
	j B_485
B_481:
	# JUMP B_482
	j B_482
B_482:
	# MUL, INT(tmp_int_341[temp]), INT(i[sp-0x10]), 4
	lw $16, -0x10($29)
	sll $19, $16, 2
	# ADD, INT(tmp_int_341[temp]), INT(tmp_int_341[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(buf[data+0x194])+INT(tmp_int_341[temp]))->POINTER(tmp_pointer_33[temp])
	addiu $3, $28, 404
	addu $8, $3, $19
	# MUL, INT(tmp_int_342[temp]), INT(i[sp-0x10]), 4
	sll $21, $16, 2
	# ADD, INT(tmp_int_342[temp]), INT(tmp_int_342[temp]), 0
	addiu $21, $21, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_342[temp]))->POINTER(tmp_pointer_34[temp])
	addiu $3, $28, 2444
	addu $24, $3, $21
	# LOAD POINTER(tmp_pointer_34[temp]), INT(tmp_int_343[temp])
	lw $9, 0x0($24)
	# STORE POINTER(tmp_pointer_33[temp]), INT(tmp_int_343[temp])
	sw $9, 0x0($8)
	# ADD, INT(tmp_int_344[temp]), INT(i[sp-0x10]), 1
	addiu $10, $16, 1
	# ASS, INT(i[sp-0x10]), INT(tmp_int_344[temp])
	move $16, $10
	# JUMP B_483
	sw $16, -0x10($29)
	j B_483
B_483:
	# JUMP B_484
	j B_484
B_484:
	# JUMP B_485
	j B_485
B_485:
	# JUMP WHILE_471
	j WHILE_471
WHILE_END_473:
	# ASS, INT(i[sp-0x10]), INT(l[sp-0x4])
	lw $5, -0x4($29)
	move $11, $5
	# JUMP WHILE_486
	sw $5, -0x4($29)
	sw $11, -0x10($29)
	j WHILE_486
WHILE_486:
	# JUMP L_OR_EXP_489
	j L_OR_EXP_489
L_OR_EXP_489:
	# JUMP L_AND_EXP_491
	j L_AND_EXP_491
L_AND_EXP_491:
	# LE, INT(tmp_int_345[temp]), INT(i[sp-0x10]), INT(mid[sp-0x8])
	lw $12, -0x10($29)
	lw $27, -0x8($29)
	sle $15, $12, $27
	# ASS, INT(tmp_int_346[temp]), INT(tmp_int_345[temp])
	move $20, $15
	# Branch INT(tmp_int_345[temp]) ? AND_493 : AND_END_492
	sw $20, -0x28($29)
	sw $27, -0x8($29)
	sw $12, -0x10($29)
	sw $15, -0x2c($29)
	lw $3, -0x2c($29)
	bne $3, $0, AND_493
	j AND_END_492
AND_493:
	# JUMP AND_END_492
	j AND_END_492
AND_END_492:
	# ASS, INT(tmp_int_347[temp]), INT(tmp_int_346[sp-0x28])
	lw $6, -0x28($29)
	move $23, $6
	# Branch INT(tmp_int_347[temp]) ? OR_END_490 : OR_494
	sw $6, -0x28($29)
	sw $23, -0x30($29)
	lw $3, -0x30($29)
	bne $3, $0, OR_END_490
	j OR_494
OR_494:
	# JUMP L_AND_EXP_495
	j L_AND_EXP_495
L_AND_EXP_495:
	# LE, INT(tmp_int_348[temp]), INT(j[sp-0x14]), INT(r[sp-0xc])
	lw $26, -0x14($29)
	lw $13, -0xc($29)
	sle $17, $26, $13
	# ASS, INT(tmp_int_349[temp]), INT(tmp_int_348[temp])
	move $7, $17
	# Branch INT(tmp_int_348[temp]) ? AND_497 : AND_END_496
	sw $17, -0x34($29)
	sw $7, -0x38($29)
	sw $26, -0x14($29)
	sw $13, -0xc($29)
	lw $3, -0x34($29)
	bne $3, $0, AND_497
	j AND_END_496
AND_497:
	# JUMP AND_END_496
	j AND_END_496
AND_END_496:
	# OR, INT(tmp_int_347[sp-0x30]), INT(tmp_int_349[sp-0x38]), INT(tmp_int_347[sp-0x30])
	lw $25, -0x38($29)
	lw $14, -0x30($29)
	or $14, $25, $14
	# Branch INT(tmp_int_347[sp-0x30]) ? OR_END_490 : OR_498
	sw $25, -0x38($29)
	sw $14, -0x30($29)
	lw $3, -0x30($29)
	bne $3, $0, OR_END_490
	j OR_498
OR_498:
	# JUMP OR_END_490
	j OR_END_490
OR_END_490:
	# Branch INT(tmp_int_347[sp-0x30]) ? WHILE_BODY_487 : WHILE_END_488
	lw $3, -0x30($29)
	bne $3, $0, WHILE_BODY_487
	j WHILE_END_488
WHILE_BODY_487:
	# JUMP B_499
	j B_499
B_499:
	# JUMP B_500
	j B_500
	# JUMP B_555
	j B_555
B_500:
	# JUMP B_501
	j B_501
B_501:
	# JUMP L_OR_EXP_502
	j L_OR_EXP_502
L_OR_EXP_502:
	# JUMP L_AND_EXP_504
	j L_AND_EXP_504
L_AND_EXP_504:
	# GT, INT(tmp_int_350[temp]), INT(i[sp-0x10]), INT(mid[sp-0x8])
	lw $18, -0x10($29)
	lw $22, -0x8($29)
	sgt $19, $18, $22
	# ASS, INT(tmp_int_351[temp]), INT(tmp_int_350[temp])
	move $21, $19
	# Branch INT(tmp_int_350[temp]) ? AND_506 : AND_END_505
	sw $18, -0x10($29)
	sw $19, -0x3c($29)
	sw $21, -0x40($29)
	sw $22, -0x8($29)
	lw $3, -0x3c($29)
	bne $3, $0, AND_506
	j AND_END_505
AND_506:
	# JUMP AND_END_505
	j AND_END_505
AND_END_505:
	# ASS, INT(tmp_int_352[temp]), INT(tmp_int_351[sp-0x40])
	lw $24, -0x40($29)
	move $8, $24
	# Branch INT(tmp_int_352[temp]) ? OR_END_503 : OR_507
	sw $24, -0x40($29)
	sw $8, -0x44($29)
	lw $3, -0x44($29)
	bne $3, $0, OR_END_503
	j OR_507
OR_507:
	# JUMP OR_END_503
	j OR_END_503
OR_END_503:
	# Branch INT(tmp_int_352[sp-0x44]) ? IF_BODY_508 : IF_ELSE_510
	lw $3, -0x44($29)
	bne $3, $0, IF_BODY_508
	j IF_ELSE_510
IF_BODY_508:
	# JUMP B_511
	j B_511
B_511:
	# JUMP B_512
	j B_512
	# JUMP B_516
	j B_516
B_512:
	# JUMP B_513
	j B_513
B_513:
	# MUL, INT(tmp_int_353[temp]), INT(k[sp-0x18]), 4
	lw $9, -0x18($29)
	sll $10, $9, 2
	# ADD, INT(tmp_int_353[temp]), INT(tmp_int_353[temp]), 0
	addiu $10, $10, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_353[temp]))->POINTER(tmp_pointer_35[temp])
	addiu $3, $28, 2444
	addu $16, $3, $10
	# MUL, INT(tmp_int_354[temp]), INT(j[sp-0x14]), 4
	lw $5, -0x14($29)
	sll $11, $5, 2
	# ADD, INT(tmp_int_354[temp]), INT(tmp_int_354[temp]), 0
	addiu $11, $11, 0
	# OFFSET (ARRAY(buf[data+0x194])+INT(tmp_int_354[temp]))->POINTER(tmp_pointer_36[temp])
	addiu $3, $28, 404
	addu $20, $3, $11
	# LOAD POINTER(tmp_pointer_36[temp]), INT(tmp_int_355[temp])
	lw $27, 0x0($20)
	# STORE POINTER(tmp_pointer_35[temp]), INT(tmp_int_355[temp])
	sw $27, 0x0($16)
	# ADD, INT(tmp_int_356[temp]), INT(j[sp-0x14]), 1
	addiu $12, $5, 1
	# ASS, INT(j[sp-0x14]), INT(tmp_int_356[temp])
	move $5, $12
	# JUMP B_514
	sw $5, -0x14($29)
	sw $9, -0x18($29)
	j B_514
B_514:
	# JUMP B_515
	j B_515
B_515:
	# JUMP B_516
	j B_516
B_516:
	# JUMP IF_END_509
	j IF_END_509
IF_ELSE_510:
	# JUMP L_OR_EXP_517
	j L_OR_EXP_517
L_OR_EXP_517:
	# JUMP L_AND_EXP_519
	j L_AND_EXP_519
L_AND_EXP_519:
	# GT, INT(tmp_int_357[temp]), INT(j[sp-0x14]), INT(r[sp-0xc])
	lw $15, -0x14($29)
	lw $6, -0xc($29)
	sgt $23, $15, $6
	# ASS, INT(tmp_int_358[temp]), INT(tmp_int_357[temp])
	move $17, $23
	# Branch INT(tmp_int_357[temp]) ? AND_521 : AND_END_520
	sw $17, -0x48($29)
	sw $6, -0xc($29)
	sw $23, -0x4c($29)
	sw $15, -0x14($29)
	lw $3, -0x4c($29)
	bne $3, $0, AND_521
	j AND_END_520
AND_521:
	# JUMP AND_END_520
	j AND_END_520
AND_END_520:
	# ASS, INT(tmp_int_359[temp]), INT(tmp_int_358[sp-0x48])
	lw $7, -0x48($29)
	move $26, $7
	# Branch INT(tmp_int_359[temp]) ? OR_END_518 : OR_522
	sw $7, -0x48($29)
	sw $26, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, OR_END_518
	j OR_522
OR_522:
	# JUMP OR_END_518
	j OR_END_518
OR_END_518:
	# Branch INT(tmp_int_359[sp-0x50]) ? IF_BODY_523 : IF_ELSE_525
	lw $3, -0x50($29)
	bne $3, $0, IF_BODY_523
	j IF_ELSE_525
IF_BODY_523:
	# JUMP B_526
	j B_526
B_526:
	# JUMP B_527
	j B_527
	# JUMP B_531
	j B_531
B_527:
	# JUMP B_528
	j B_528
B_528:
	# MUL, INT(tmp_int_360[temp]), INT(k[sp-0x18]), 4
	lw $13, -0x18($29)
	sll $25, $13, 2
	# ADD, INT(tmp_int_360[temp]), INT(tmp_int_360[temp]), 0
	addiu $25, $25, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_360[temp]))->POINTER(tmp_pointer_37[temp])
	addiu $3, $28, 2444
	addu $14, $3, $25
	# MUL, INT(tmp_int_361[temp]), INT(i[sp-0x10]), 4
	lw $18, -0x10($29)
	sll $19, $18, 2
	# ADD, INT(tmp_int_361[temp]), INT(tmp_int_361[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(buf[data+0x194])+INT(tmp_int_361[temp]))->POINTER(tmp_pointer_38[temp])
	addiu $3, $28, 404
	addu $21, $3, $19
	# LOAD POINTER(tmp_pointer_38[temp]), INT(tmp_int_362[temp])
	lw $22, 0x0($21)
	# STORE POINTER(tmp_pointer_37[temp]), INT(tmp_int_362[temp])
	sw $22, 0x0($14)
	# ADD, INT(tmp_int_363[temp]), INT(i[sp-0x10]), 1
	addiu $24, $18, 1
	# ASS, INT(i[sp-0x10]), INT(tmp_int_363[temp])
	move $18, $24
	# JUMP B_529
	sw $18, -0x10($29)
	sw $13, -0x18($29)
	j B_529
B_529:
	# JUMP B_530
	j B_530
B_530:
	# JUMP B_531
	j B_531
B_531:
	# JUMP IF_END_524
	j IF_END_524
IF_ELSE_525:
	# JUMP L_OR_EXP_532
	j L_OR_EXP_532
L_OR_EXP_532:
	# JUMP L_AND_EXP_534
	j L_AND_EXP_534
L_AND_EXP_534:
	# MUL, INT(tmp_int_364[temp]), INT(i[sp-0x10]), 4
	lw $8, -0x10($29)
	sll $10, $8, 2
	# ADD, INT(tmp_int_364[temp]), INT(tmp_int_364[temp]), 0
	addiu $10, $10, 0
	# OFFSET (ARRAY(buf[data+0x194])+INT(tmp_int_364[temp]))->POINTER(tmp_pointer_39[temp])
	addiu $3, $28, 404
	addu $11, $3, $10
	# LOAD POINTER(tmp_pointer_39[temp]), INT(tmp_int_365[temp])
	lw $20, 0x0($11)
	# MUL, INT(tmp_int_367[temp]), INT(j[sp-0x14]), 4
	lw $16, -0x14($29)
	sll $27, $16, 2
	# ADD, INT(tmp_int_367[temp]), INT(tmp_int_367[temp]), 0
	addiu $27, $27, 0
	# OFFSET (ARRAY(buf[data+0x194])+INT(tmp_int_367[temp]))->POINTER(tmp_pointer_40[temp])
	addiu $3, $28, 404
	addu $12, $3, $27
	# LOAD POINTER(tmp_pointer_40[temp]), INT(tmp_int_368[temp])
	lw $5, 0x0($12)
	# GT, INT(tmp_int_366[temp]), INT(tmp_int_365[temp]), INT(tmp_int_368[temp])
	sgt $9, $20, $5
	# ASS, INT(tmp_int_369[temp]), INT(tmp_int_366[temp])
	move $17, $9
	# Branch INT(tmp_int_366[temp]) ? AND_536 : AND_END_535
	sw $16, -0x14($29)
	sw $17, -0x54($29)
	sw $8, -0x10($29)
	sw $9, -0x58($29)
	lw $3, -0x58($29)
	bne $3, $0, AND_536
	j AND_END_535
AND_536:
	# JUMP AND_END_535
	j AND_END_535
AND_END_535:
	# ASS, INT(tmp_int_370[temp]), INT(tmp_int_369[sp-0x54])
	lw $6, -0x54($29)
	move $23, $6
	# Branch INT(tmp_int_370[temp]) ? OR_END_533 : OR_537
	sw $6, -0x54($29)
	sw $23, -0x5c($29)
	lw $3, -0x5c($29)
	bne $3, $0, OR_END_533
	j OR_537
OR_537:
	# JUMP OR_END_533
	j OR_END_533
OR_END_533:
	# Branch INT(tmp_int_370[sp-0x5c]) ? IF_BODY_538 : IF_ELSE_540
	lw $3, -0x5c($29)
	bne $3, $0, IF_BODY_538
	j IF_ELSE_540
IF_BODY_538:
	# JUMP B_541
	j B_541
B_541:
	# JUMP B_542
	j B_542
	# JUMP B_546
	j B_546
B_542:
	# JUMP B_543
	j B_543
B_543:
	# MUL, INT(tmp_int_371[temp]), INT(k[sp-0x18]), 4
	lw $15, -0x18($29)
	sll $7, $15, 2
	# ADD, INT(tmp_int_371[temp]), INT(tmp_int_371[temp]), 0
	addiu $7, $7, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_371[temp]))->POINTER(tmp_pointer_41[temp])
	addiu $3, $28, 2444
	addu $26, $3, $7
	# MUL, INT(tmp_int_372[temp]), INT(j[sp-0x14]), 4
	lw $25, -0x14($29)
	sll $19, $25, 2
	# ADD, INT(tmp_int_372[temp]), INT(tmp_int_372[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(buf[data+0x194])+INT(tmp_int_372[temp]))->POINTER(tmp_pointer_42[temp])
	addiu $3, $28, 404
	addu $21, $3, $19
	# LOAD POINTER(tmp_pointer_42[temp]), INT(tmp_int_373[temp])
	lw $14, 0x0($21)
	# STORE POINTER(tmp_pointer_41[temp]), INT(tmp_int_373[temp])
	sw $14, 0x0($26)
	# ADD, INT(tmp_int_374[temp]), INT(j[sp-0x14]), 1
	addiu $22, $25, 1
	# ASS, INT(j[sp-0x14]), INT(tmp_int_374[temp])
	move $25, $22
	# JUMP B_544
	sw $25, -0x14($29)
	sw $15, -0x18($29)
	j B_544
B_544:
	# JUMP B_545
	j B_545
B_545:
	# JUMP B_546
	j B_546
B_546:
	# JUMP IF_END_539
	j IF_END_539
IF_ELSE_540:
	# JUMP B_547
	j B_547
B_547:
	# JUMP B_548
	j B_548
	# JUMP B_552
	j B_552
B_548:
	# JUMP B_549
	j B_549
B_549:
	# MUL, INT(tmp_int_375[temp]), INT(k[sp-0x18]), 4
	lw $24, -0x18($29)
	sll $18, $24, 2
	# ADD, INT(tmp_int_375[temp]), INT(tmp_int_375[temp]), 0
	addiu $18, $18, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_375[temp]))->POINTER(tmp_pointer_43[temp])
	addiu $3, $28, 2444
	addu $13, $3, $18
	# MUL, INT(tmp_int_376[temp]), INT(i[sp-0x10]), 4
	lw $10, -0x10($29)
	sll $11, $10, 2
	# ADD, INT(tmp_int_376[temp]), INT(tmp_int_376[temp]), 0
	addiu $11, $11, 0
	# OFFSET (ARRAY(buf[data+0x194])+INT(tmp_int_376[temp]))->POINTER(tmp_pointer_44[temp])
	addiu $3, $28, 404
	addu $27, $3, $11
	# LOAD POINTER(tmp_pointer_44[temp]), INT(tmp_int_377[temp])
	lw $12, 0x0($27)
	# STORE POINTER(tmp_pointer_43[temp]), INT(tmp_int_377[temp])
	sw $12, 0x0($13)
	# ADD, INT(tmp_int_378[temp]), INT(i[sp-0x10]), 1
	addiu $20, $10, 1
	# ASS, INT(i[sp-0x10]), INT(tmp_int_378[temp])
	move $10, $20
	# JUMP B_550
	sw $24, -0x18($29)
	sw $10, -0x10($29)
	j B_550
B_550:
	# JUMP B_551
	j B_551
B_551:
	# JUMP B_552
	j B_552
B_552:
	# JUMP IF_END_539
	j IF_END_539
IF_END_539:
	# JUMP IF_END_524
	j IF_END_524
IF_END_524:
	# JUMP IF_END_509
	j IF_END_509
IF_END_509:
	# ADD, INT(tmp_int_379[temp]), INT(k[sp-0x18]), 1
	lw $5, -0x18($29)
	addiu $16, $5, 1
	# ASS, INT(k[sp-0x18]), INT(tmp_int_379[temp])
	move $5, $16
	# JUMP B_553
	sw $5, -0x18($29)
	j B_553
B_553:
	# JUMP B_554
	j B_554
B_554:
	# JUMP B_555
	j B_555
B_555:
	# JUMP WHILE_486
	j WHILE_486
WHILE_END_488:
	# RETURN VOID
	jr $ra
	
FUNC_mergeSort:
	# JUMP L_OR_EXP_557
	j L_OR_EXP_557
L_OR_EXP_557:
	# JUMP L_AND_EXP_559
	j L_AND_EXP_559
L_AND_EXP_559:
	# GE, INT(tmp_int_380[temp]), INT(l[sp-0x4]), INT(r[sp-0x8])
	lw $17, -0x4($29)
	lw $8, -0x8($29)
	sge $9, $17, $8
	# ASS, INT(tmp_int_381[temp]), INT(tmp_int_380[temp])
	move $6, $9
	# Branch INT(tmp_int_380[temp]) ? AND_561 : AND_END_560
	sw $17, -0x4($29)
	sw $6, -0x10($29)
	sw $8, -0x8($29)
	sw $9, -0x14($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_561
	j AND_END_560
AND_561:
	# JUMP AND_END_560
	j AND_END_560
AND_END_560:
	# ASS, INT(tmp_int_382[temp]), INT(tmp_int_381[sp-0x10])
	lw $23, -0x10($29)
	move $7, $23
	# Branch INT(tmp_int_382[temp]) ? OR_END_558 : OR_562
	sw $23, -0x10($29)
	sw $7, -0x18($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_558
	j OR_562
OR_562:
	# JUMP OR_END_558
	j OR_END_558
OR_END_558:
	# Branch INT(tmp_int_382[sp-0x18]) ? IF_BODY_563 : IF_END_564
	lw $3, -0x18($29)
	bne $3, $0, IF_BODY_563
	j IF_END_564
IF_BODY_563:
	# RETURN VOID
	jr $ra
	# JUMP IF_END_564
	j IF_END_564
IF_END_564:
	# ADD, INT(tmp_int_383[temp]), INT(l[sp-0x4]), INT(r[sp-0x8])
	lw $19, -0x4($29)
	lw $21, -0x8($29)
	addu $26, $19, $21
	# DIV, INT(tmp_int_384[temp]), INT(tmp_int_383[temp]), 2
	li $3, 2
	div $26 $3
	mflo $14
	# DEF, INT(mid[sp-0xc]), INT(tmp_int_384[temp])
	move $22, $14
	# Call FUNC_mergeSort; Params: INT(l[sp-0x4]), INT(mid[sp-0xc])
	sw $19, -0x4($29)
	sw $21, -0x8($29)
	sw $22, -0xc($29)
	sw $31, 0x0($29)
	addiu $4, $29, -28
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	lw $3, -0xc($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_mergeSort
	addiu $29, $29, 28
	lw $31, 0x0($29)
	# ADD, INT(tmp_int_385[temp]), INT(mid[sp-0xc]), 1
	lw $25, -0xc($29)
	addiu $15, $25, 1
	# Call FUNC_mergeSort; Params: INT(tmp_int_385[temp]), INT(r[sp-0x8])
	sw $25, -0xc($29)
	sw $15, -0x1c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -32
	lw $3, -0x1c($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_mergeSort
	addiu $29, $29, 32
	lw $31, 0x0($29)
	# Call FUNC_merge; Params: INT(l[sp-0x4]), INT(mid[sp-0xc]), INT(r[sp-0x8])
	sw $31, 0x0($29)
	addiu $4, $29, -32
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	lw $3, -0xc($29)
	sw $3, -0x8($4)
	lw $3, -0x8($29)
	sw $3, -0xc($4)
	move $29, $4
	jal FUNC_merge
	addiu $29, $29, 32
	lw $31, 0x0($29)
	# RETURN VOID
	jr $ra
	
FUNC_quickSort:
	# JUMP L_OR_EXP_566
	j L_OR_EXP_566
L_OR_EXP_566:
	# JUMP L_AND_EXP_568
	j L_AND_EXP_568
L_AND_EXP_568:
	# GT, INT(tmp_int_386[temp]), INT(l[sp-0x4]), INT(r[sp-0x8])
	lw $18, -0x4($29)
	lw $11, -0x8($29)
	sgt $27, $18, $11
	# ASS, INT(tmp_int_387[temp]), INT(tmp_int_386[temp])
	move $13, $27
	# Branch INT(tmp_int_386[temp]) ? AND_570 : AND_END_569
	sw $18, -0x4($29)
	sw $11, -0x8($29)
	sw $27, -0x2c($29)
	sw $13, -0x30($29)
	lw $3, -0x2c($29)
	bne $3, $0, AND_570
	j AND_END_569
AND_570:
	# JUMP AND_END_569
	j AND_END_569
AND_END_569:
	# ASS, INT(tmp_int_388[temp]), INT(tmp_int_387[sp-0x30])
	lw $12, -0x30($29)
	move $20, $12
	# Branch INT(tmp_int_388[temp]) ? OR_END_567 : OR_571
	sw $20, -0x34($29)
	sw $12, -0x30($29)
	lw $3, -0x34($29)
	bne $3, $0, OR_END_567
	j OR_571
OR_571:
	# JUMP OR_END_567
	j OR_END_567
OR_END_567:
	# Branch INT(tmp_int_388[sp-0x34]) ? IF_BODY_572 : IF_END_573
	lw $3, -0x34($29)
	bne $3, $0, IF_BODY_572
	j IF_END_573
IF_BODY_572:
	# RETURN VOID
	jr $ra
	# JUMP IF_END_573
	j IF_END_573
IF_END_573:
	# ADD, INT(tmp_int_389[temp]), INT(l[sp-0x4]), INT(r[sp-0x8])
	lw $24, -0x4($29)
	lw $10, -0x8($29)
	addu $16, $24, $10
	# DIV, INT(tmp_int_390[temp]), INT(tmp_int_389[temp]), 2
	li $3, 2
	div $16 $3
	mflo $5
	# DEF, INT(mid[sp-0xc]), INT(tmp_int_390[temp])
	move $17, $5
	# JUMP L_OR_EXP_574
	sw $17, -0xc($29)
	sw $24, -0x4($29)
	sw $10, -0x8($29)
	j L_OR_EXP_574
L_OR_EXP_574:
	# JUMP L_AND_EXP_576
	j L_AND_EXP_576
L_AND_EXP_576:
	# MUL, INT(tmp_int_391[temp]), INT(l[sp-0x4]), 4
	lw $6, -0x4($29)
	sll $8, $6, 2
	# ADD, INT(tmp_int_391[temp]), INT(tmp_int_391[temp]), 0
	addiu $8, $8, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_391[temp]))->POINTER(tmp_pointer_45[temp])
	addiu $3, $28, 2444
	addu $9, $3, $8
	# LOAD POINTER(tmp_pointer_45[temp]), INT(tmp_int_392[temp])
	lw $23, 0x0($9)
	# MUL, INT(tmp_int_394[temp]), INT(r[sp-0x8]), 4
	lw $7, -0x8($29)
	sll $26, $7, 2
	# ADD, INT(tmp_int_394[temp]), INT(tmp_int_394[temp]), 0
	addiu $26, $26, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_394[temp]))->POINTER(tmp_pointer_46[temp])
	addiu $3, $28, 2444
	addu $14, $3, $26
	# LOAD POINTER(tmp_pointer_46[temp]), INT(tmp_int_395[temp])
	lw $19, 0x0($14)
	# GT, INT(tmp_int_393[temp]), INT(tmp_int_392[temp]), INT(tmp_int_395[temp])
	sgt $21, $23, $19
	# ASS, INT(tmp_int_396[temp]), INT(tmp_int_393[temp])
	move $22, $21
	# Branch INT(tmp_int_393[temp]) ? AND_578 : AND_END_577
	sw $21, -0x38($29)
	sw $6, -0x4($29)
	sw $22, -0x3c($29)
	sw $7, -0x8($29)
	lw $3, -0x38($29)
	bne $3, $0, AND_578
	j AND_END_577
AND_578:
	# JUMP AND_END_577
	j AND_END_577
AND_END_577:
	# ASS, INT(tmp_int_397[temp]), INT(tmp_int_396[sp-0x3c])
	lw $25, -0x3c($29)
	move $15, $25
	# Branch INT(tmp_int_397[temp]) ? OR_END_575 : OR_579
	sw $25, -0x3c($29)
	sw $15, -0x40($29)
	lw $3, -0x40($29)
	bne $3, $0, OR_END_575
	j OR_579
OR_579:
	# JUMP OR_END_575
	j OR_END_575
OR_END_575:
	# Branch INT(tmp_int_397[sp-0x40]) ? IF_BODY_580 : IF_END_581
	lw $3, -0x40($29)
	bne $3, $0, IF_BODY_580
	j IF_END_581
IF_BODY_580:
	# JUMP B_582
	j B_582
B_582:
	# JUMP B_583
	j B_583
	# JUMP B_587
	j B_587
B_583:
	# JUMP B_584
	j B_584
B_584:
	# MUL, INT(tmp_int_398[temp]), INT(l[sp-0x4]), 4
	lw $18, -0x4($29)
	sll $11, $18, 2
	# ADD, INT(tmp_int_398[temp]), INT(tmp_int_398[temp]), 0
	addiu $11, $11, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_398[temp]))->POINTER(tmp_pointer_47[temp])
	addiu $3, $28, 2444
	addu $27, $3, $11
	# LOAD POINTER(tmp_pointer_47[temp]), INT(tmp_int_399[temp])
	lw $13, 0x0($27)
	# DEF, INT(k[sp-0x10]), INT(tmp_int_399[temp])
	move $20, $13
	# MUL, INT(tmp_int_400[temp]), INT(l[sp-0x4]), 4
	sll $12, $18, 2
	# ADD, INT(tmp_int_400[temp]), INT(tmp_int_400[temp]), 0
	addiu $12, $12, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_400[temp]))->POINTER(tmp_pointer_48[temp])
	addiu $3, $28, 2444
	addu $16, $3, $12
	# MUL, INT(tmp_int_401[temp]), INT(r[sp-0x8]), 4
	lw $5, -0x8($29)
	sll $17, $5, 2
	# ADD, INT(tmp_int_401[temp]), INT(tmp_int_401[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_401[temp]))->POINTER(tmp_pointer_49[temp])
	addiu $3, $28, 2444
	addu $24, $3, $17
	# LOAD POINTER(tmp_pointer_49[temp]), INT(tmp_int_402[temp])
	lw $10, 0x0($24)
	# STORE POINTER(tmp_pointer_48[temp]), INT(tmp_int_402[temp])
	sw $10, 0x0($16)
	# MUL, INT(tmp_int_403[temp]), INT(r[sp-0x8]), 4
	sll $8, $5, 2
	# ADD, INT(tmp_int_403[temp]), INT(tmp_int_403[temp]), 0
	addiu $8, $8, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_403[temp]))->POINTER(tmp_pointer_50[temp])
	addiu $3, $28, 2444
	addu $9, $3, $8
	# STORE POINTER(tmp_pointer_50[temp]), INT(k[sp-0x10])
	sw $20, 0x0($9)
	# JUMP B_585
	sw $18, -0x4($29)
	sw $20, -0x10($29)
	sw $5, -0x8($29)
	j B_585
B_585:
	# JUMP B_586
	j B_586
B_586:
	# JUMP B_587
	j B_587
B_587:
	# JUMP IF_END_581
	j IF_END_581
IF_END_581:
	# JUMP L_OR_EXP_588
	j L_OR_EXP_588
L_OR_EXP_588:
	# JUMP L_AND_EXP_590
	j L_AND_EXP_590
L_AND_EXP_590:
	# MUL, INT(tmp_int_404[temp]), INT(r[sp-0x8]), 4
	lw $26, -0x8($29)
	sll $14, $26, 2
	# ADD, INT(tmp_int_404[temp]), INT(tmp_int_404[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_404[temp]))->POINTER(tmp_pointer_51[temp])
	addiu $3, $28, 2444
	addu $23, $3, $14
	# LOAD POINTER(tmp_pointer_51[temp]), INT(tmp_int_405[temp])
	lw $19, 0x0($23)
	# MUL, INT(tmp_int_407[temp]), INT(mid[sp-0xc]), 4
	lw $21, -0xc($29)
	sll $6, $21, 2
	# ADD, INT(tmp_int_407[temp]), INT(tmp_int_407[temp]), 0
	addiu $6, $6, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_407[temp]))->POINTER(tmp_pointer_52[temp])
	addiu $3, $28, 2444
	addu $22, $3, $6
	# LOAD POINTER(tmp_pointer_52[temp]), INT(tmp_int_408[temp])
	lw $7, 0x0($22)
	# LT, INT(tmp_int_406[temp]), INT(tmp_int_405[temp]), INT(tmp_int_408[temp])
	slt $25, $19, $7
	# ASS, INT(tmp_int_409[temp]), INT(tmp_int_406[temp])
	move $15, $25
	# Branch INT(tmp_int_406[temp]) ? AND_592 : AND_END_591
	sw $21, -0xc($29)
	sw $25, -0x44($29)
	sw $26, -0x8($29)
	sw $15, -0x48($29)
	lw $3, -0x44($29)
	bne $3, $0, AND_592
	j AND_END_591
AND_592:
	# JUMP AND_END_591
	j AND_END_591
AND_END_591:
	# ASS, INT(tmp_int_410[temp]), INT(tmp_int_409[sp-0x48])
	lw $11, -0x48($29)
	move $27, $11
	# Branch INT(tmp_int_410[temp]) ? OR_END_589 : OR_593
	sw $11, -0x48($29)
	sw $27, -0x4c($29)
	lw $3, -0x4c($29)
	bne $3, $0, OR_END_589
	j OR_593
OR_593:
	# JUMP OR_END_589
	j OR_END_589
OR_END_589:
	# Branch INT(tmp_int_410[sp-0x4c]) ? IF_BODY_594 : IF_END_595
	lw $3, -0x4c($29)
	bne $3, $0, IF_BODY_594
	j IF_END_595
IF_BODY_594:
	# JUMP B_596
	j B_596
B_596:
	# JUMP B_597
	j B_597
	# JUMP B_601
	j B_601
B_597:
	# JUMP B_598
	j B_598
B_598:
	# MUL, INT(tmp_int_411[temp]), INT(r[sp-0x8]), 4
	lw $13, -0x8($29)
	sll $12, $13, 2
	# ADD, INT(tmp_int_411[temp]), INT(tmp_int_411[temp]), 0
	addiu $12, $12, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_411[temp]))->POINTER(tmp_pointer_53[temp])
	addiu $3, $28, 2444
	addu $17, $3, $12
	# LOAD POINTER(tmp_pointer_53[temp]), INT(tmp_int_412[temp])
	lw $24, 0x0($17)
	# DEF, INT(k[sp-0x14]), INT(tmp_int_412[temp])
	move $16, $24
	# MUL, INT(tmp_int_413[temp]), INT(l[sp-0x4]), 4
	lw $10, -0x4($29)
	sll $8, $10, 2
	# ADD, INT(tmp_int_413[temp]), INT(tmp_int_413[temp]), 0
	addiu $8, $8, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_413[temp]))->POINTER(tmp_pointer_54[temp])
	addiu $3, $28, 2444
	addu $9, $3, $8
	# MUL, INT(tmp_int_414[temp]), INT(mid[sp-0xc]), 4
	lw $18, -0xc($29)
	sll $20, $18, 2
	# ADD, INT(tmp_int_414[temp]), INT(tmp_int_414[temp]), 0
	addiu $20, $20, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_414[temp]))->POINTER(tmp_pointer_55[temp])
	addiu $3, $28, 2444
	addu $5, $3, $20
	# LOAD POINTER(tmp_pointer_55[temp]), INT(tmp_int_415[temp])
	lw $14, 0x0($5)
	# STORE POINTER(tmp_pointer_54[temp]), INT(tmp_int_415[temp])
	sw $14, 0x0($9)
	# MUL, INT(tmp_int_416[temp]), INT(mid[sp-0xc]), 4
	sll $23, $18, 2
	# ADD, INT(tmp_int_416[temp]), INT(tmp_int_416[temp]), 0
	addiu $23, $23, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_416[temp]))->POINTER(tmp_pointer_56[temp])
	addiu $3, $28, 2444
	addu $6, $3, $23
	# STORE POINTER(tmp_pointer_56[temp]), INT(k[sp-0x14])
	sw $16, 0x0($6)
	# JUMP B_599
	sw $16, -0x14($29)
	sw $18, -0xc($29)
	sw $10, -0x4($29)
	sw $13, -0x8($29)
	j B_599
B_599:
	# JUMP B_600
	j B_600
B_600:
	# JUMP B_601
	j B_601
B_601:
	# JUMP IF_END_595
	j IF_END_595
IF_END_595:
	# JUMP L_OR_EXP_602
	j L_OR_EXP_602
L_OR_EXP_602:
	# JUMP L_AND_EXP_604
	j L_AND_EXP_604
L_AND_EXP_604:
	# MUL, INT(tmp_int_417[temp]), INT(l[sp-0x4]), 4
	lw $22, -0x4($29)
	sll $19, $22, 2
	# ADD, INT(tmp_int_417[temp]), INT(tmp_int_417[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_417[temp]))->POINTER(tmp_pointer_57[temp])
	addiu $3, $28, 2444
	addu $7, $3, $19
	# LOAD POINTER(tmp_pointer_57[temp]), INT(tmp_int_418[temp])
	lw $21, 0x0($7)
	# MUL, INT(tmp_int_420[temp]), INT(mid[sp-0xc]), 4
	lw $25, -0xc($29)
	sll $26, $25, 2
	# ADD, INT(tmp_int_420[temp]), INT(tmp_int_420[temp]), 0
	addiu $26, $26, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_420[temp]))->POINTER(tmp_pointer_58[temp])
	addiu $3, $28, 2444
	addu $15, $3, $26
	# LOAD POINTER(tmp_pointer_58[temp]), INT(tmp_int_421[temp])
	lw $11, 0x0($15)
	# LT, INT(tmp_int_419[temp]), INT(tmp_int_418[temp]), INT(tmp_int_421[temp])
	slt $27, $21, $11
	# ASS, INT(tmp_int_422[temp]), INT(tmp_int_419[temp])
	move $12, $27
	# Branch INT(tmp_int_419[temp]) ? AND_606 : AND_END_605
	sw $22, -0x4($29)
	sw $25, -0xc($29)
	sw $27, -0x50($29)
	sw $12, -0x54($29)
	lw $3, -0x50($29)
	bne $3, $0, AND_606
	j AND_END_605
AND_606:
	# JUMP AND_END_605
	j AND_END_605
AND_END_605:
	# ASS, INT(tmp_int_423[temp]), INT(tmp_int_422[sp-0x54])
	lw $17, -0x54($29)
	move $24, $17
	# Branch INT(tmp_int_423[temp]) ? OR_END_603 : OR_607
	sw $17, -0x54($29)
	sw $24, -0x58($29)
	lw $3, -0x58($29)
	bne $3, $0, OR_END_603
	j OR_607
OR_607:
	# JUMP OR_END_603
	j OR_END_603
OR_END_603:
	# Branch INT(tmp_int_423[sp-0x58]) ? IF_BODY_608 : IF_END_609
	lw $3, -0x58($29)
	bne $3, $0, IF_BODY_608
	j IF_END_609
IF_BODY_608:
	# JUMP B_610
	j B_610
B_610:
	# JUMP B_611
	j B_611
	# JUMP B_615
	j B_615
B_611:
	# JUMP B_612
	j B_612
B_612:
	# MUL, INT(tmp_int_424[temp]), INT(l[sp-0x4]), 4
	lw $8, -0x4($29)
	sll $20, $8, 2
	# ADD, INT(tmp_int_424[temp]), INT(tmp_int_424[temp]), 0
	addiu $20, $20, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_424[temp]))->POINTER(tmp_pointer_59[temp])
	addiu $3, $28, 2444
	addu $5, $3, $20
	# LOAD POINTER(tmp_pointer_59[temp]), INT(tmp_int_425[temp])
	lw $9, 0x0($5)
	# DEF, INT(k[sp-0x18]), INT(tmp_int_425[temp])
	move $14, $9
	# MUL, INT(tmp_int_426[temp]), INT(l[sp-0x4]), 4
	sll $23, $8, 2
	# ADD, INT(tmp_int_426[temp]), INT(tmp_int_426[temp]), 0
	addiu $23, $23, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_426[temp]))->POINTER(tmp_pointer_60[temp])
	addiu $3, $28, 2444
	addu $6, $3, $23
	# MUL, INT(tmp_int_427[temp]), INT(mid[sp-0xc]), 4
	lw $16, -0xc($29)
	sll $18, $16, 2
	# ADD, INT(tmp_int_427[temp]), INT(tmp_int_427[temp]), 0
	addiu $18, $18, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_427[temp]))->POINTER(tmp_pointer_61[temp])
	addiu $3, $28, 2444
	addu $10, $3, $18
	# LOAD POINTER(tmp_pointer_61[temp]), INT(tmp_int_428[temp])
	lw $13, 0x0($10)
	# STORE POINTER(tmp_pointer_60[temp]), INT(tmp_int_428[temp])
	sw $13, 0x0($6)
	# MUL, INT(tmp_int_429[temp]), INT(mid[sp-0xc]), 4
	sll $19, $16, 2
	# ADD, INT(tmp_int_429[temp]), INT(tmp_int_429[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_429[temp]))->POINTER(tmp_pointer_62[temp])
	addiu $3, $28, 2444
	addu $7, $3, $19
	# STORE POINTER(tmp_pointer_62[temp]), INT(k[sp-0x18])
	sw $14, 0x0($7)
	# JUMP B_613
	sw $16, -0xc($29)
	sw $8, -0x4($29)
	sw $14, -0x18($29)
	j B_613
B_613:
	# JUMP B_614
	j B_614
B_614:
	# JUMP B_615
	j B_615
B_615:
	# JUMP IF_END_609
	j IF_END_609
IF_END_609:
	# DEF, INT(i[sp-0x1c]), INT(l[sp-0x4])
	lw $26, -0x4($29)
	move $15, $26
	# DEF, INT(j[sp-0x20]), INT(r[sp-0x8])
	lw $21, -0x8($29)
	move $11, $21
	# MUL, INT(tmp_int_430[temp]), INT(l[sp-0x4]), 4
	sll $22, $26, 2
	# ADD, INT(tmp_int_430[temp]), INT(tmp_int_430[temp]), 0
	addiu $22, $22, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_430[temp]))->POINTER(tmp_pointer_63[temp])
	addiu $3, $28, 2444
	addu $25, $3, $22
	# LOAD POINTER(tmp_pointer_63[temp]), INT(tmp_int_431[temp])
	lw $27, 0x0($25)
	# DEF, INT(tmp[sp-0x24]), INT(tmp_int_431[temp])
	move $12, $27
	# JUMP WHILE_616
	sw $21, -0x8($29)
	sw $26, -0x4($29)
	sw $11, -0x20($29)
	sw $12, -0x24($29)
	sw $15, -0x1c($29)
	j WHILE_616
WHILE_616:
	# JUMP L_OR_EXP_619
	j L_OR_EXP_619
L_OR_EXP_619:
	# JUMP L_AND_EXP_621
	j L_AND_EXP_621
L_AND_EXP_621:
	# NEQ, INT(tmp_int_432[temp]), INT(i[sp-0x1c]), INT(j[sp-0x20])
	lw $17, -0x1c($29)
	lw $24, -0x20($29)
	sne $20, $17, $24
	# ASS, INT(tmp_int_433[temp]), INT(tmp_int_432[temp])
	move $5, $20
	# Branch INT(tmp_int_432[temp]) ? AND_623 : AND_END_622
	sw $17, -0x1c($29)
	sw $20, -0x5c($29)
	sw $5, -0x60($29)
	sw $24, -0x20($29)
	lw $3, -0x5c($29)
	bne $3, $0, AND_623
	j AND_END_622
AND_623:
	# JUMP AND_END_622
	j AND_END_622
AND_END_622:
	# ASS, INT(tmp_int_434[temp]), INT(tmp_int_433[sp-0x60])
	lw $9, -0x60($29)
	move $23, $9
	# Branch INT(tmp_int_434[temp]) ? OR_END_620 : OR_624
	sw $23, -0x64($29)
	sw $9, -0x60($29)
	lw $3, -0x64($29)
	bne $3, $0, OR_END_620
	j OR_624
OR_624:
	# JUMP OR_END_620
	j OR_END_620
OR_END_620:
	# Branch INT(tmp_int_434[sp-0x64]) ? WHILE_BODY_617 : WHILE_END_618
	lw $3, -0x64($29)
	bne $3, $0, WHILE_BODY_617
	j WHILE_END_618
WHILE_BODY_617:
	# JUMP B_625
	j B_625
B_625:
	# JUMP B_626
	j B_626
	# JUMP B_664
	j B_664
B_626:
	# JUMP B_627
	j B_627
B_627:
	# JUMP WHILE_628
	j WHILE_628
WHILE_628:
	# JUMP L_OR_EXP_631
	j L_OR_EXP_631
L_OR_EXP_631:
	# JUMP L_AND_EXP_633
	j L_AND_EXP_633
L_AND_EXP_633:
	# MUL, INT(tmp_int_435[temp]), INT(j[sp-0x20]), 4
	lw $18, -0x20($29)
	sll $10, $18, 2
	# ADD, INT(tmp_int_435[temp]), INT(tmp_int_435[temp]), 0
	addiu $10, $10, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_435[temp]))->POINTER(tmp_pointer_64[temp])
	addiu $3, $28, 2444
	addu $6, $3, $10
	# LOAD POINTER(tmp_pointer_64[temp]), INT(tmp_int_436[temp])
	lw $13, 0x0($6)
	# GE, INT(tmp_int_437[temp]), INT(tmp_int_436[temp]), INT(tmp[sp-0x24])
	lw $19, -0x24($29)
	sge $7, $13, $19
	# ASS, INT(tmp_int_438[temp]), INT(tmp_int_437[temp])
	move $16, $7
	# Branch INT(tmp_int_437[temp]) ? AND_635 : AND_END_634
	sw $16, -0x68($29)
	sw $18, -0x20($29)
	sw $19, -0x24($29)
	sw $7, -0x6c($29)
	lw $3, -0x6c($29)
	bne $3, $0, AND_635
	j AND_END_634
AND_635:
	# LT, INT(tmp_int_439[temp]), INT(i[sp-0x1c]), INT(j[sp-0x20])
	lw $8, -0x1c($29)
	lw $14, -0x20($29)
	slt $22, $8, $14
	# AND, INT(tmp_int_438[sp-0x68]), INT(tmp_int_439[temp]), INT(tmp_int_438[sp-0x68])
	lw $25, -0x68($29)
	sne $2, $22, 0
	sne $3, $25, 0
	and $25, $2, $3
	# Branch INT(tmp_int_438[sp-0x68]) ? AND_636 : AND_END_634
	sw $8, -0x1c($29)
	sw $25, -0x68($29)
	sw $14, -0x20($29)
	lw $3, -0x68($29)
	bne $3, $0, AND_636
	j AND_END_634
AND_636:
	# JUMP AND_END_634
	j AND_END_634
AND_END_634:
	# ASS, INT(tmp_int_440[temp]), INT(tmp_int_438[sp-0x68])
	lw $27, -0x68($29)
	move $21, $27
	# Branch INT(tmp_int_440[temp]) ? OR_END_632 : OR_637
	sw $21, -0x70($29)
	sw $27, -0x68($29)
	lw $3, -0x70($29)
	bne $3, $0, OR_END_632
	j OR_637
OR_637:
	# JUMP OR_END_632
	j OR_END_632
OR_END_632:
	# Branch INT(tmp_int_440[sp-0x70]) ? WHILE_BODY_629 : WHILE_END_630
	lw $3, -0x70($29)
	bne $3, $0, WHILE_BODY_629
	j WHILE_END_630
WHILE_BODY_629:
	# SUB, INT(tmp_int_441[temp]), INT(j[sp-0x20]), 1
	lw $26, -0x20($29)
	addiu $11, $26, -1
	# ASS, INT(j[sp-0x20]), INT(tmp_int_441[temp])
	move $26, $11
	# JUMP WHILE_628
	sw $26, -0x20($29)
	j WHILE_628
WHILE_END_630:
	# JUMP WHILE_638
	j WHILE_638
WHILE_638:
	# JUMP L_OR_EXP_641
	j L_OR_EXP_641
L_OR_EXP_641:
	# JUMP L_AND_EXP_643
	j L_AND_EXP_643
L_AND_EXP_643:
	# MUL, INT(tmp_int_442[temp]), INT(i[sp-0x1c]), 4
	lw $12, -0x1c($29)
	sll $15, $12, 2
	# ADD, INT(tmp_int_442[temp]), INT(tmp_int_442[temp]), 0
	addiu $15, $15, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_442[temp]))->POINTER(tmp_pointer_65[temp])
	addiu $3, $28, 2444
	addu $17, $3, $15
	# LOAD POINTER(tmp_pointer_65[temp]), INT(tmp_int_443[temp])
	lw $20, 0x0($17)
	# LE, INT(tmp_int_444[temp]), INT(tmp_int_443[temp]), INT(tmp[sp-0x24])
	lw $5, -0x24($29)
	sle $24, $20, $5
	# ASS, INT(tmp_int_445[temp]), INT(tmp_int_444[temp])
	move $23, $24
	# Branch INT(tmp_int_444[temp]) ? AND_645 : AND_END_644
	sw $5, -0x24($29)
	sw $23, -0x74($29)
	sw $24, -0x78($29)
	sw $12, -0x1c($29)
	lw $3, -0x78($29)
	bne $3, $0, AND_645
	j AND_END_644
AND_645:
	# LT, INT(tmp_int_446[temp]), INT(i[sp-0x1c]), INT(j[sp-0x20])
	lw $9, -0x1c($29)
	lw $10, -0x20($29)
	slt $6, $9, $10
	# AND, INT(tmp_int_445[sp-0x74]), INT(tmp_int_446[temp]), INT(tmp_int_445[sp-0x74])
	lw $13, -0x74($29)
	sne $2, $6, 0
	sne $3, $13, 0
	and $13, $2, $3
	# Branch INT(tmp_int_445[sp-0x74]) ? AND_646 : AND_END_644
	sw $9, -0x1c($29)
	sw $10, -0x20($29)
	sw $13, -0x74($29)
	lw $3, -0x74($29)
	bne $3, $0, AND_646
	j AND_END_644
AND_646:
	# JUMP AND_END_644
	j AND_END_644
AND_END_644:
	# ASS, INT(tmp_int_447[temp]), INT(tmp_int_445[sp-0x74])
	lw $16, -0x74($29)
	move $18, $16
	# Branch INT(tmp_int_447[temp]) ? OR_END_642 : OR_647
	sw $16, -0x74($29)
	sw $18, -0x7c($29)
	lw $3, -0x7c($29)
	bne $3, $0, OR_END_642
	j OR_647
OR_647:
	# JUMP OR_END_642
	j OR_END_642
OR_END_642:
	# Branch INT(tmp_int_447[sp-0x7c]) ? WHILE_BODY_639 : WHILE_END_640
	lw $3, -0x7c($29)
	bne $3, $0, WHILE_BODY_639
	j WHILE_END_640
WHILE_BODY_639:
	# ADD, INT(tmp_int_448[temp]), INT(i[sp-0x1c]), 1
	lw $19, -0x1c($29)
	addiu $7, $19, 1
	# ASS, INT(i[sp-0x1c]), INT(tmp_int_448[temp])
	move $19, $7
	# JUMP WHILE_638
	sw $19, -0x1c($29)
	j WHILE_638
WHILE_END_640:
	# JUMP L_OR_EXP_648
	j L_OR_EXP_648
L_OR_EXP_648:
	# JUMP L_AND_EXP_650
	j L_AND_EXP_650
L_AND_EXP_650:
	# LT, INT(tmp_int_449[temp]), INT(i[sp-0x1c]), INT(j[sp-0x20])
	lw $22, -0x1c($29)
	lw $8, -0x20($29)
	slt $25, $22, $8
	# ASS, INT(tmp_int_450[temp]), INT(tmp_int_449[temp])
	move $14, $25
	# Branch INT(tmp_int_449[temp]) ? AND_652 : AND_END_651
	sw $22, -0x1c($29)
	sw $8, -0x20($29)
	sw $25, -0x80($29)
	sw $14, -0x84($29)
	lw $3, -0x80($29)
	bne $3, $0, AND_652
	j AND_END_651
AND_652:
	# JUMP AND_END_651
	j AND_END_651
AND_END_651:
	# ASS, INT(tmp_int_451[temp]), INT(tmp_int_450[sp-0x84])
	lw $21, -0x84($29)
	move $27, $21
	# Branch INT(tmp_int_451[temp]) ? OR_END_649 : OR_653
	sw $21, -0x84($29)
	sw $27, -0x88($29)
	lw $3, -0x88($29)
	bne $3, $0, OR_END_649
	j OR_653
OR_653:
	# JUMP OR_END_649
	j OR_END_649
OR_END_649:
	# Branch INT(tmp_int_451[sp-0x88]) ? IF_BODY_654 : IF_END_655
	lw $3, -0x88($29)
	bne $3, $0, IF_BODY_654
	j IF_END_655
IF_BODY_654:
	# JUMP B_656
	j B_656
B_656:
	# JUMP B_657
	j B_657
	# JUMP B_661
	j B_661
B_657:
	# JUMP B_658
	j B_658
B_658:
	# MUL, INT(tmp_int_452[temp]), INT(i[sp-0x1c]), 4
	lw $11, -0x1c($29)
	sll $26, $11, 2
	# ADD, INT(tmp_int_452[temp]), INT(tmp_int_452[temp]), 0
	addiu $26, $26, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_452[temp]))->POINTER(tmp_pointer_66[temp])
	addiu $3, $28, 2444
	addu $15, $3, $26
	# LOAD POINTER(tmp_pointer_66[temp]), INT(tmp_int_453[temp])
	lw $17, 0x0($15)
	# DEF, INT(k[sp-0x28]), INT(tmp_int_453[temp])
	move $20, $17
	# MUL, INT(tmp_int_454[temp]), INT(i[sp-0x1c]), 4
	sll $5, $11, 2
	# ADD, INT(tmp_int_454[temp]), INT(tmp_int_454[temp]), 0
	addiu $5, $5, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_454[temp]))->POINTER(tmp_pointer_67[temp])
	addiu $3, $28, 2444
	addu $23, $3, $5
	# MUL, INT(tmp_int_455[temp]), INT(j[sp-0x20]), 4
	lw $24, -0x20($29)
	sll $12, $24, 2
	# ADD, INT(tmp_int_455[temp]), INT(tmp_int_455[temp]), 0
	addiu $12, $12, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_455[temp]))->POINTER(tmp_pointer_68[temp])
	addiu $3, $28, 2444
	addu $6, $3, $12
	# LOAD POINTER(tmp_pointer_68[temp]), INT(tmp_int_456[temp])
	lw $9, 0x0($6)
	# STORE POINTER(tmp_pointer_67[temp]), INT(tmp_int_456[temp])
	sw $9, 0x0($23)
	# MUL, INT(tmp_int_457[temp]), INT(j[sp-0x20]), 4
	sll $10, $24, 2
	# ADD, INT(tmp_int_457[temp]), INT(tmp_int_457[temp]), 0
	addiu $10, $10, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_457[temp]))->POINTER(tmp_pointer_69[temp])
	addiu $3, $28, 2444
	addu $13, $3, $10
	# STORE POINTER(tmp_pointer_69[temp]), INT(k[sp-0x28])
	sw $20, 0x0($13)
	# JUMP B_659
	sw $20, -0x28($29)
	sw $24, -0x20($29)
	sw $11, -0x1c($29)
	j B_659
B_659:
	# JUMP B_660
	j B_660
B_660:
	# JUMP B_661
	j B_661
B_661:
	# JUMP IF_END_655
	j IF_END_655
IF_END_655:
	# JUMP B_662
	j B_662
B_662:
	# JUMP B_663
	j B_663
B_663:
	# JUMP B_664
	j B_664
B_664:
	# JUMP WHILE_616
	j WHILE_616
WHILE_END_618:
	# MUL, INT(tmp_int_458[temp]), INT(l[sp-0x4]), 4
	lw $16, -0x4($29)
	sll $18, $16, 2
	# ADD, INT(tmp_int_458[temp]), INT(tmp_int_458[temp]), 0
	addiu $18, $18, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_458[temp]))->POINTER(tmp_pointer_70[temp])
	addiu $3, $28, 2444
	addu $7, $3, $18
	# MUL, INT(tmp_int_459[temp]), INT(i[sp-0x1c]), 4
	lw $19, -0x1c($29)
	sll $22, $19, 2
	# ADD, INT(tmp_int_459[temp]), INT(tmp_int_459[temp]), 0
	addiu $22, $22, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_459[temp]))->POINTER(tmp_pointer_71[temp])
	addiu $3, $28, 2444
	addu $8, $3, $22
	# LOAD POINTER(tmp_pointer_71[temp]), INT(tmp_int_460[temp])
	lw $25, 0x0($8)
	# STORE POINTER(tmp_pointer_70[temp]), INT(tmp_int_460[temp])
	sw $25, 0x0($7)
	# MUL, INT(tmp_int_461[temp]), INT(i[sp-0x1c]), 4
	sll $14, $19, 2
	# ADD, INT(tmp_int_461[temp]), INT(tmp_int_461[temp]), 0
	addiu $14, $14, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_461[temp]))->POINTER(tmp_pointer_72[temp])
	addiu $3, $28, 2444
	addu $21, $3, $14
	# STORE POINTER(tmp_pointer_72[temp]), INT(tmp[sp-0x24])
	lw $27, -0x24($29)
	sw $27, 0x0($21)
	# ASS, INT(mid[sp-0xc]), INT(j[sp-0x20])
	lw $26, -0x20($29)
	move $15, $26
	# ASS, INT(j[sp-0x20]), INT(i[sp-0x1c])
	move $26, $19
	# JUMP WHILE_665
	sw $16, -0x4($29)
	sw $19, -0x1c($29)
	sw $26, -0x20($29)
	sw $27, -0x24($29)
	sw $15, -0xc($29)
	j WHILE_665
WHILE_665:
	# JUMP L_OR_EXP_668
	j L_OR_EXP_668
L_OR_EXP_668:
	# JUMP L_AND_EXP_670
	j L_AND_EXP_670
L_AND_EXP_670:
	# MUL, INT(tmp_int_462[temp]), INT(i[sp-0x1c]), 4
	lw $17, -0x1c($29)
	sll $5, $17, 2
	# ADD, INT(tmp_int_462[temp]), INT(tmp_int_462[temp]), 0
	addiu $5, $5, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_462[temp]))->POINTER(tmp_pointer_73[temp])
	addiu $3, $28, 2444
	addu $12, $3, $5
	# LOAD POINTER(tmp_pointer_73[temp]), INT(tmp_int_463[temp])
	lw $6, 0x0($12)
	# MUL, INT(tmp_int_465[temp]), INT(mid[sp-0xc]), 4
	lw $23, -0xc($29)
	sll $9, $23, 2
	# ADD, INT(tmp_int_465[temp]), INT(tmp_int_465[temp]), 0
	addiu $9, $9, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_465[temp]))->POINTER(tmp_pointer_74[temp])
	addiu $3, $28, 2444
	addu $10, $3, $9
	# LOAD POINTER(tmp_pointer_74[temp]), INT(tmp_int_466[temp])
	lw $13, 0x0($10)
	# EQ, INT(tmp_int_464[temp]), INT(tmp_int_463[temp]), INT(tmp_int_466[temp])
	seq $20, $6, $13
	# ASS, INT(tmp_int_467[temp]), INT(tmp_int_464[temp])
	move $24, $20
	# Branch INT(tmp_int_464[temp]) ? AND_672 : AND_END_671
	sw $17, -0x1c($29)
	sw $20, -0x8c($29)
	sw $23, -0xc($29)
	sw $24, -0x90($29)
	lw $3, -0x8c($29)
	bne $3, $0, AND_672
	j AND_END_671
AND_672:
	# JUMP AND_END_671
	j AND_END_671
AND_END_671:
	# ASS, INT(tmp_int_468[temp]), INT(tmp_int_467[sp-0x90])
	lw $11, -0x90($29)
	move $18, $11
	# Branch INT(tmp_int_468[temp]) ? OR_END_669 : OR_673
	sw $18, -0x94($29)
	sw $11, -0x90($29)
	lw $3, -0x94($29)
	bne $3, $0, OR_END_669
	j OR_673
OR_673:
	# JUMP OR_END_669
	j OR_END_669
OR_END_669:
	# Branch INT(tmp_int_468[sp-0x94]) ? WHILE_BODY_666 : WHILE_END_667
	lw $3, -0x94($29)
	bne $3, $0, WHILE_BODY_666
	j WHILE_END_667
WHILE_BODY_666:
	# SUB, INT(tmp_int_469[temp]), INT(i[sp-0x1c]), 1
	lw $22, -0x1c($29)
	addiu $8, $22, -1
	# ASS, INT(i[sp-0x1c]), INT(tmp_int_469[temp])
	move $22, $8
	# JUMP WHILE_665
	sw $22, -0x1c($29)
	j WHILE_665
WHILE_END_667:
	# JUMP WHILE_674
	j WHILE_674
WHILE_674:
	# JUMP L_OR_EXP_677
	j L_OR_EXP_677
L_OR_EXP_677:
	# JUMP L_AND_EXP_679
	j L_AND_EXP_679
L_AND_EXP_679:
	# MUL, INT(tmp_int_470[temp]), INT(j[sp-0x20]), 4
	lw $7, -0x20($29)
	sll $25, $7, 2
	# ADD, INT(tmp_int_470[temp]), INT(tmp_int_470[temp]), 0
	addiu $25, $25, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_470[temp]))->POINTER(tmp_pointer_75[temp])
	addiu $3, $28, 2444
	addu $14, $3, $25
	# LOAD POINTER(tmp_pointer_75[temp]), INT(tmp_int_471[temp])
	lw $21, 0x0($14)
	# MUL, INT(tmp_int_473[temp]), INT(mid[sp-0xc]), 4
	lw $16, -0xc($29)
	sll $19, $16, 2
	# ADD, INT(tmp_int_473[temp]), INT(tmp_int_473[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(src[data+0x98c])+INT(tmp_int_473[temp]))->POINTER(tmp_pointer_76[temp])
	addiu $3, $28, 2444
	addu $26, $3, $19
	# LOAD POINTER(tmp_pointer_76[temp]), INT(tmp_int_474[temp])
	lw $27, 0x0($26)
	# EQ, INT(tmp_int_472[temp]), INT(tmp_int_471[temp]), INT(tmp_int_474[temp])
	seq $15, $21, $27
	# ASS, INT(tmp_int_475[temp]), INT(tmp_int_472[temp])
	move $5, $15
	# Branch INT(tmp_int_472[temp]) ? AND_681 : AND_END_680
	sw $16, -0xc($29)
	sw $5, -0x98($29)
	sw $7, -0x20($29)
	sw $15, -0x9c($29)
	lw $3, -0x9c($29)
	bne $3, $0, AND_681
	j AND_END_680
AND_681:
	# JUMP AND_END_680
	j AND_END_680
AND_END_680:
	# ASS, INT(tmp_int_476[temp]), INT(tmp_int_475[sp-0x98])
	lw $12, -0x98($29)
	move $9, $12
	# Branch INT(tmp_int_476[temp]) ? OR_END_678 : OR_682
	sw $9, -0xa0($29)
	sw $12, -0x98($29)
	lw $3, -0xa0($29)
	bne $3, $0, OR_END_678
	j OR_682
OR_682:
	# JUMP OR_END_678
	j OR_END_678
OR_END_678:
	# Branch INT(tmp_int_476[sp-0xa0]) ? WHILE_BODY_675 : WHILE_END_676
	lw $3, -0xa0($29)
	bne $3, $0, WHILE_BODY_675
	j WHILE_END_676
WHILE_BODY_675:
	# ADD, INT(tmp_int_477[temp]), INT(j[sp-0x20]), 1
	lw $10, -0x20($29)
	addiu $6, $10, 1
	# ASS, INT(j[sp-0x20]), INT(tmp_int_477[temp])
	move $10, $6
	# JUMP WHILE_674
	sw $10, -0x20($29)
	j WHILE_674
WHILE_END_676:
	# Call FUNC_quickSort; Params: INT(l[sp-0x4]), INT(i[sp-0x1c])
	sw $31, 0x0($29)
	addiu $4, $29, -164
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	lw $3, -0x1c($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_quickSort
	addiu $29, $29, 164
	lw $31, 0x0($29)
	# Call FUNC_quickSort; Params: INT(j[sp-0x20]), INT(r[sp-0x8])
	sw $31, 0x0($29)
	addiu $4, $29, -164
	lw $3, -0x20($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_quickSort
	addiu $29, $29, 164
	lw $31, 0x0($29)
	# RETURN VOID
	jr $ra
	
FUNC_determinant:
	# JUMP L_OR_EXP_684
	j L_OR_EXP_684
L_OR_EXP_684:
	# JUMP L_AND_EXP_686
	j L_AND_EXP_686
L_AND_EXP_686:
	# EQ, INT(tmp_int_478[temp]), INT(n[sp-0x8]), 1
	lw $13, -0x8($29)
	seq $17, $13, 1
	# ASS, INT(tmp_int_479[temp]), INT(tmp_int_478[temp])
	move $20, $17
	# Branch INT(tmp_int_478[temp]) ? AND_688 : AND_END_687
	sw $17, -0x1b0($29)
	sw $20, -0x1b4($29)
	sw $13, -0x8($29)
	lw $3, -0x1b0($29)
	bne $3, $0, AND_688
	j AND_END_687
AND_688:
	# JUMP AND_END_687
	j AND_END_687
AND_END_687:
	# ASS, INT(tmp_int_480[temp]), INT(tmp_int_479[sp-0x1b4])
	lw $23, -0x1b4($29)
	move $24, $23
	# Branch INT(tmp_int_480[temp]) ? OR_END_685 : OR_689
	sw $23, -0x1b4($29)
	sw $24, -0x1b8($29)
	lw $3, -0x1b8($29)
	bne $3, $0, OR_END_685
	j OR_689
OR_689:
	# JUMP OR_END_685
	j OR_END_685
OR_END_685:
	# Branch INT(tmp_int_480[sp-0x1b8]) ? IF_BODY_690 : IF_END_691
	lw $3, -0x1b8($29)
	bne $3, $0, IF_BODY_690
	j IF_END_691
IF_BODY_690:
	# MUL, INT(tmp_int_481[temp]), 0, 4
	li $18, 0
	# ADD, INT(tmp_int_481[temp]), INT(tmp_int_481[temp]), 0
	addiu $18, $18, 0
	# MUL, INT(tmp_int_482[temp]), 0, 40
	li $11, 0
	# ADD, INT(tmp_int_482[temp]), INT(tmp_int_482[temp]), INT(tmp_int_481[temp])
	addu $11, $11, $18
	# OFFSET (ARRAY(in[sp-0x4])+INT(tmp_int_482[temp]))->POINTER(tmp_pointer_77[temp])
	lw $3, -0x4($29)
	addu $8, $3, $11
	# LOAD POINTER(tmp_pointer_77[temp]), INT(tmp_int_483[temp])
	lw $22, 0x0($8)
	# RETURN INT(tmp_int_483[temp])
	move $2, $22
	sw $22, -0x1bc($29)
	jr $ra
	# JUMP IF_END_691
	j IF_END_691
IF_END_691:
	# DEF, INT(ans[sp-0xc]), 0
	li $25, 0
	# DEF, INT(i[sp-0x10]), 0
	li $14, 0
	# JUMP WHILE_692
	sw $25, -0xc($29)
	sw $14, -0x10($29)
	j WHILE_692
WHILE_692:
	# JUMP L_OR_EXP_695
	j L_OR_EXP_695
L_OR_EXP_695:
	# JUMP L_AND_EXP_697
	j L_AND_EXP_697
L_AND_EXP_697:
	# LT, INT(tmp_int_484[temp]), INT(i[sp-0x10]), INT(n[sp-0x8])
	lw $19, -0x10($29)
	lw $26, -0x8($29)
	slt $21, $19, $26
	# ASS, INT(tmp_int_485[temp]), INT(tmp_int_484[temp])
	move $27, $21
	# Branch INT(tmp_int_484[temp]) ? AND_699 : AND_END_698
	sw $19, -0x10($29)
	sw $21, -0x1c0($29)
	sw $26, -0x8($29)
	sw $27, -0x1c4($29)
	lw $3, -0x1c0($29)
	bne $3, $0, AND_699
	j AND_END_698
AND_699:
	# JUMP AND_END_698
	j AND_END_698
AND_END_698:
	# ASS, INT(tmp_int_486[temp]), INT(tmp_int_485[sp-0x1c4])
	lw $16, -0x1c4($29)
	move $5, $16
	# Branch INT(tmp_int_486[temp]) ? OR_END_696 : OR_700
	sw $16, -0x1c4($29)
	sw $5, -0x1c8($29)
	lw $3, -0x1c8($29)
	bne $3, $0, OR_END_696
	j OR_700
OR_700:
	# JUMP OR_END_696
	j OR_END_696
OR_END_696:
	# Branch INT(tmp_int_486[sp-0x1c8]) ? WHILE_BODY_693 : WHILE_END_694
	lw $3, -0x1c8($29)
	bne $3, $0, WHILE_BODY_693
	j WHILE_END_694
WHILE_BODY_693:
	# JUMP B_701
	j B_701
B_701:
	# DEF, INT(j[sp-0x1a4]), 0
	li $7, 0
	# JUMP WHILE_702
	sw $7, -0x1a4($29)
	j WHILE_702
	# JUMP B_742
	j B_742
WHILE_702:
	# JUMP L_OR_EXP_705
	j L_OR_EXP_705
L_OR_EXP_705:
	# JUMP L_AND_EXP_707
	j L_AND_EXP_707
L_AND_EXP_707:
	# SUB, INT(tmp_int_488[temp]), INT(n[sp-0x8]), 1
	lw $15, -0x8($29)
	addiu $9, $15, -1
	# LT, INT(tmp_int_487[temp]), INT(j[sp-0x1a4]), INT(tmp_int_488[temp])
	lw $12, -0x1a4($29)
	slt $6, $12, $9
	# ASS, INT(tmp_int_489[temp]), INT(tmp_int_487[temp])
	move $10, $6
	# Branch INT(tmp_int_487[temp]) ? AND_709 : AND_END_708
	sw $6, -0x1cc($29)
	sw $10, -0x1d0($29)
	sw $12, -0x1a4($29)
	sw $15, -0x8($29)
	lw $3, -0x1cc($29)
	bne $3, $0, AND_709
	j AND_END_708
AND_709:
	# JUMP AND_END_708
	j AND_END_708
AND_END_708:
	# ASS, INT(tmp_int_490[temp]), INT(tmp_int_489[sp-0x1d0])
	lw $17, -0x1d0($29)
	move $20, $17
	# Branch INT(tmp_int_490[temp]) ? OR_END_706 : OR_710
	sw $17, -0x1d0($29)
	sw $20, -0x1d4($29)
	lw $3, -0x1d4($29)
	bne $3, $0, OR_END_706
	j OR_710
OR_710:
	# JUMP OR_END_706
	j OR_END_706
OR_END_706:
	# Branch INT(tmp_int_490[sp-0x1d4]) ? WHILE_BODY_703 : WHILE_END_704
	lw $3, -0x1d4($29)
	bne $3, $0, WHILE_BODY_703
	j WHILE_END_704
WHILE_BODY_703:
	# JUMP B_711
	j B_711
B_711:
	# DEF, INT(k[sp-0x1a8]), 0
	li $13, 0
	# JUMP WHILE_712
	sw $13, -0x1a8($29)
	j WHILE_712
	# JUMP B_732
	j B_732
WHILE_712:
	# JUMP L_OR_EXP_715
	j L_OR_EXP_715
L_OR_EXP_715:
	# JUMP L_AND_EXP_717
	j L_AND_EXP_717
L_AND_EXP_717:
	# SUB, INT(tmp_int_492[temp]), INT(n[sp-0x8]), 1
	lw $23, -0x8($29)
	addiu $24, $23, -1
	# LT, INT(tmp_int_491[temp]), INT(k[sp-0x1a8]), INT(tmp_int_492[temp])
	lw $18, -0x1a8($29)
	slt $11, $18, $24
	# ASS, INT(tmp_int_493[temp]), INT(tmp_int_491[temp])
	move $8, $11
	# Branch INT(tmp_int_491[temp]) ? AND_719 : AND_END_718
	sw $18, -0x1a8($29)
	sw $23, -0x8($29)
	sw $8, -0x1d8($29)
	sw $11, -0x1dc($29)
	lw $3, -0x1dc($29)
	bne $3, $0, AND_719
	j AND_END_718
AND_719:
	# JUMP AND_END_718
	j AND_END_718
AND_END_718:
	# ASS, INT(tmp_int_494[temp]), INT(tmp_int_493[sp-0x1d8])
	lw $22, -0x1d8($29)
	move $25, $22
	# Branch INT(tmp_int_494[temp]) ? OR_END_716 : OR_720
	sw $22, -0x1d8($29)
	sw $25, -0x1e0($29)
	lw $3, -0x1e0($29)
	bne $3, $0, OR_END_716
	j OR_720
OR_720:
	# JUMP OR_END_716
	j OR_END_716
OR_END_716:
	# Branch INT(tmp_int_494[sp-0x1e0]) ? WHILE_BODY_713 : WHILE_END_714
	lw $3, -0x1e0($29)
	bne $3, $0, WHILE_BODY_713
	j WHILE_END_714
WHILE_BODY_713:
	# JUMP B_721
	j B_721
B_721:
	# JUMP L_OR_EXP_722
	j L_OR_EXP_722
	# JUMP B_731
	j B_731
L_OR_EXP_722:
	# JUMP L_AND_EXP_724
	j L_AND_EXP_724
L_AND_EXP_724:
	# LT, INT(tmp_int_495[temp]), INT(k[sp-0x1a8]), INT(i[sp-0x10])
	lw $14, -0x1a8($29)
	lw $19, -0x10($29)
	slt $21, $14, $19
	# ASS, INT(tmp_int_496[temp]), INT(tmp_int_495[temp])
	move $26, $21
	# Branch INT(tmp_int_495[temp]) ? AND_726 : AND_END_725
	sw $19, -0x10($29)
	sw $21, -0x1e4($29)
	sw $26, -0x1e8($29)
	sw $14, -0x1a8($29)
	lw $3, -0x1e4($29)
	bne $3, $0, AND_726
	j AND_END_725
AND_726:
	# JUMP AND_END_725
	j AND_END_725
AND_END_725:
	# ASS, INT(tmp_int_497[temp]), INT(tmp_int_496[sp-0x1e8])
	lw $27, -0x1e8($29)
	move $16, $27
	# Branch INT(tmp_int_497[temp]) ? OR_END_723 : OR_727
	sw $16, -0x1ec($29)
	sw $27, -0x1e8($29)
	lw $3, -0x1ec($29)
	bne $3, $0, OR_END_723
	j OR_727
OR_727:
	# JUMP OR_END_723
	j OR_END_723
OR_END_723:
	# Branch INT(tmp_int_497[sp-0x1ec]) ? IF_BODY_728 : IF_ELSE_730
	lw $3, -0x1ec($29)
	bne $3, $0, IF_BODY_728
	j IF_ELSE_730
IF_BODY_728:
	# MUL, INT(tmp_int_498[temp]), INT(k[sp-0x1a8]), 4
	lw $5, -0x1a8($29)
	sll $7, $5, 2
	# ADD, INT(tmp_int_498[temp]), INT(tmp_int_498[temp]), 0
	addiu $7, $7, 0
	# MUL, INT(tmp_int_499[temp]), INT(j[sp-0x1a4]), 40
	lw $9, -0x1a4($29)
	sll $6, $9, 5
	sll $3, $9, 3
	addu $6, $6, $3
	# ADD, INT(tmp_int_499[temp]), INT(tmp_int_499[temp]), INT(tmp_int_498[temp])
	addu $6, $6, $7
	# OFFSET (ARRAY(tmp[sp-0x1a0])+INT(tmp_int_499[temp]))->POINTER(tmp_pointer_78[temp])
	addiu $3, $29, -416
	addu $10, $3, $6
	# MUL, INT(tmp_int_500[temp]), INT(k[sp-0x1a8]), 4
	sll $12, $5, 2
	# ADD, INT(tmp_int_500[temp]), INT(tmp_int_500[temp]), 0
	addiu $12, $12, 0
	# ADD, INT(tmp_int_502[temp]), INT(j[sp-0x1a4]), 1
	addiu $15, $9, 1
	# MUL, INT(tmp_int_501[temp]), INT(tmp_int_502[temp]), 40
	sll $17, $15, 5
	sll $3, $15, 3
	addu $17, $17, $3
	# ADD, INT(tmp_int_501[temp]), INT(tmp_int_501[temp]), INT(tmp_int_500[temp])
	addu $17, $17, $12
	# OFFSET (ARRAY(in[sp-0x4])+INT(tmp_int_501[temp]))->POINTER(tmp_pointer_79[temp])
	lw $3, -0x4($29)
	addu $20, $3, $17
	# LOAD POINTER(tmp_pointer_79[temp]), INT(tmp_int_503[temp])
	lw $13, 0x0($20)
	# STORE POINTER(tmp_pointer_78[temp]), INT(tmp_int_503[temp])
	sw $13, 0x0($10)
	# JUMP IF_END_729
	sw $5, -0x1a8($29)
	sw $9, -0x1a4($29)
	j IF_END_729
IF_ELSE_730:
	# MUL, INT(tmp_int_504[temp]), INT(k[sp-0x1a8]), 4
	lw $24, -0x1a8($29)
	sll $18, $24, 2
	# ADD, INT(tmp_int_504[temp]), INT(tmp_int_504[temp]), 0
	addiu $18, $18, 0
	# MUL, INT(tmp_int_505[temp]), INT(j[sp-0x1a4]), 40
	lw $23, -0x1a4($29)
	sll $8, $23, 5
	sll $3, $23, 3
	addu $8, $8, $3
	# ADD, INT(tmp_int_505[temp]), INT(tmp_int_505[temp]), INT(tmp_int_504[temp])
	addu $8, $8, $18
	# OFFSET (ARRAY(tmp[sp-0x1a0])+INT(tmp_int_505[temp]))->POINTER(tmp_pointer_80[temp])
	addiu $3, $29, -416
	addu $11, $3, $8
	# ADD, INT(tmp_int_507[temp]), INT(k[sp-0x1a8]), 1
	addiu $22, $24, 1
	# MUL, INT(tmp_int_506[temp]), INT(tmp_int_507[temp]), 4
	sll $25, $22, 2
	# ADD, INT(tmp_int_506[temp]), INT(tmp_int_506[temp]), 0
	addiu $25, $25, 0
	# ADD, INT(tmp_int_509[temp]), INT(j[sp-0x1a4]), 1
	addiu $19, $23, 1
	# MUL, INT(tmp_int_508[temp]), INT(tmp_int_509[temp]), 40
	sll $21, $19, 5
	sll $3, $19, 3
	addu $21, $21, $3
	# ADD, INT(tmp_int_508[temp]), INT(tmp_int_508[temp]), INT(tmp_int_506[temp])
	addu $21, $21, $25
	# OFFSET (ARRAY(in[sp-0x4])+INT(tmp_int_508[temp]))->POINTER(tmp_pointer_81[temp])
	lw $3, -0x4($29)
	addu $26, $3, $21
	# LOAD POINTER(tmp_pointer_81[temp]), INT(tmp_int_510[temp])
	lw $14, 0x0($26)
	# STORE POINTER(tmp_pointer_80[temp]), INT(tmp_int_510[temp])
	sw $14, 0x0($11)
	# JUMP IF_END_729
	sw $23, -0x1a4($29)
	sw $24, -0x1a8($29)
	j IF_END_729
IF_END_729:
	# ADD, INT(tmp_int_511[temp]), INT(k[sp-0x1a8]), 1
	lw $16, -0x1a8($29)
	addiu $27, $16, 1
	# ASS, INT(k[sp-0x1a8]), INT(tmp_int_511[temp])
	move $16, $27
	# JUMP B_731
	sw $16, -0x1a8($29)
	j B_731
B_731:
	# JUMP WHILE_712
	j WHILE_712
WHILE_END_714:
	# ADD, INT(tmp_int_512[temp]), INT(j[sp-0x1a4]), 1
	lw $7, -0x1a4($29)
	addiu $6, $7, 1
	# ASS, INT(j[sp-0x1a4]), INT(tmp_int_512[temp])
	move $7, $6
	# JUMP B_732
	sw $7, -0x1a4($29)
	j B_732
B_732:
	# JUMP WHILE_702
	j WHILE_702
WHILE_END_704:
	# OFFSET (ARRAY(tmp[sp-0x1a0])+0)->POINTER(tmp_pointer_82[temp])
	addiu $15, $29, -416
	# SUB, INT(tmp_int_513[temp]), INT(n[sp-0x8]), 1
	lw $12, -0x8($29)
	addiu $17, $12, -1
	# Call FUNC_determinant; Params: POINTER(tmp_pointer_82[temp]), INT(tmp_int_513[temp]); RET INT(tmp_int_514[temp])
	sw $17, -0x1f0($29)
	sw $12, -0x8($29)
	sw $15, -0x1f4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -504
	lw $3, -0x1f4($29)
	sw $3, -0x4($4)
	lw $3, -0x1f0($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_determinant
	addiu $29, $29, 504
	lw $31, 0x0($29)
	move $20, $2
	# DEF, INT(l[sp-0x1ac]), INT(tmp_int_514[temp])
	move $10, $20
	# JUMP L_OR_EXP_733
	sw $10, -0x1ac($29)
	j L_OR_EXP_733
L_OR_EXP_733:
	# JUMP L_AND_EXP_735
	j L_AND_EXP_735
L_AND_EXP_735:
	# MOD, INT(tmp_int_515[temp]), INT(i[sp-0x10]), 2
	lw $13, -0x10($29)
	li $3, 2
	div $13 $3
	mfhi $5
	# ASS, INT(tmp_int_516[temp]), INT(tmp_int_515[temp])
	move $9, $5
	# Branch INT(tmp_int_515[temp]) ? AND_737 : AND_END_736
	sw $5, -0x1f8($29)
	sw $9, -0x1fc($29)
	sw $13, -0x10($29)
	lw $3, -0x1f8($29)
	bne $3, $0, AND_737
	j AND_END_736
AND_737:
	# JUMP AND_END_736
	j AND_END_736
AND_END_736:
	# ASS, INT(tmp_int_517[temp]), INT(tmp_int_516[sp-0x1fc])
	lw $18, -0x1fc($29)
	move $8, $18
	# Branch INT(tmp_int_517[temp]) ? OR_END_734 : OR_738
	sw $18, -0x1fc($29)
	sw $8, -0x200($29)
	lw $3, -0x200($29)
	bne $3, $0, OR_END_734
	j OR_738
OR_738:
	# JUMP OR_END_734
	j OR_END_734
OR_END_734:
	# Branch INT(tmp_int_517[sp-0x200]) ? IF_BODY_739 : IF_ELSE_741
	lw $3, -0x200($29)
	bne $3, $0, IF_BODY_739
	j IF_ELSE_741
IF_BODY_739:
	# MUL, INT(tmp_int_519[temp]), INT(i[sp-0x10]), 4
	lw $22, -0x10($29)
	sll $19, $22, 2
	# ADD, INT(tmp_int_519[temp]), INT(tmp_int_519[temp]), 0
	addiu $19, $19, 0
	# MUL, INT(tmp_int_520[temp]), 0, 40
	li $25, 0
	# ADD, INT(tmp_int_520[temp]), INT(tmp_int_520[temp]), INT(tmp_int_519[temp])
	addu $25, $25, $19
	# OFFSET (ARRAY(in[sp-0x4])+INT(tmp_int_520[temp]))->POINTER(tmp_pointer_83[temp])
	lw $3, -0x4($29)
	addu $21, $3, $25
	# LOAD POINTER(tmp_pointer_83[temp]), INT(tmp_int_521[temp])
	lw $26, 0x0($21)
	# MUL, INT(tmp_int_522[temp]), INT(tmp_int_521[temp]), INT(l[sp-0x1ac])
	lw $11, -0x1ac($29)
	mult $26 $11
	mflo $14
	# SUB, INT(tmp_int_518[temp]), INT(ans[sp-0xc]), INT(tmp_int_522[temp])
	lw $23, -0xc($29)
	subu $24, $23, $14
	# ASS, INT(ans[sp-0xc]), INT(tmp_int_518[temp])
	move $23, $24
	# JUMP IF_END_740
	sw $22, -0x10($29)
	sw $23, -0xc($29)
	sw $11, -0x1ac($29)
	j IF_END_740
IF_ELSE_741:
	# MUL, INT(tmp_int_524[temp]), INT(i[sp-0x10]), 4
	lw $27, -0x10($29)
	sll $16, $27, 2
	# ADD, INT(tmp_int_524[temp]), INT(tmp_int_524[temp]), 0
	addiu $16, $16, 0
	# MUL, INT(tmp_int_525[temp]), 0, 40
	li $6, 0
	# ADD, INT(tmp_int_525[temp]), INT(tmp_int_525[temp]), INT(tmp_int_524[temp])
	addu $6, $6, $16
	# OFFSET (ARRAY(in[sp-0x4])+INT(tmp_int_525[temp]))->POINTER(tmp_pointer_84[temp])
	lw $3, -0x4($29)
	addu $7, $3, $6
	# LOAD POINTER(tmp_pointer_84[temp]), INT(tmp_int_526[temp])
	lw $17, 0x0($7)
	# MUL, INT(tmp_int_527[temp]), INT(tmp_int_526[temp]), INT(l[sp-0x1ac])
	lw $12, -0x1ac($29)
	mult $17 $12
	mflo $15
	# ADD, INT(tmp_int_523[temp]), INT(ans[sp-0xc]), INT(tmp_int_527[temp])
	lw $20, -0xc($29)
	addu $10, $20, $15
	# ASS, INT(ans[sp-0xc]), INT(tmp_int_523[temp])
	move $20, $10
	# JUMP IF_END_740
	sw $20, -0xc($29)
	sw $27, -0x10($29)
	sw $12, -0x1ac($29)
	j IF_END_740
IF_END_740:
	# ADD, INT(tmp_int_528[temp]), INT(i[sp-0x10]), 1
	lw $5, -0x10($29)
	addiu $9, $5, 1
	# ASS, INT(i[sp-0x10]), INT(tmp_int_528[temp])
	move $5, $9
	# JUMP B_742
	sw $5, -0x10($29)
	j B_742
B_742:
	# JUMP WHILE_692
	j WHILE_692
WHILE_END_694:
	# RETURN INT(ans[sp-0xc])
	lw $2, -0xc($29)
	jr $ra
	
FUNC_main:
	# DEF, INT(total[sp-0x4]), 0
	li $13, 0
	# GETINT INT(seed[data+0x190])
	li $2, 5
	syscall
	move $18, $2
	# GETINT INT(total[sp-0x4])
	li $2, 5
	syscall
	move $13, $2
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# OFFSET (ARRAY(demo1[sp-0x2c])+0)->POINTER(tmp_pointer_85[temp])
	addiu $8, $29, -44
	# STORE POINTER(tmp_pointer_85[temp]), 1686070451
	li $3, 1686070451
	sw $3, 0x0($8)
	# OFFSET (ARRAY(demo1[sp-0x2c])+4)->POINTER(tmp_pointer_86[temp])
	addiu $19, $29, -40
	# STORE POINTER(tmp_pointer_86[temp]), 580167200
	li $3, 580167200
	sw $3, 0x0($19)
	# OFFSET (ARRAY(demo1[sp-0x2c])+8)->POINTER(tmp_pointer_87[temp])
	addiu $25, $29, -36
	# STORE POINTER(tmp_pointer_87[temp]), -71727344
	li $3, -71727344
	sw $3, 0x0($25)
	# OFFSET (ARRAY(demo1[sp-0x2c])+12)->POINTER(tmp_pointer_88[temp])
	addiu $21, $29, -32
	# STORE POINTER(tmp_pointer_88[temp]), 1790458882
	li $3, 1790458882
	sw $3, 0x0($21)
	# OFFSET (ARRAY(demo1[sp-0x2c])+16)->POINTER(tmp_pointer_89[temp])
	addiu $26, $29, -28
	# STORE POINTER(tmp_pointer_89[temp]), -707294080
	li $3, -707294080
	sw $3, 0x0($26)
	# OFFSET (ARRAY(demo1[sp-0x2c])+20)->POINTER(tmp_pointer_90[temp])
	addiu $14, $29, -24
	# STORE POINTER(tmp_pointer_90[temp]), 437522823
	li $3, 437522823
	sw $3, 0x0($14)
	# OFFSET (ARRAY(demo1[sp-0x2c])+24)->POINTER(tmp_pointer_91[temp])
	addiu $24, $29, -20
	# STORE POINTER(tmp_pointer_91[temp]), -354745685
	li $3, -354745685
	sw $3, 0x0($24)
	# OFFSET (ARRAY(demo1[sp-0x2c])+28)->POINTER(tmp_pointer_92[temp])
	addiu $22, $29, -16
	# STORE POINTER(tmp_pointer_92[temp]), -903788492
	li $3, -903788492
	sw $3, 0x0($22)
	# OFFSET (ARRAY(demo1[sp-0x2c])+32)->POINTER(tmp_pointer_93[temp])
	addiu $23, $29, -12
	# STORE POINTER(tmp_pointer_93[temp]), -853326395
	li $3, -853326395
	sw $3, 0x0($23)
	# OFFSET (ARRAY(demo1[sp-0x2c])+36)->POINTER(tmp_pointer_94[temp])
	addiu $11, $29, -8
	# STORE POINTER(tmp_pointer_94[temp]), -2045068380
	li $3, -2045068380
	sw $3, 0x0($11)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+0)->POINTER(tmp_pointer_95[temp])
	addiu $16, $29, -444
	# STORE POINTER(tmp_pointer_95[temp]), 1919156834
	li $3, 1919156834
	sw $3, 0x0($16)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+4)->POINTER(tmp_pointer_96[temp])
	addiu $6, $29, -440
	# STORE POINTER(tmp_pointer_96[temp]), -1000786109
	li $3, -1000786109
	sw $3, 0x0($6)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+8)->POINTER(tmp_pointer_97[temp])
	addiu $7, $29, -436
	# STORE POINTER(tmp_pointer_97[temp]), 1852757103
	li $3, 1852757103
	sw $3, 0x0($7)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+12)->POINTER(tmp_pointer_98[temp])
	addiu $17, $29, -432
	# STORE POINTER(tmp_pointer_98[temp]), 1966938780
	li $3, 1966938780
	sw $3, 0x0($17)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+16)->POINTER(tmp_pointer_99[temp])
	addiu $15, $29, -428
	# STORE POINTER(tmp_pointer_99[temp]), -1198616081
	li $3, -1198616081
	sw $3, 0x0($15)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+20)->POINTER(tmp_pointer_100[temp])
	addiu $10, $29, -424
	# STORE POINTER(tmp_pointer_100[temp]), -2118269519
	li $3, -2118269519
	sw $3, 0x0($10)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+24)->POINTER(tmp_pointer_101[temp])
	addiu $20, $29, -420
	# STORE POINTER(tmp_pointer_101[temp]), -2070890619
	li $3, -2070890619
	sw $3, 0x0($20)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+28)->POINTER(tmp_pointer_102[temp])
	addiu $27, $29, -416
	# STORE POINTER(tmp_pointer_102[temp]), 1878585957
	li $3, 1878585957
	sw $3, 0x0($27)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+32)->POINTER(tmp_pointer_103[temp])
	addiu $12, $29, -412
	# STORE POINTER(tmp_pointer_103[temp]), 1457271300
	li $3, 1457271300
	sw $3, 0x0($12)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+36)->POINTER(tmp_pointer_104[temp])
	addiu $9, $29, -408
	# STORE POINTER(tmp_pointer_104[temp]), 828307086
	li $3, 828307086
	sw $3, 0x0($9)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+40)->POINTER(tmp_pointer_105[temp])
	addiu $5, $29, -404
	# STORE POINTER(tmp_pointer_105[temp]), 1840937318
	li $3, 1840937318
	sw $3, 0x0($5)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+44)->POINTER(tmp_pointer_106[temp])
	addiu $8, $29, -400
	# STORE POINTER(tmp_pointer_106[temp]), 2091480844
	li $3, 2091480844
	sw $3, 0x0($8)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+48)->POINTER(tmp_pointer_107[temp])
	addiu $19, $29, -396
	# STORE POINTER(tmp_pointer_107[temp]), 459617059
	li $3, 459617059
	sw $3, 0x0($19)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+52)->POINTER(tmp_pointer_108[temp])
	addiu $25, $29, -392
	# STORE POINTER(tmp_pointer_108[temp]), -1837848014
	li $3, -1837848014
	sw $3, 0x0($25)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+56)->POINTER(tmp_pointer_109[temp])
	addiu $21, $29, -388
	# STORE POINTER(tmp_pointer_109[temp]), 932994868
	li $3, 932994868
	sw $3, 0x0($21)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+60)->POINTER(tmp_pointer_110[temp])
	addiu $26, $29, -384
	# STORE POINTER(tmp_pointer_110[temp]), 199723542
	li $3, 199723542
	sw $3, 0x0($26)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+64)->POINTER(tmp_pointer_111[temp])
	addiu $14, $29, -380
	# STORE POINTER(tmp_pointer_111[temp]), -1678902097
	li $3, -1678902097
	sw $3, 0x0($14)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+68)->POINTER(tmp_pointer_112[temp])
	addiu $24, $29, -376
	# STORE POINTER(tmp_pointer_112[temp]), 460611448
	li $3, 460611448
	sw $3, 0x0($24)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+72)->POINTER(tmp_pointer_113[temp])
	addiu $22, $29, -372
	# STORE POINTER(tmp_pointer_113[temp]), 572100277
	li $3, 572100277
	sw $3, 0x0($22)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+76)->POINTER(tmp_pointer_114[temp])
	addiu $23, $29, -368
	# STORE POINTER(tmp_pointer_114[temp]), -1607527460
	li $3, -1607527460
	sw $3, 0x0($23)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+80)->POINTER(tmp_pointer_115[temp])
	addiu $11, $29, -364
	# STORE POINTER(tmp_pointer_115[temp]), -744604366
	li $3, -744604366
	sw $3, 0x0($11)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+84)->POINTER(tmp_pointer_116[temp])
	addiu $16, $29, -360
	# STORE POINTER(tmp_pointer_116[temp]), -2044300164
	li $3, -2044300164
	sw $3, 0x0($16)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+88)->POINTER(tmp_pointer_117[temp])
	addiu $6, $29, -356
	# STORE POINTER(tmp_pointer_117[temp]), 1958063122
	li $3, 1958063122
	sw $3, 0x0($6)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+92)->POINTER(tmp_pointer_118[temp])
	addiu $7, $29, -352
	# STORE POINTER(tmp_pointer_118[temp]), 1148229092
	li $3, 1148229092
	sw $3, 0x0($7)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+96)->POINTER(tmp_pointer_119[temp])
	addiu $17, $29, -348
	# STORE POINTER(tmp_pointer_119[temp]), 840274257
	li $3, 840274257
	sw $3, 0x0($17)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+100)->POINTER(tmp_pointer_120[temp])
	addiu $15, $29, -344
	# STORE POINTER(tmp_pointer_120[temp]), 969614164
	li $3, 969614164
	sw $3, 0x0($15)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+104)->POINTER(tmp_pointer_121[temp])
	addiu $10, $29, -340
	# STORE POINTER(tmp_pointer_121[temp]), -631737099
	li $3, -631737099
	sw $3, 0x0($10)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+108)->POINTER(tmp_pointer_122[temp])
	addiu $20, $29, -336
	# STORE POINTER(tmp_pointer_122[temp]), 1127462504
	li $3, 1127462504
	sw $3, 0x0($20)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+112)->POINTER(tmp_pointer_123[temp])
	addiu $27, $29, -332
	# STORE POINTER(tmp_pointer_123[temp]), 2018161914
	li $3, 2018161914
	sw $3, 0x0($27)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+116)->POINTER(tmp_pointer_124[temp])
	addiu $12, $29, -328
	# STORE POINTER(tmp_pointer_124[temp]), 556766899
	li $3, 556766899
	sw $3, 0x0($12)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+120)->POINTER(tmp_pointer_125[temp])
	addiu $9, $29, -324
	# STORE POINTER(tmp_pointer_125[temp]), 1861544443
	li $3, 1861544443
	sw $3, 0x0($9)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+124)->POINTER(tmp_pointer_126[temp])
	addiu $5, $29, -320
	# STORE POINTER(tmp_pointer_126[temp]), -232935718
	li $3, -232935718
	sw $3, 0x0($5)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+128)->POINTER(tmp_pointer_127[temp])
	addiu $8, $29, -316
	# STORE POINTER(tmp_pointer_127[temp]), -1828379384
	li $3, -1828379384
	sw $3, 0x0($8)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+132)->POINTER(tmp_pointer_128[temp])
	addiu $19, $29, -312
	# STORE POINTER(tmp_pointer_128[temp]), -1282922638
	li $3, -1282922638
	sw $3, 0x0($19)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+136)->POINTER(tmp_pointer_129[temp])
	addiu $25, $29, -308
	# STORE POINTER(tmp_pointer_129[temp]), 809442004
	li $3, 809442004
	sw $3, 0x0($25)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+140)->POINTER(tmp_pointer_130[temp])
	addiu $21, $29, -304
	# STORE POINTER(tmp_pointer_130[temp]), -65540968
	li $3, -65540968
	sw $3, 0x0($21)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+144)->POINTER(tmp_pointer_131[temp])
	addiu $26, $29, -300
	# STORE POINTER(tmp_pointer_131[temp]), -1068429160
	li $3, -1068429160
	sw $3, 0x0($26)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+148)->POINTER(tmp_pointer_132[temp])
	addiu $14, $29, -296
	# STORE POINTER(tmp_pointer_132[temp]), 1264461509
	li $3, 1264461509
	sw $3, 0x0($14)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+152)->POINTER(tmp_pointer_133[temp])
	addiu $24, $29, -292
	# STORE POINTER(tmp_pointer_133[temp]), -2042849861
	li $3, -2042849861
	sw $3, 0x0($24)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+156)->POINTER(tmp_pointer_134[temp])
	addiu $22, $29, -288
	# STORE POINTER(tmp_pointer_134[temp]), 118226071
	li $3, 118226071
	sw $3, 0x0($22)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+160)->POINTER(tmp_pointer_135[temp])
	addiu $23, $29, -284
	# STORE POINTER(tmp_pointer_135[temp]), 277629739
	li $3, 277629739
	sw $3, 0x0($23)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+164)->POINTER(tmp_pointer_136[temp])
	addiu $11, $29, -280
	# STORE POINTER(tmp_pointer_136[temp]), 386521250
	li $3, 386521250
	sw $3, 0x0($11)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+168)->POINTER(tmp_pointer_137[temp])
	addiu $16, $29, -276
	# STORE POINTER(tmp_pointer_137[temp]), -821181987
	li $3, -821181987
	sw $3, 0x0($16)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+172)->POINTER(tmp_pointer_138[temp])
	addiu $6, $29, -272
	# STORE POINTER(tmp_pointer_138[temp]), 929741622
	li $3, 929741622
	sw $3, 0x0($6)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+176)->POINTER(tmp_pointer_139[temp])
	addiu $7, $29, -268
	# STORE POINTER(tmp_pointer_139[temp]), 727825736
	li $3, 727825736
	sw $3, 0x0($7)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+180)->POINTER(tmp_pointer_140[temp])
	addiu $17, $29, -264
	# STORE POINTER(tmp_pointer_140[temp]), 1178454426
	li $3, 1178454426
	sw $3, 0x0($17)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+184)->POINTER(tmp_pointer_141[temp])
	addiu $15, $29, -260
	# STORE POINTER(tmp_pointer_141[temp]), 1874370738
	li $3, 1874370738
	sw $3, 0x0($15)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+188)->POINTER(tmp_pointer_142[temp])
	addiu $10, $29, -256
	# STORE POINTER(tmp_pointer_142[temp]), -25464282
	li $3, -25464282
	sw $3, 0x0($10)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+192)->POINTER(tmp_pointer_143[temp])
	addiu $20, $29, -252
	# STORE POINTER(tmp_pointer_143[temp]), -1509655790
	li $3, -1509655790
	sw $3, 0x0($20)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+196)->POINTER(tmp_pointer_144[temp])
	addiu $27, $29, -248
	# STORE POINTER(tmp_pointer_144[temp]), -1380518334
	li $3, -1380518334
	sw $3, 0x0($27)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+200)->POINTER(tmp_pointer_145[temp])
	addiu $12, $29, -244
	# STORE POINTER(tmp_pointer_145[temp]), -1895096581
	li $3, -1895096581
	sw $3, 0x0($12)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+204)->POINTER(tmp_pointer_146[temp])
	addiu $9, $29, -240
	# STORE POINTER(tmp_pointer_146[temp]), -1442451475
	li $3, -1442451475
	sw $3, 0x0($9)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+208)->POINTER(tmp_pointer_147[temp])
	addiu $5, $29, -236
	# STORE POINTER(tmp_pointer_147[temp]), -480102141
	li $3, -480102141
	sw $3, 0x0($5)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+212)->POINTER(tmp_pointer_148[temp])
	addiu $8, $29, -232
	# STORE POINTER(tmp_pointer_148[temp]), -925000658
	li $3, -925000658
	sw $3, 0x0($8)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+216)->POINTER(tmp_pointer_149[temp])
	addiu $19, $29, -228
	# STORE POINTER(tmp_pointer_149[temp]), 1440901658
	li $3, 1440901658
	sw $3, 0x0($19)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+220)->POINTER(tmp_pointer_150[temp])
	addiu $25, $29, -224
	# STORE POINTER(tmp_pointer_150[temp]), 925907631
	li $3, 925907631
	sw $3, 0x0($25)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+224)->POINTER(tmp_pointer_151[temp])
	addiu $21, $29, -220
	# STORE POINTER(tmp_pointer_151[temp]), 550507243
	li $3, 550507243
	sw $3, 0x0($21)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+228)->POINTER(tmp_pointer_152[temp])
	addiu $26, $29, -216
	# STORE POINTER(tmp_pointer_152[temp]), -1102555955
	li $3, -1102555955
	sw $3, 0x0($26)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+232)->POINTER(tmp_pointer_153[temp])
	addiu $14, $29, -212
	# STORE POINTER(tmp_pointer_153[temp]), 1761734355
	li $3, 1761734355
	sw $3, 0x0($14)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+236)->POINTER(tmp_pointer_154[temp])
	addiu $24, $29, -208
	# STORE POINTER(tmp_pointer_154[temp]), -248691452
	li $3, -248691452
	sw $3, 0x0($24)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+240)->POINTER(tmp_pointer_155[temp])
	addiu $22, $29, -204
	# STORE POINTER(tmp_pointer_155[temp]), -585370257
	li $3, -585370257
	sw $3, 0x0($22)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+244)->POINTER(tmp_pointer_156[temp])
	addiu $23, $29, -200
	# STORE POINTER(tmp_pointer_156[temp]), 1581421921
	li $3, 1581421921
	sw $3, 0x0($23)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+248)->POINTER(tmp_pointer_157[temp])
	addiu $11, $29, -196
	# STORE POINTER(tmp_pointer_157[temp]), 2032931954
	li $3, 2032931954
	sw $3, 0x0($11)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+252)->POINTER(tmp_pointer_158[temp])
	addiu $16, $29, -192
	# STORE POINTER(tmp_pointer_158[temp]), -232837497
	li $3, -232837497
	sw $3, 0x0($16)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+256)->POINTER(tmp_pointer_159[temp])
	addiu $6, $29, -188
	# STORE POINTER(tmp_pointer_159[temp]), -361586023
	li $3, -361586023
	sw $3, 0x0($6)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+260)->POINTER(tmp_pointer_160[temp])
	addiu $7, $29, -184
	# STORE POINTER(tmp_pointer_160[temp]), 1180399945
	li $3, 1180399945
	sw $3, 0x0($7)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+264)->POINTER(tmp_pointer_161[temp])
	addiu $17, $29, -180
	# STORE POINTER(tmp_pointer_161[temp]), -940248727
	li $3, -940248727
	sw $3, 0x0($17)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+268)->POINTER(tmp_pointer_162[temp])
	addiu $15, $29, -176
	# STORE POINTER(tmp_pointer_162[temp]), 1175495179
	li $3, 1175495179
	sw $3, 0x0($15)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+272)->POINTER(tmp_pointer_163[temp])
	addiu $10, $29, -172
	# STORE POINTER(tmp_pointer_163[temp]), -2002866570
	li $3, -2002866570
	sw $3, 0x0($10)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+276)->POINTER(tmp_pointer_164[temp])
	addiu $20, $29, -168
	# STORE POINTER(tmp_pointer_164[temp]), 1444260543
	li $3, 1444260543
	sw $3, 0x0($20)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+280)->POINTER(tmp_pointer_165[temp])
	addiu $27, $29, -164
	# STORE POINTER(tmp_pointer_165[temp]), -1115441947
	li $3, -1115441947
	sw $3, 0x0($27)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+284)->POINTER(tmp_pointer_166[temp])
	addiu $12, $29, -160
	# STORE POINTER(tmp_pointer_166[temp]), -1999355682
	li $3, -1999355682
	sw $3, 0x0($12)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+288)->POINTER(tmp_pointer_167[temp])
	addiu $9, $29, -156
	# STORE POINTER(tmp_pointer_167[temp]), 986897468
	li $3, 986897468
	sw $3, 0x0($9)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+292)->POINTER(tmp_pointer_168[temp])
	addiu $5, $29, -152
	# STORE POINTER(tmp_pointer_168[temp]), -646376841
	li $3, -646376841
	sw $3, 0x0($5)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+296)->POINTER(tmp_pointer_169[temp])
	addiu $8, $29, -148
	# STORE POINTER(tmp_pointer_169[temp]), 1528095330
	li $3, 1528095330
	sw $3, 0x0($8)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+300)->POINTER(tmp_pointer_170[temp])
	addiu $19, $29, -144
	# STORE POINTER(tmp_pointer_170[temp]), 113845900
	li $3, 113845900
	sw $3, 0x0($19)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+304)->POINTER(tmp_pointer_171[temp])
	addiu $25, $29, -140
	# STORE POINTER(tmp_pointer_171[temp]), 1886450727
	li $3, 1886450727
	sw $3, 0x0($25)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+308)->POINTER(tmp_pointer_172[temp])
	addiu $21, $29, -136
	# STORE POINTER(tmp_pointer_172[temp]), 257617693
	li $3, 257617693
	sw $3, 0x0($21)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+312)->POINTER(tmp_pointer_173[temp])
	addiu $26, $29, -132
	# STORE POINTER(tmp_pointer_173[temp]), 617641447
	li $3, 617641447
	sw $3, 0x0($26)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+316)->POINTER(tmp_pointer_174[temp])
	addiu $14, $29, -128
	# STORE POINTER(tmp_pointer_174[temp]), 2108323588
	li $3, 2108323588
	sw $3, 0x0($14)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+320)->POINTER(tmp_pointer_175[temp])
	addiu $24, $29, -124
	# STORE POINTER(tmp_pointer_175[temp]), -1511698150
	li $3, -1511698150
	sw $3, 0x0($24)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+324)->POINTER(tmp_pointer_176[temp])
	addiu $22, $29, -120
	# STORE POINTER(tmp_pointer_176[temp]), -934377428
	li $3, -934377428
	sw $3, 0x0($22)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+328)->POINTER(tmp_pointer_177[temp])
	addiu $23, $29, -116
	# STORE POINTER(tmp_pointer_177[temp]), 1685574582
	li $3, 1685574582
	sw $3, 0x0($23)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+332)->POINTER(tmp_pointer_178[temp])
	addiu $11, $29, -112
	# STORE POINTER(tmp_pointer_178[temp]), -146587647
	li $3, -146587647
	sw $3, 0x0($11)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+336)->POINTER(tmp_pointer_179[temp])
	addiu $16, $29, -108
	# STORE POINTER(tmp_pointer_179[temp]), -701324057
	li $3, -701324057
	sw $3, 0x0($16)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+340)->POINTER(tmp_pointer_180[temp])
	addiu $6, $29, -104
	# STORE POINTER(tmp_pointer_180[temp]), 243164633
	li $3, 243164633
	sw $3, 0x0($6)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+344)->POINTER(tmp_pointer_181[temp])
	addiu $7, $29, -100
	# STORE POINTER(tmp_pointer_181[temp]), 765474257
	li $3, 765474257
	sw $3, 0x0($7)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+348)->POINTER(tmp_pointer_182[temp])
	addiu $17, $29, -96
	# STORE POINTER(tmp_pointer_182[temp]), 1644349516
	li $3, 1644349516
	sw $3, 0x0($17)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+352)->POINTER(tmp_pointer_183[temp])
	addiu $15, $29, -92
	# STORE POINTER(tmp_pointer_183[temp]), 872868955
	li $3, 872868955
	sw $3, 0x0($15)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+356)->POINTER(tmp_pointer_184[temp])
	addiu $10, $29, -88
	# STORE POINTER(tmp_pointer_184[temp]), -1652887731
	li $3, -1652887731
	sw $3, 0x0($10)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+360)->POINTER(tmp_pointer_185[temp])
	addiu $20, $29, -84
	# STORE POINTER(tmp_pointer_185[temp]), 1476073729
	li $3, 1476073729
	sw $3, 0x0($20)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+364)->POINTER(tmp_pointer_186[temp])
	addiu $27, $29, -80
	# STORE POINTER(tmp_pointer_186[temp]), -299222375
	li $3, -299222375
	sw $3, 0x0($27)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+368)->POINTER(tmp_pointer_187[temp])
	addiu $12, $29, -76
	# STORE POINTER(tmp_pointer_187[temp]), -1205701938
	li $3, -1205701938
	sw $3, 0x0($12)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+372)->POINTER(tmp_pointer_188[temp])
	addiu $9, $29, -72
	# STORE POINTER(tmp_pointer_188[temp]), 302771914
	li $3, 302771914
	sw $3, 0x0($9)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+376)->POINTER(tmp_pointer_189[temp])
	addiu $5, $29, -68
	# STORE POINTER(tmp_pointer_189[temp]), -1986235546
	li $3, -1986235546
	sw $3, 0x0($5)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+380)->POINTER(tmp_pointer_190[temp])
	addiu $8, $29, -64
	# STORE POINTER(tmp_pointer_190[temp]), 1861009141
	li $3, 1861009141
	sw $3, 0x0($8)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+384)->POINTER(tmp_pointer_191[temp])
	addiu $19, $29, -60
	# STORE POINTER(tmp_pointer_191[temp]), -1098803687
	li $3, -1098803687
	sw $3, 0x0($19)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+388)->POINTER(tmp_pointer_192[temp])
	addiu $25, $29, -56
	# STORE POINTER(tmp_pointer_192[temp]), -1370104357
	li $3, -1370104357
	sw $3, 0x0($25)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+392)->POINTER(tmp_pointer_193[temp])
	addiu $21, $29, -52
	# STORE POINTER(tmp_pointer_193[temp]), -1104419163
	li $3, -1104419163
	sw $3, 0x0($21)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+396)->POINTER(tmp_pointer_194[temp])
	addiu $26, $29, -48
	# STORE POINTER(tmp_pointer_194[temp]), -1293373514
	li $3, -1293373514
	sw $3, 0x0($26)
	# OFFSET (ARRAY(demo1[sp-0x2c])+0)->POINTER(tmp_pointer_195[temp])
	addiu $14, $29, -44
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_195[temp]), 10
	sw $18, 0x190($28)
	sw $13, -0x4($29)
	sw $14, -0x1c0($29)
	sw $31, 0x0($29)
	addiu $4, $29, -452
	lw $3, -0x1c0($29)
	sw $3, -0x4($4)
	li $3, 10
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 452
	lw $31, 0x0($29)
	# OFFSET (ARRAY(demo2[sp-0x1bc])+0)->POINTER(tmp_pointer_196[temp])
	addiu $24, $29, -444
	# Call FUNC_checkDouble; Params: POINTER(tmp_pointer_196[temp]), 5
	sw $24, -0x1c4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -456
	lw $3, -0x1c4($29)
	sw $3, -0x4($4)
	li $3, 5
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkDouble
	addiu $29, $29, 456
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_197[temp])
	addiu $22, $28, 2444
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_197[temp]), INT(total[sp-0x4])
	sw $22, -0x1c8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -460
	lw $3, -0x1c8($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 460
	lw $31, 0x0($29)
	# Call FUNC_bubbleSort; Params: INT(total[sp-0x4])
	sw $31, 0x0($29)
	addiu $4, $29, -460
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_bubbleSort
	addiu $29, $29, 460
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_198[temp])
	addiu $23, $28, 2444
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_198[temp]), INT(total[sp-0x4])
	sw $23, -0x1cc($29)
	sw $31, 0x0($29)
	addiu $4, $29, -464
	lw $3, -0x1cc($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 464
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_199[temp])
	addiu $11, $28, 2444
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_199[temp]), INT(total[sp-0x4])
	sw $11, -0x1d0($29)
	sw $31, 0x0($29)
	addiu $4, $29, -468
	lw $3, -0x1d0($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 468
	lw $31, 0x0($29)
	# Call FUNC_shellSort; Params: INT(total[sp-0x4])
	sw $31, 0x0($29)
	addiu $4, $29, -468
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_shellSort
	addiu $29, $29, 468
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_200[temp])
	addiu $16, $28, 2444
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_200[temp]), INT(total[sp-0x4])
	sw $16, -0x1d4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -472
	lw $3, -0x1d4($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 472
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_201[temp])
	addiu $6, $28, 2444
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_201[temp]), INT(total[sp-0x4])
	sw $6, -0x1d8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -476
	lw $3, -0x1d8($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 476
	lw $31, 0x0($29)
	# SUB, INT(tmp_int_529[temp]), INT(total[sp-0x4]), 1
	lw $7, -0x4($29)
	addiu $17, $7, -1
	# Call FUNC_mergeSort; Params: 0, INT(tmp_int_529[temp])
	sw $17, -0x1dc($29)
	sw $7, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -480
	li $3, 0
	sw $3, -0x4($4)
	lw $3, -0x1dc($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_mergeSort
	addiu $29, $29, 480
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_202[temp])
	addiu $15, $28, 2444
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_202[temp]), INT(total[sp-0x4])
	sw $15, -0x1e0($29)
	sw $31, 0x0($29)
	addiu $4, $29, -484
	lw $3, -0x1e0($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 484
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_203[temp])
	addiu $10, $28, 2444
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_203[temp]), INT(total[sp-0x4])
	sw $10, -0x1e4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -488
	lw $3, -0x1e4($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 488
	lw $31, 0x0($29)
	# SUB, INT(tmp_int_530[temp]), INT(total[sp-0x4]), 1
	lw $20, -0x4($29)
	addiu $27, $20, -1
	# Call FUNC_quickSort; Params: 0, INT(tmp_int_530[temp])
	sw $20, -0x4($29)
	sw $27, -0x1e8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -492
	li $3, 0
	sw $3, -0x4($4)
	lw $3, -0x1e8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_quickSort
	addiu $29, $29, 492
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_204[temp])
	addiu $12, $28, 2444
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_204[temp]), INT(total[sp-0x4])
	sw $12, -0x1ec($29)
	sw $31, 0x0($29)
	addiu $4, $29, -496
	lw $3, -0x1ec($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 496
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_205[temp])
	addiu $9, $28, 2444
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_205[temp]), INT(total[sp-0x4])
	sw $9, -0x1f0($29)
	sw $31, 0x0($29)
	addiu $4, $29, -500
	lw $3, -0x1f0($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 500
	lw $31, 0x0($29)
	# Call FUNC_shellSort; Params: INT(total[sp-0x4])
	sw $31, 0x0($29)
	addiu $4, $29, -500
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	move $29, $4
	jal FUNC_shellSort
	addiu $29, $29, 500
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_206[temp])
	addiu $5, $28, 2444
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_206[temp]), INT(total[sp-0x4])
	sw $5, -0x1f4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -504
	lw $3, -0x1f4($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 504
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_207[temp])
	addiu $8, $28, 2444
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_207[temp]), INT(total[sp-0x4])
	sw $8, -0x1f8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -508
	lw $3, -0x1f8($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 508
	lw $31, 0x0($29)
	# SUB, INT(tmp_int_531[temp]), INT(total[sp-0x4]), 1
	lw $19, -0x4($29)
	addiu $25, $19, -1
	# Call FUNC_mergeSort; Params: 0, INT(tmp_int_531[temp])
	sw $19, -0x4($29)
	sw $25, -0x1fc($29)
	sw $31, 0x0($29)
	addiu $4, $29, -512
	li $3, 0
	sw $3, -0x4($4)
	lw $3, -0x1fc($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_mergeSort
	addiu $29, $29, 512
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_208[temp])
	addiu $21, $28, 2444
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_208[temp]), INT(total[sp-0x4])
	sw $21, -0x200($29)
	sw $31, 0x0($29)
	addiu $4, $29, -516
	lw $3, -0x200($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 516
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_209[temp])
	addiu $26, $28, 2444
	# Call FUNC_initArr; Params: POINTER(tmp_pointer_209[temp]), INT(total[sp-0x4])
	sw $26, -0x204($29)
	sw $31, 0x0($29)
	addiu $4, $29, -520
	lw $3, -0x204($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initArr
	addiu $29, $29, 520
	lw $31, 0x0($29)
	# SUB, INT(tmp_int_532[temp]), INT(total[sp-0x4]), 1
	lw $18, -0x4($29)
	addiu $13, $18, -1
	# Call FUNC_quickSort; Params: 0, INT(tmp_int_532[temp])
	sw $18, -0x4($29)
	sw $13, -0x208($29)
	sw $31, 0x0($29)
	addiu $4, $29, -524
	li $3, 0
	sw $3, -0x4($4)
	lw $3, -0x208($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_quickSort
	addiu $29, $29, 524
	lw $31, 0x0($29)
	# OFFSET (ARRAY(src[data+0x98c])+0)->POINTER(tmp_pointer_210[temp])
	addiu $14, $28, 2444
	# Call FUNC_checkArr; Params: POINTER(tmp_pointer_210[temp]), INT(total[sp-0x4])
	sw $14, -0x20c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -528
	lw $3, -0x20c($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkArr
	addiu $29, $29, 528
	lw $31, 0x0($29)
	# GETINT INT(total[sp-0x4])
	li $2, 5
	syscall
	move $24, $2
	# OFFSET (ARRAY(matrix[data+0x0])+0)->POINTER(tmp_pointer_211[temp])
	addiu $22, $28, 0
	# Call FUNC_initDouble; Params: POINTER(tmp_pointer_211[temp]), INT(total[sp-0x4])
	sw $22, -0x210($29)
	sw $24, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -532
	lw $3, -0x210($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initDouble
	addiu $29, $29, 532
	lw $31, 0x0($29)
	# OFFSET (ARRAY(matrix[data+0x0])+0)->POINTER(tmp_pointer_212[temp])
	addiu $23, $28, 0
	# Call FUNC_determinant; Params: POINTER(tmp_pointer_212[temp]), INT(total[sp-0x4]); RET INT(tmp_int_533[temp])
	sw $23, -0x214($29)
	sw $31, 0x0($29)
	addiu $4, $29, -536
	lw $3, -0x214($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_determinant
	addiu $29, $29, 536
	lw $31, 0x0($29)
	move $11, $2
	# PRINT_INT INT(tmp_int_533[temp])
	li $2, 1
	move $4, $11
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# OFFSET (ARRAY(matrix[data+0x0])+0)->POINTER(tmp_pointer_213[temp])
	addiu $16, $28, 0
	# Call FUNC_checkDouble; Params: POINTER(tmp_pointer_213[temp]), INT(total[sp-0x4])
	sw $16, -0x218($29)
	sw $11, -0x21c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -544
	lw $3, -0x218($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkDouble
	addiu $29, $29, 544
	lw $31, 0x0($29)
	# OFFSET (ARRAY(matrix[data+0x0])+0)->POINTER(tmp_pointer_214[temp])
	addiu $6, $28, 0
	# Call FUNC_initDouble; Params: POINTER(tmp_pointer_214[temp]), INT(total[sp-0x4])
	sw $6, -0x220($29)
	sw $31, 0x0($29)
	addiu $4, $29, -548
	lw $3, -0x220($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_initDouble
	addiu $29, $29, 548
	lw $31, 0x0($29)
	# OFFSET (ARRAY(matrix[data+0x0])+0)->POINTER(tmp_pointer_215[temp])
	addiu $17, $28, 0
	# Call FUNC_determinant; Params: POINTER(tmp_pointer_215[temp]), INT(total[sp-0x4]); RET INT(tmp_int_534[temp])
	sw $17, -0x224($29)
	sw $31, 0x0($29)
	addiu $4, $29, -552
	lw $3, -0x224($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_determinant
	addiu $29, $29, 552
	lw $31, 0x0($29)
	move $7, $2
	# PRINT_INT INT(tmp_int_534[temp])
	li $2, 1
	move $4, $7
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# OFFSET (ARRAY(matrix[data+0x0])+0)->POINTER(tmp_pointer_216[temp])
	addiu $15, $28, 0
	# Call FUNC_checkDouble; Params: POINTER(tmp_pointer_216[temp]), INT(total[sp-0x4])
	sw $7, -0x228($29)
	sw $15, -0x22c($29)
	sw $31, 0x0($29)
	addiu $4, $29, -560
	lw $3, -0x22c($29)
	sw $3, -0x4($4)
	lw $3, -0x4($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_checkDouble
	addiu $29, $29, 560
	lw $31, 0x0($29)
	# RETURN 0
	li $2, 10
	syscall
	
