# Yuelin's Compiler
	
.data
	global:
	1 2 2 3 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	.space 4
	STR_1: .asciiz "19373630\n"
	STR_2: .asciiz "\n"
.text
	la $gp, global
	j FUNC_main
FUNC_output_id:
	# JUMP L_OR_EXP_0
L_OR_EXP_0:
	# JUMP L_AND_EXP_1
L_AND_EXP_1:
	# NOT, INT(tmp_int_9409[temp]), 0
	seq $17, $0, 0
	# ASS, INT(tmp_int_9410[temp]), INT(tmp_int_9409[temp])
	move $18, $17
	# Branch INT(tmp_int_9409[temp]) ? AND_3 : AND_END_2
	sw $17, -0x4($29)
	sw $18, -0x8($29)
	lw $19, -0x4($29)
	bne $19, $0, AND_3
	j AND_END_2
AND_3:
	# AND, INT(tmp_int_9410[sp-0x8]), 0, INT(tmp_int_9410[sp-0x8])
	lw $20, -0x8($29)
	li $20, 0
	# Branch INT(tmp_int_9410[sp-0x8]) ? AND_4 : AND_END_2
	sw $20, -0x8($29)
	lw $21, -0x8($29)
	bne $21, $0, AND_4
	j AND_END_2
AND_4:
	# JUMP AND_END_2
AND_END_2:
	# ASS, INT(tmp_int_9411[temp]), INT(tmp_int_9410[sp-0x8])
	lw $22, -0x8($29)
	move $23, $22
	# Branch INT(tmp_int_9411[temp]) ? OR_END_5 : OR_6
	sw $23, -0xc($29)
	lw $24, -0xc($29)
	bne $24, $0, OR_END_5
OR_6:
	# JUMP L_AND_EXP_7
L_AND_EXP_7:
	# JUMP AND_END_8
AND_END_8:
	# OR, INT(tmp_int_9411[sp-0xc]), 1, INT(tmp_int_9411[sp-0xc])
	lw $25, -0xc($29)
	li $25, 1
	# Branch INT(tmp_int_9411[sp-0xc]) ? OR_END_5 : OR_9
	sw $25, -0xc($29)
	lw $26, -0xc($29)
	bne $26, $0, OR_END_5
OR_9:
	# JUMP OR_END_5
OR_END_5:
	# Branch INT(tmp_int_9411[sp-0xc]) ? IF_BODY_10 : IF_END_11
	lw $27, -0xc($29)
	bne $27, $0, IF_BODY_10
	j IF_END_11
IF_BODY_10:
	# JUMP B_12
B_12:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_13
B_13:
	# JUMP IF_END_11
IF_END_11:
	# RETURN VOID
	jr $ra
	
FUNC_output_a_plus_b:
	lw $5, -0x4($29)
	lw $6, -0x8($29)
	# ADD, INT(tmp_int_9412[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $5, $6
	# PRINT_INT INT(tmp_int_9412[temp])
	li $2, 1
	move $4, $17
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_A_plus_B:
	lw $5, -0x4($29)
	lw $6, -0x8($29)
	# ADD, INT(tmp_int_9413[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $5, $6
	# RETURN INT(tmp_int_9413[temp])
	move $2, $17
	jr $ra
	
FUNC_return_one:
	# RETURN 1
	li $2, 1
	jr $ra
	
FUNC_factorial:
	lw $5, -0x4($29)
	# JUMP L_OR_EXP_18
L_OR_EXP_18:
	# JUMP L_AND_EXP_19
L_AND_EXP_19:
	# MUL, INT(tmp_int_9414[temp]), INT(n[sp-0x4]), 4
	sll $17, $5, 2
	# ADD, INT(tmp_int_9414[temp]), INT(tmp_int_9414[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9414[temp]))->POINTER(tmp_pointer_3209[temp])
	addiu $3, $28, 36
	addu $18, $3, $17
	# LOAD POINTER(tmp_pointer_3209[temp]), INT(tmp_int_9415[temp])
	lw $19, 0x0($18)
	# NEQ, INT(tmp_int_9416[temp]), INT(tmp_int_9415[temp]), 0
	sne $20, $19, 0
	# JUMP AND_END_20
	sw $20, -0x8($29)
AND_END_20:
	# JUMP OR_END_21
OR_END_21:
	# Branch INT(tmp_int_9416[sp-0x8]) ? IF_BODY_22 : IF_ELSE_24
	lw $21, -0x8($29)
	bne $21, $0, IF_BODY_22
	j IF_ELSE_24
IF_BODY_22:
	# JUMP B_25
B_25:
	# MUL, INT(tmp_int_9417[temp]), INT(n[sp-0x4]), 4
	sll $22, $5, 2
	# ADD, INT(tmp_int_9417[temp]), INT(tmp_int_9417[temp]), 0
	addiu $22, $22, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9417[temp]))->POINTER(tmp_pointer_3210[temp])
	addiu $3, $28, 36
	addu $23, $3, $22
	# LOAD POINTER(tmp_pointer_3210[temp]), INT(tmp_int_9418[temp])
	lw $24, 0x0($23)
	# RETURN INT(tmp_int_9418[temp])
	move $2, $24
	jr $ra
	# JUMP B_26
B_26:
	# JUMP IF_END_23
	j IF_END_23
IF_ELSE_24:
	# JUMP B_27
B_27:
	# SUB, INT(tmp_int_9420[temp]), INT(n[sp-0x4]), 1
	addiu $25, $5, -1
	# MUL, INT(tmp_int_9419[temp]), INT(tmp_int_9420[temp]), 4
	sll $26, $25, 2
	# ADD, INT(tmp_int_9419[temp]), INT(tmp_int_9419[temp]), 0
	addiu $26, $26, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9419[temp]))->POINTER(tmp_pointer_3211[temp])
	addiu $3, $28, 36
	addu $27, $3, $26
	# SUB, INT(tmp_int_9421[temp]), INT(n[sp-0x4]), 1
	addiu $17, $5, -1
	# Call FUNC_factorial; Params: INT(tmp_int_9421[temp]); RET INT(tmp_int_9422[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -20
	sw $17, -0x4($4)
	sw $27, -0xc($29)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $18, $2
	lw $5, -0x4($29)
	# STORE POINTER(tmp_pointer_3211[sp-0xc]), INT(tmp_int_9422[temp])
	lw $19, -0xc($29)
	sw $18, 0x0($19)
	# MUL, INT(tmp_int_9423[temp]), INT(n[sp-0x4]), 4
	sll $20, $5, 2
	# ADD, INT(tmp_int_9423[temp]), INT(tmp_int_9423[temp]), 0
	addiu $20, $20, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9423[temp]))->POINTER(tmp_pointer_3212[temp])
	addiu $3, $28, 36
	addu $21, $3, $20
	# SUB, INT(tmp_int_9425[temp]), INT(n[sp-0x4]), 1
	addiu $22, $5, -1
	# MUL, INT(tmp_int_9424[temp]), INT(tmp_int_9425[temp]), 4
	sll $23, $22, 2
	# ADD, INT(tmp_int_9424[temp]), INT(tmp_int_9424[temp]), 0
	addiu $23, $23, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9424[temp]))->POINTER(tmp_pointer_3213[temp])
	addiu $3, $28, 36
	addu $24, $3, $23
	# LOAD POINTER(tmp_pointer_3213[temp]), INT(tmp_int_9426[temp])
	lw $25, 0x0($24)
	# MUL, INT(tmp_int_9427[temp]), INT(tmp_int_9426[temp]), INT(n[sp-0x4])
	mult $25 $5
	mflo $26
	# STORE POINTER(tmp_pointer_3212[temp]), INT(tmp_int_9427[temp])
	sw $26, 0x0($21)
	# MUL, INT(tmp_int_9428[temp]), INT(n[sp-0x4]), 4
	sll $17, $5, 2
	# ADD, INT(tmp_int_9428[temp]), INT(tmp_int_9428[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9428[temp]))->POINTER(tmp_pointer_3214[temp])
	addiu $3, $28, 36
	addu $27, $3, $17
	# LOAD POINTER(tmp_pointer_3214[temp]), INT(tmp_int_9429[temp])
	lw $19, 0x0($27)
	# RETURN INT(tmp_int_9429[temp])
	move $2, $19
	jr $ra
	# JUMP B_28
B_28:
	# JUMP IF_END_23
IF_END_23:
	# RETURN 0
	li $2, 0
	jr $ra
	
FUNC_isPrime:
	lw $6, -0x4($29)
	# DEF, INT(i[sp-0x8]), 3
	li $5, 3
	# JUMP L_OR_EXP_30
L_OR_EXP_30:
	# JUMP L_AND_EXP_31
L_AND_EXP_31:
	# LE, INT(tmp_int_9430[temp]), INT(n[sp-0x4]), 0
	sle $17, $6, 0
	# JUMP AND_END_32
	sw $17, -0xc($29)
AND_END_32:
	# JUMP OR_END_33
OR_END_33:
	# Branch INT(tmp_int_9430[sp-0xc]) ? IF_BODY_34 : IF_END_35
	lw $18, -0xc($29)
	bne $18, $0, IF_BODY_34
	j IF_END_35
IF_BODY_34:
	# JUMP B_36
B_36:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_37
B_37:
	# JUMP IF_END_35
IF_END_35:
	# JUMP L_OR_EXP_38
L_OR_EXP_38:
	# JUMP L_AND_EXP_39
L_AND_EXP_39:
	# MOD, INT(tmp_int_9431[temp]), INT(n[sp-0x4]), 2
	bltz $6, DIV_507
	andi $19, $6, 1
	j DIV_END_508
DIV_507:
	subu $6, $0, $6
	andi $19, $6, 1
	subu $19, $0, $19
DIV_END_508:
	# EQ, INT(tmp_int_9432[temp]), INT(tmp_int_9431[temp]), 0
	seq $20, $19, 0
	# JUMP AND_END_40
	sw $20, -0x10($29)
AND_END_40:
	# JUMP OR_END_41
OR_END_41:
	# Branch INT(tmp_int_9432[sp-0x10]) ? IF_BODY_42 : IF_END_43
	lw $21, -0x10($29)
	bne $21, $0, IF_BODY_42
	j IF_END_43
IF_BODY_42:
	# JUMP B_44
B_44:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_45
B_45:
	# JUMP IF_END_43
IF_END_43:
	# JUMP WHILE_46
WHILE_46:
	# JUMP L_OR_EXP_49
L_OR_EXP_49:
	# JUMP L_AND_EXP_50
L_AND_EXP_50:
	# DIV, INT(tmp_int_9434[temp]), INT(n[sp-0x4]), 2
	bltz $6, DIV_509
	srl $22, $6, 1
	j DIV_END_510
DIV_509:
	subu $6, $0, $6
	srl $22, $6, 1
	subu $22, $0, $22
DIV_END_510:
	# LT, INT(tmp_int_9433[temp]), INT(i[sp-0x8]), INT(tmp_int_9434[temp])
	slt $23, $5, $22
	# JUMP AND_END_51
	sw $23, -0x14($29)
AND_END_51:
	# JUMP OR_END_52
OR_END_52:
	# Branch INT(tmp_int_9433[sp-0x14]) ? WHILE_BODY_47 : WHILE_END_48
	lw $24, -0x14($29)
	bne $24, $0, WHILE_BODY_47
	j WHILE_END_48
WHILE_BODY_47:
	# JUMP B_53
B_53:
	# JUMP L_OR_EXP_54
	j L_OR_EXP_54
	# JUMP B_62
	j B_62
L_OR_EXP_54:
	# JUMP L_AND_EXP_55
L_AND_EXP_55:
	# MOD, INT(tmp_int_9435[temp]), INT(n[sp-0x4]), INT(i[sp-0x8])
	div $6 $5
	mfhi $25
	# EQ, INT(tmp_int_9436[temp]), INT(tmp_int_9435[temp]), 0
	seq $26, $25, 0
	# JUMP AND_END_56
	sw $26, -0x18($29)
AND_END_56:
	# JUMP OR_END_57
OR_END_57:
	# Branch INT(tmp_int_9436[sp-0x18]) ? IF_BODY_58 : IF_END_59
	lw $27, -0x18($29)
	bne $27, $0, IF_BODY_58
	j IF_END_59
IF_BODY_58:
	# JUMP B_60
B_60:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_61
B_61:
	# JUMP IF_END_59
IF_END_59:
	# ADD, INT(tmp_int_9437[temp]), INT(i[sp-0x8]), 2
	addiu $17, $5, 2
	# ASS, INT(i[sp-0x8]), INT(tmp_int_9437[temp])
	move $5, $17
	# JUMP B_62
B_62:
	# JUMP WHILE_46
	j WHILE_46
WHILE_END_48:
	# ADD, INT(tmp_int_9438[temp]), 1, 1
	li $18, 2
	# DIV, INT(tmp_int_9440[temp]), 1, 1
	li $19, 1
	# SUB, INT(tmp_int_9439[temp]), INT(tmp_int_9438[temp]), INT(tmp_int_9440[temp])
	subu $20, $18, $19
	# RETURN INT(tmp_int_9439[temp])
	move $2, $20
	jr $ra
	
FUNC_sumMatrix:
	lw $8, -0x4($29)
	# DEF, INT(i[sp-0x8]), 0
	li $7, 0
	# DEF, INT(sum[sp-0x10]), 0
	li $6, 0
	# JUMP WHILE_64
WHILE_64:
	# JUMP L_OR_EXP_67
L_OR_EXP_67:
	# JUMP L_AND_EXP_68
L_AND_EXP_68:
	# LT, INT(tmp_int_9441[temp]), INT(i[sp-0x8]), 10
	li $3, 10
	slt $17, $7, $3
	# JUMP AND_END_69
	sw $17, -0x14($29)
AND_END_69:
	# JUMP OR_END_70
OR_END_70:
	# Branch INT(tmp_int_9441[sp-0x14]) ? WHILE_BODY_65 : WHILE_END_66
	lw $18, -0x14($29)
	bne $18, $0, WHILE_BODY_65
	j WHILE_END_66
WHILE_BODY_65:
	# JUMP B_71
B_71:
	# ASS, INT(j[sp-0xc]), 0
	li $5, 0
	# JUMP WHILE_72
	j WHILE_72
	# JUMP B_81
	j B_81
WHILE_72:
	# JUMP L_OR_EXP_75
L_OR_EXP_75:
	# JUMP L_AND_EXP_76
L_AND_EXP_76:
	# LT, INT(tmp_int_9442[temp]), INT(j[sp-0xc]), 10
	li $3, 10
	slt $19, $5, $3
	# JUMP AND_END_77
	sw $19, -0x18($29)
AND_END_77:
	# JUMP OR_END_78
OR_END_78:
	# Branch INT(tmp_int_9442[sp-0x18]) ? WHILE_BODY_73 : WHILE_END_74
	lw $20, -0x18($29)
	bne $20, $0, WHILE_BODY_73
	j WHILE_END_74
WHILE_BODY_73:
	# JUMP B_79
B_79:
	# MUL, INT(tmp_int_9444[temp]), INT(j[sp-0xc]), 4
	sll $21, $5, 2
	# ADD, INT(tmp_int_9444[temp]), INT(tmp_int_9444[temp]), 0
	addiu $21, $21, 0
	# MUL, INT(tmp_int_9445[temp]), INT(i[sp-0x8]), 40
	sll $22, $7, 5
	sll $3, $7, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_9445[temp]), INT(tmp_int_9445[temp]), INT(tmp_int_9444[temp])
	addu $22, $22, $21
	# OFFSET (ARRAY(array_f[sp-0x4])+INT(tmp_int_9445[temp]))->POINTER(tmp_pointer_3215[temp])
	addu $23, $8, $22
	# LOAD POINTER(tmp_pointer_3215[temp]), INT(tmp_int_9446[temp])
	lw $24, 0x0($23)
	# ADD, INT(tmp_int_9443[temp]), INT(sum[sp-0x10]), INT(tmp_int_9446[temp])
	addu $25, $6, $24
	# ASS, INT(sum[sp-0x10]), INT(tmp_int_9443[temp])
	move $6, $25
	# ADD, INT(tmp_int_9447[temp]), INT(j[sp-0xc]), 1
	addiu $26, $5, 1
	# ASS, INT(j[sp-0xc]), INT(tmp_int_9447[temp])
	move $5, $26
	# JUMP B_80
	sw $22, -0x1c($29)
B_80:
	# JUMP WHILE_72
	j WHILE_72
WHILE_END_74:
	# ADD, INT(tmp_int_9448[temp]), INT(i[sp-0x8]), 1
	addiu $27, $7, 1
	# ASS, INT(i[sp-0x8]), INT(tmp_int_9448[temp])
	move $7, $27
	# JUMP B_81
B_81:
	# JUMP WHILE_64
	j WHILE_64
WHILE_END_66:
	# RETURN INT(sum[sp-0x10])
	move $2, $6
	jr $ra
	
FUNC_matrixMulti:
	lw $10, -0x4($29)
	lw $9, -0x8($29)
	lw $5, -0xc($29)
	# DEF, INT(i[sp-0x1a0]), 0
	li $8, 0
	# JUMP WHILE_83
WHILE_83:
	# JUMP L_OR_EXP_86
L_OR_EXP_86:
	# JUMP L_AND_EXP_87
L_AND_EXP_87:
	# LT, INT(tmp_int_9449[temp]), INT(i[sp-0x1a0]), 10
	li $3, 10
	slt $17, $8, $3
	# JUMP AND_END_88
	sw $17, -0x1ac($29)
AND_END_88:
	# JUMP OR_END_89
OR_END_89:
	# Branch INT(tmp_int_9449[sp-0x1ac]) ? WHILE_BODY_84 : WHILE_END_85
	lw $18, -0x1ac($29)
	bne $18, $0, WHILE_BODY_84
	j WHILE_END_85
WHILE_BODY_84:
	# JUMP B_90
B_90:
	# ASS, INT(j[sp-0x1a4]), 0
	li $7, 0
	# JUMP WHILE_91
	j WHILE_91
	# JUMP B_109
	j B_109
WHILE_91:
	# JUMP L_OR_EXP_94
L_OR_EXP_94:
	# JUMP L_AND_EXP_95
L_AND_EXP_95:
	# LT, INT(tmp_int_9450[temp]), INT(j[sp-0x1a4]), 10
	li $3, 10
	slt $19, $7, $3
	# JUMP AND_END_96
	sw $19, -0x1b0($29)
AND_END_96:
	# JUMP OR_END_97
OR_END_97:
	# Branch INT(tmp_int_9450[sp-0x1b0]) ? WHILE_BODY_92 : WHILE_END_93
	lw $20, -0x1b0($29)
	bne $20, $0, WHILE_BODY_92
	j WHILE_END_93
WHILE_BODY_92:
	# JUMP B_98
B_98:
	# ASS, INT(k[sp-0x1a8]), 0
	li $5, 0
	# MUL, INT(tmp_int_9451[temp]), INT(j[sp-0x1a4]), 4
	sll $21, $7, 2
	# ADD, INT(tmp_int_9451[temp]), INT(tmp_int_9451[temp]), 0
	addiu $21, $21, 0
	# MUL, INT(tmp_int_9452[temp]), INT(i[sp-0x1a0]), 40
	sll $22, $8, 5
	sll $3, $8, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_9452[temp]), INT(tmp_int_9452[temp]), INT(tmp_int_9451[temp])
	addu $22, $22, $21
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_9452[temp]))->POINTER(tmp_pointer_3216[temp])
	addiu $3, $29, -412
	addu $23, $3, $22
	# STORE POINTER(tmp_pointer_3216[temp]), 0
	li $3, 0
	sw $3, 0x0($23)
	# JUMP WHILE_99
	j WHILE_99
	# JUMP B_108
	j B_108
WHILE_99:
	# JUMP L_OR_EXP_102
L_OR_EXP_102:
	# JUMP L_AND_EXP_103
L_AND_EXP_103:
	# LT, INT(tmp_int_9453[temp]), INT(k[sp-0x1a8]), 10
	li $3, 10
	slt $24, $5, $3
	# JUMP AND_END_104
	sw $24, -0x1b4($29)
AND_END_104:
	# JUMP OR_END_105
OR_END_105:
	# Branch INT(tmp_int_9453[sp-0x1b4]) ? WHILE_BODY_100 : WHILE_END_101
	lw $25, -0x1b4($29)
	bne $25, $0, WHILE_BODY_100
	j WHILE_END_101
WHILE_BODY_100:
	# JUMP B_106
B_106:
	# MUL, INT(tmp_int_9454[temp]), INT(j[sp-0x1a4]), 4
	sll $26, $7, 2
	# ADD, INT(tmp_int_9454[temp]), INT(tmp_int_9454[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_9455[temp]), INT(i[sp-0x1a0]), 40
	sll $27, $8, 5
	sll $3, $8, 3
	addu $27, $27, $3
	# ADD, INT(tmp_int_9455[temp]), INT(tmp_int_9455[temp]), INT(tmp_int_9454[temp])
	addu $27, $27, $26
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_9455[temp]))->POINTER(tmp_pointer_3217[temp])
	addiu $3, $29, -412
	addu $17, $3, $27
	# MUL, INT(tmp_int_9456[temp]), INT(j[sp-0x1a4]), 4
	sll $18, $7, 2
	# ADD, INT(tmp_int_9456[temp]), INT(tmp_int_9456[temp]), 0
	addiu $18, $18, 0
	# MUL, INT(tmp_int_9457[temp]), INT(i[sp-0x1a0]), 40
	sll $19, $8, 5
	sll $3, $8, 3
	addu $19, $19, $3
	# ADD, INT(tmp_int_9457[temp]), INT(tmp_int_9457[temp]), INT(tmp_int_9456[temp])
	addu $19, $19, $18
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_9457[temp]))->POINTER(tmp_pointer_3218[temp])
	addiu $3, $29, -412
	addu $20, $3, $19
	# LOAD POINTER(tmp_pointer_3218[temp]), INT(tmp_int_9458[temp])
	lw $21, 0x0($20)
	# MUL, INT(tmp_int_9460[temp]), INT(k[sp-0x1a8]), 4
	sll $22, $5, 2
	# ADD, INT(tmp_int_9460[temp]), INT(tmp_int_9460[temp]), 0
	addiu $22, $22, 0
	# MUL, INT(tmp_int_9461[temp]), INT(i[sp-0x1a0]), 40
	sll $23, $8, 5
	sll $3, $8, 3
	addu $23, $23, $3
	# ADD, INT(tmp_int_9461[temp]), INT(tmp_int_9461[temp]), INT(tmp_int_9460[temp])
	addu $23, $23, $22
	# OFFSET (ARRAY(matrix_a[sp-0x4])+INT(tmp_int_9461[temp]))->POINTER(tmp_pointer_3219[temp])
	addu $24, $10, $23
	# LOAD POINTER(tmp_pointer_3219[temp]), INT(tmp_int_9462[temp])
	lw $25, 0x0($24)
	# MUL, INT(tmp_int_9464[temp]), INT(j[sp-0x1a4]), 4
	sll $26, $7, 2
	# ADD, INT(tmp_int_9464[temp]), INT(tmp_int_9464[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_9465[temp]), INT(k[sp-0x1a8]), 40
	sll $27, $5, 5
	sll $3, $5, 3
	addu $27, $27, $3
	# ADD, INT(tmp_int_9465[temp]), INT(tmp_int_9465[temp]), INT(tmp_int_9464[temp])
	addu $27, $27, $26
	# OFFSET (ARRAY(matrix_b[sp-0x8])+INT(tmp_int_9465[temp]))->POINTER(tmp_pointer_3220[temp])
	addu $18, $9, $27
	# LOAD POINTER(tmp_pointer_3220[temp]), INT(tmp_int_9466[temp])
	lw $19, 0x0($18)
	# MUL, INT(tmp_int_9463[temp]), INT(tmp_int_9462[temp]), INT(tmp_int_9466[temp])
	mult $25 $19
	mflo $20
	# ADD, INT(tmp_int_9459[temp]), INT(tmp_int_9458[temp]), INT(tmp_int_9463[temp])
	addu $22, $21, $20
	# STORE POINTER(tmp_pointer_3217[temp]), INT(tmp_int_9459[temp])
	sw $22, 0x0($17)
	# ADD, INT(tmp_int_9467[temp]), INT(k[sp-0x1a8]), 1
	addiu $24, $5, 1
	# ASS, INT(k[sp-0x1a8]), INT(tmp_int_9467[temp])
	move $5, $24
	# JUMP B_107
	sw $27, -0x1b8($29)
	sw $23, -0x1bc($29)
B_107:
	# JUMP WHILE_99
	j WHILE_99
WHILE_END_101:
	# ADD, INT(tmp_int_9468[temp]), INT(j[sp-0x1a4]), 1
	addiu $26, $7, 1
	# ASS, INT(j[sp-0x1a4]), INT(tmp_int_9468[temp])
	move $7, $26
	# JUMP B_108
B_108:
	# JUMP WHILE_91
	j WHILE_91
WHILE_END_93:
	# ADD, INT(tmp_int_9469[temp]), INT(i[sp-0x1a0]), 1
	addiu $18, $8, 1
	# ASS, INT(i[sp-0x1a0]), INT(tmp_int_9469[temp])
	move $8, $18
	# JUMP B_109
B_109:
	# JUMP WHILE_83
	j WHILE_83
WHILE_END_85:
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+0)->POINTER(tmp_pointer_3221[temp])
	addiu $25, $29, -412
	# Call FUNC_sumMatrix; Params: POINTER(tmp_pointer_3221[temp]); RET INT(tmp_int_9470[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -452
	sw $25, -0x4($4)
	move $29, $4
	jal FUNC_sumMatrix
	addiu $29, $29, 452
	lw $31, 0x0($29)
	move $19, $2
	# RETURN INT(tmp_int_9470[temp])
	move $2, $19
	jr $ra
	
FUNC_main:
	# Call FUNC_output_id; Params: 
	sw $31, 0x0($29)
	addiu $4, $29, -12
	move $29, $4
	jal FUNC_output_id
	addiu $29, $29, 12
	lw $31, 0x0($29)
	# MUL, INT(tmp_int_9472[temp]), 3, 3
	li $17, 9
	# ADD, INT(tmp_int_9471[temp]), 80, INT(tmp_int_9472[temp])
	addiu $18, $17, 80
	# Call FUNC_isPrime; Params: INT(tmp_int_9471[temp]); RET INT(tmp_int_9473[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -16
	sw $18, -0x4($4)
	move $29, $4
	jal FUNC_isPrime
	addiu $29, $29, 16
	lw $31, 0x0($29)
	move $19, $2
	# PRINT_INT INT(tmp_int_9473[temp])
	li $2, 1
	move $4, $19
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP L_OR_EXP_111
L_OR_EXP_111:
	# JUMP L_AND_EXP_112
L_AND_EXP_112:
	# GE, INT(tmp_int_9474[temp]), INT(const_b[data+0x4]), INT(int_c[data+0x10])
	lw $20, 0x4($28)
	lw $21, 0x10($28)
	sge $22, $20, $21
	# JUMP AND_END_113
	sw $22, -0xc($29)
	sw $20, 0x4($28)
	sw $21, 0x10($28)
AND_END_113:
	# JUMP OR_END_114
OR_END_114:
	# Branch INT(tmp_int_9474[sp-0xc]) ? IF_BODY_115 : IF_END_116
	lw $23, -0xc($29)
	bne $23, $0, IF_BODY_115
	j IF_END_116
IF_BODY_115:
	# JUMP B_117
B_117:
	# ASS, INT(int_d[data+0x14]), 1
	li $24, 1
	# JUMP B_118
	sw $24, 0x14($28)
B_118:
	# JUMP IF_END_116
IF_END_116:
	# JUMP L_OR_EXP_119
L_OR_EXP_119:
	# JUMP L_AND_EXP_120
L_AND_EXP_120:
	# EQ, INT(tmp_int_9475[temp]), INT(const_b[data+0x4]), INT(int_d[data+0x14])
	lw $25, 0x4($28)
	lw $26, 0x14($28)
	seq $27, $25, $26
	# JUMP AND_END_121
	sw $25, 0x4($28)
	sw $27, -0x10($29)
	sw $26, 0x14($28)
AND_END_121:
	# JUMP OR_END_122
OR_END_122:
	# Branch INT(tmp_int_9475[sp-0x10]) ? IF_BODY_123 : IF_END_124
	lw $17, -0x10($29)
	bne $17, $0, IF_BODY_123
	j IF_END_124
IF_BODY_123:
	# JUMP B_125
B_125:
	# ASS, INT(int_e[data+0x18]), 0
	li $18, 0
	# JUMP B_126
	sw $18, 0x18($28)
B_126:
	# JUMP IF_END_124
IF_END_124:
	# JUMP L_OR_EXP_127
L_OR_EXP_127:
	# JUMP L_AND_EXP_128
L_AND_EXP_128:
	# GT, INT(tmp_int_9476[temp]), INT(const_b[data+0x4]), INT(int_e[data+0x18])
	lw $19, 0x4($28)
	lw $22, 0x18($28)
	sgt $20, $19, $22
	# JUMP AND_END_129
	sw $19, 0x4($28)
	sw $22, 0x18($28)
	sw $20, -0x14($29)
AND_END_129:
	# JUMP OR_END_130
OR_END_130:
	# Branch INT(tmp_int_9476[sp-0x14]) ? IF_BODY_131 : IF_ELSE_133
	lw $21, -0x14($29)
	bne $21, $0, IF_BODY_131
	j IF_ELSE_133
IF_BODY_131:
	# JUMP B_134
B_134:
	# ASS, INT(int_d[data+0x14]), 3
	li $23, 3
	# JUMP B_135
	sw $23, 0x14($28)
B_135:
	# JUMP IF_END_132
	j IF_END_132
IF_ELSE_133:
	# JUMP B_136
B_136:
	# ASS, INT(int_d[data+0x14]), 4
	li $24, 4
	# JUMP B_137
	sw $24, 0x14($28)
B_137:
	# JUMP IF_END_132
IF_END_132:
	# DEF, INT(i[sp-0x4]), 5
	li $6, 5
	# MUL, INT(tmp_int_9478[temp]), 3, 2
	li $25, 6
	# DIV, INT(tmp_int_9479[temp]), INT(tmp_int_9478[temp]), 2
	bltz $25, DIV_511
	srl $27, $25, 1
	j DIV_END_512
DIV_511:
	subu $25, $0, $25
	srl $27, $25, 1
	subu $27, $0, $27
DIV_END_512:
	# ADD, INT(tmp_int_9477[temp]), INT(i[sp-0x4]), INT(tmp_int_9479[temp])
	addu $26, $6, $27
	# ASS, INT(int_c[data+0x10]), INT(tmp_int_9477[temp])
	move $17, $26
	# ASS, INT(i[sp-0x4]), 0
	li $6, 0
	# JUMP WHILE_138
	sw $17, 0x10($28)
WHILE_138:
	# JUMP L_OR_EXP_141
L_OR_EXP_141:
	# JUMP L_AND_EXP_142
L_AND_EXP_142:
	# LT, INT(tmp_int_9480[temp]), INT(i[sp-0x4]), 100
	li $3, 100
	slt $18, $6, $3
	# JUMP AND_END_143
	sw $18, -0x18($29)
AND_END_143:
	# JUMP OR_END_144
OR_END_144:
	# Branch INT(tmp_int_9480[sp-0x18]) ? WHILE_BODY_139 : WHILE_END_140
	lw $19, -0x18($29)
	bne $19, $0, WHILE_BODY_139
	j WHILE_END_140
WHILE_BODY_139:
	# JUMP B_145
B_145:
	# JUMP L_OR_EXP_146
	j L_OR_EXP_146
	# JUMP B_161
	j B_161
L_OR_EXP_146:
	# JUMP L_AND_EXP_147
L_AND_EXP_147:
	# EQ, INT(tmp_int_9481[temp]), INT(i[sp-0x4]), 0
	seq $22, $6, 0
	# JUMP AND_END_148
	sw $22, -0x1c($29)
AND_END_148:
	# ASS, INT(tmp_int_9482[temp]), INT(tmp_int_9481[sp-0x1c])
	lw $20, -0x1c($29)
	move $21, $20
	# Branch INT(tmp_int_9482[temp]) ? OR_END_149 : OR_150
	sw $21, -0x20($29)
	lw $23, -0x20($29)
	bne $23, $0, OR_END_149
OR_150:
	# JUMP L_AND_EXP_151
L_AND_EXP_151:
	# EQ, INT(tmp_int_9483[temp]), INT(i[sp-0x4]), 1
	seq $24, $6, 1
	# JUMP AND_END_152
	sw $24, -0x24($29)
AND_END_152:
	# OR, INT(tmp_int_9482[sp-0x20]), INT(tmp_int_9483[sp-0x24]), INT(tmp_int_9482[sp-0x20])
	lw $25, -0x24($29)
	lw $27, -0x20($29)
	or $27, $25, $27
	# Branch INT(tmp_int_9482[sp-0x20]) ? OR_END_149 : OR_153
	sw $27, -0x20($29)
	lw $26, -0x20($29)
	bne $26, $0, OR_END_149
OR_153:
	# JUMP OR_END_149
OR_END_149:
	# Branch INT(tmp_int_9482[sp-0x20]) ? IF_BODY_154 : IF_ELSE_156
	lw $17, -0x20($29)
	bne $17, $0, IF_BODY_154
	j IF_ELSE_156
IF_BODY_154:
	# JUMP B_157
B_157:
	# MUL, INT(tmp_int_9484[temp]), INT(i[sp-0x4]), 4
	sll $18, $6, 2
	# ADD, INT(tmp_int_9484[temp]), INT(tmp_int_9484[temp]), 0
	addiu $18, $18, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9484[temp]))->POINTER(tmp_pointer_3222[temp])
	addiu $3, $28, 36
	addu $19, $3, $18
	# STORE POINTER(tmp_pointer_3222[temp]), 1
	li $3, 1
	sw $3, 0x0($19)
	# JUMP B_158
B_158:
	# JUMP IF_END_155
	j IF_END_155
IF_ELSE_156:
	# JUMP B_159
B_159:
	# MUL, INT(tmp_int_9485[temp]), INT(i[sp-0x4]), 4
	sll $22, $6, 2
	# ADD, INT(tmp_int_9485[temp]), INT(tmp_int_9485[temp]), 0
	addiu $22, $22, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9485[temp]))->POINTER(tmp_pointer_3223[temp])
	addiu $3, $28, 36
	addu $20, $3, $22
	# STORE POINTER(tmp_pointer_3223[temp]), 0
	li $3, 0
	sw $3, 0x0($20)
	# JUMP B_160
B_160:
	# JUMP IF_END_155
IF_END_155:
	# ADD, INT(tmp_int_9486[temp]), INT(i[sp-0x4]), 1
	addiu $21, $6, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_9486[temp])
	move $6, $21
	# JUMP B_161
B_161:
	# JUMP WHILE_138
	j WHILE_138
WHILE_END_140:
	# ASS, INT(i[sp-0x4]), 5
	li $6, 5
	# JUMP B_162
B_162:
	# JUMP B_163
B_163:
	# JUMP WHILE_164
WHILE_164:
	# JUMP L_OR_EXP_167
L_OR_EXP_167:
	# JUMP L_AND_EXP_168
L_AND_EXP_168:
	# LT, INT(tmp_int_9487[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $23, 0x10($28)
	slt $24, $6, $23
	# JUMP AND_END_169
	sw $24, -0x28($29)
	sw $23, 0x10($28)
AND_END_169:
	# ASS, INT(tmp_int_9488[temp]), INT(tmp_int_9487[sp-0x28])
	lw $25, -0x28($29)
	move $27, $25
	# Branch INT(tmp_int_9488[temp]) ? OR_END_170 : OR_171
	sw $27, -0x2c($29)
	lw $26, -0x2c($29)
	bne $26, $0, OR_END_170
OR_171:
	# JUMP L_AND_EXP_172
L_AND_EXP_172:
	# GT, INT(tmp_int_9489[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $17, 0x10($28)
	sgt $18, $6, $17
	# JUMP AND_END_173
	sw $18, -0x30($29)
	sw $17, 0x10($28)
AND_END_173:
	# OR, INT(tmp_int_9488[sp-0x2c]), INT(tmp_int_9489[sp-0x30]), INT(tmp_int_9488[sp-0x2c])
	lw $19, -0x30($29)
	lw $22, -0x2c($29)
	or $22, $19, $22
	# Branch INT(tmp_int_9488[sp-0x2c]) ? OR_END_170 : OR_174
	sw $22, -0x2c($29)
	lw $20, -0x2c($29)
	bne $20, $0, OR_END_170
OR_174:
	# JUMP OR_END_170
OR_END_170:
	# Branch INT(tmp_int_9488[sp-0x2c]) ? WHILE_BODY_165 : WHILE_END_166
	lw $21, -0x2c($29)
	bne $21, $0, WHILE_BODY_165
	j WHILE_END_166
WHILE_BODY_165:
	# JUMP B_175
B_175:
	# Call FUNC_factorial; Params: INT(i[sp-0x4]); RET INT(tmp_int_9490[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -52
	sw $6, -0x4($4)
	sw $6, -0x4($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 52
	lw $31, 0x0($29)
	move $24, $2
	lw $6, -0x4($29)
	# PRINT_INT INT(tmp_int_9490[temp])
	li $2, 1
	move $4, $24
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ADD, INT(tmp_int_9491[temp]), INT(i[sp-0x4]), 1
	addiu $23, $6, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_9491[temp])
	move $6, $23
	# JUMP L_OR_EXP_176
	j L_OR_EXP_176
	# JUMP B_187
	j B_187
L_OR_EXP_176:
	# JUMP L_AND_EXP_177
L_AND_EXP_177:
	# EQ, INT(tmp_int_9492[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $25, 0x10($28)
	seq $27, $6, $25
	# JUMP AND_END_178
	sw $25, 0x10($28)
	sw $27, -0x34($29)
AND_END_178:
	# JUMP OR_END_179
OR_END_179:
	# Branch INT(tmp_int_9492[sp-0x34]) ? IF_BODY_180 : IF_ELSE_182
	lw $26, -0x34($29)
	bne $26, $0, IF_BODY_180
	j IF_ELSE_182
IF_BODY_180:
	# JUMP B_183
B_183:
	# JUMP WHILE_END_166
	j WHILE_END_166
	# JUMP B_184
B_184:
	# JUMP IF_END_181
	j IF_END_181
IF_ELSE_182:
	# JUMP B_185
B_185:
	# JUMP WHILE_164
	j WHILE_164
	# JUMP B_186
B_186:
	# JUMP IF_END_181
IF_END_181:
	# JUMP B_187
B_187:
	# JUMP WHILE_164
	j WHILE_164
WHILE_END_166:
	# JUMP L_OR_EXP_188
L_OR_EXP_188:
	# JUMP L_AND_EXP_189
L_AND_EXP_189:
	# EQ, INT(tmp_int_9493[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $18, 0x10($28)
	seq $17, $6, $18
	# JUMP AND_END_190
	sw $17, -0x38($29)
	sw $18, 0x10($28)
AND_END_190:
	# JUMP OR_END_191
OR_END_191:
	# Branch INT(tmp_int_9493[sp-0x38]) ? IF_BODY_192 : IF_END_193
	lw $19, -0x38($29)
	bne $19, $0, IF_BODY_192
	j IF_END_193
IF_BODY_192:
	# JUMP B_194
B_194:
	# Call FUNC_return_one; Params: ; RET INT(tmp_int_9494[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -60
	move $29, $4
	jal FUNC_return_one
	addiu $29, $29, 60
	lw $31, 0x0($29)
	move $22, $2
	# PRINT_INT INT(tmp_int_9494[temp])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_195
B_195:
	# JUMP IF_END_193
IF_END_193:
	# Call FUNC_A_plus_B; Params: 1, 1; RET INT(tmp_int_9495[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -60
	li $3, 1
	sw $3, -0x4($4)
	li $3, 1
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_A_plus_B
	addiu $29, $29, 60
	lw $31, 0x0($29)
	move $20, $2
	# PRINT_INT INT(tmp_int_9495[temp])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# Call FUNC_output_a_plus_b; Params: 2, 2
	sw $31, 0x0($29)
	addiu $4, $29, -60
	li $3, 2
	sw $3, -0x4($4)
	li $3, 2
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_output_a_plus_b
	addiu $29, $29, 60
	lw $31, 0x0($29)
	# GETINT INT(i[sp-0x4])
	li $2, 5
	syscall
	move $6, $2
	# PRINT_INT INT(i[sp-0x4])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ASS, INT(i[sp-0x4]), 0
	li $6, 0
	# JUMP WHILE_196
WHILE_196:
	# JUMP L_OR_EXP_199
L_OR_EXP_199:
	# JUMP L_AND_EXP_200
L_AND_EXP_200:
	# LT, INT(tmp_int_9496[temp]), INT(i[sp-0x4]), 10
	li $3, 10
	slt $21, $6, $3
	# JUMP AND_END_201
	sw $21, -0x3c($29)
AND_END_201:
	# JUMP OR_END_202
OR_END_202:
	# Branch INT(tmp_int_9496[sp-0x3c]) ? WHILE_BODY_197 : WHILE_END_198
	lw $24, -0x3c($29)
	bne $24, $0, WHILE_BODY_197
	j WHILE_END_198
WHILE_BODY_197:
	# JUMP B_203
B_203:
	# ASS, INT(j[sp-0x8]), 0
	li $5, 0
	# JUMP WHILE_204
	j WHILE_204
	# JUMP B_213
	j B_213
WHILE_204:
	# JUMP L_OR_EXP_207
L_OR_EXP_207:
	# JUMP L_AND_EXP_208
L_AND_EXP_208:
	# LT, INT(tmp_int_9497[temp]), INT(j[sp-0x8]), 10
	li $3, 10
	slt $23, $5, $3
	# JUMP AND_END_209
	sw $23, -0x40($29)
AND_END_209:
	# JUMP OR_END_210
OR_END_210:
	# Branch INT(tmp_int_9497[sp-0x40]) ? WHILE_BODY_205 : WHILE_END_206
	lw $25, -0x40($29)
	bne $25, $0, WHILE_BODY_205
	j WHILE_END_206
WHILE_BODY_205:
	# JUMP B_211
B_211:
	# MUL, INT(tmp_int_9498[temp]), INT(j[sp-0x8]), 4
	sll $27, $5, 2
	# ADD, INT(tmp_int_9498[temp]), INT(tmp_int_9498[temp]), 0
	addiu $27, $27, 0
	# MUL, INT(tmp_int_9499[temp]), INT(i[sp-0x4]), 40
	sll $26, $6, 5
	sll $3, $6, 3
	addu $26, $26, $3
	# ADD, INT(tmp_int_9499[temp]), INT(tmp_int_9499[temp]), INT(tmp_int_9498[temp])
	addu $26, $26, $27
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_9499[temp]))->POINTER(tmp_pointer_3224[temp])
	addiu $3, $28, 436
	addu $17, $3, $26
	# ADD, INT(tmp_int_9500[temp]), INT(i[sp-0x4]), 1
	addiu $18, $6, 1
	# STORE POINTER(tmp_pointer_3224[temp]), INT(tmp_int_9500[temp])
	sw $18, 0x0($17)
	# MUL, INT(tmp_int_9501[temp]), INT(j[sp-0x8]), 4
	sll $19, $5, 2
	# ADD, INT(tmp_int_9501[temp]), INT(tmp_int_9501[temp]), 0
	addiu $19, $19, 0
	# MUL, INT(tmp_int_9502[temp]), INT(i[sp-0x4]), 40
	sll $22, $6, 5
	sll $3, $6, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_9502[temp]), INT(tmp_int_9502[temp]), INT(tmp_int_9501[temp])
	addu $22, $22, $19
	# OFFSET (ARRAY(matrix_B[data+0x344])+INT(tmp_int_9502[temp]))->POINTER(tmp_pointer_3225[temp])
	addiu $3, $28, 836
	addu $20, $3, $22
	# ADD, INT(tmp_int_9503[temp]), INT(j[sp-0x8]), 1
	addiu $21, $5, 1
	# STORE POINTER(tmp_pointer_3225[temp]), INT(tmp_int_9503[temp])
	sw $21, 0x0($20)
	# ADD, INT(tmp_int_9504[temp]), INT(j[sp-0x8]), 1
	addiu $24, $5, 1
	# ASS, INT(j[sp-0x8]), INT(tmp_int_9504[temp])
	move $5, $24
	# JUMP B_212
B_212:
	# JUMP WHILE_204
	j WHILE_204
WHILE_END_206:
	# ADD, INT(tmp_int_9505[temp]), INT(i[sp-0x4]), 1
	addiu $23, $6, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_9505[temp])
	move $6, $23
	# JUMP B_213
B_213:
	# JUMP WHILE_196
	j WHILE_196
WHILE_END_198:
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+0)->POINTER(tmp_pointer_3226[temp])
	addiu $25, $28, 436
	# OFFSET (ARRAY(matrix_B[data+0x344])+0)->POINTER(tmp_pointer_3227[temp])
	addiu $27, $28, 836
	# MUL, INT(tmp_int_9506[temp]), 1, 4
	li $26, 4
	# ADD, INT(tmp_int_9506[temp]), INT(tmp_int_9506[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_9507[temp]), 1, 40
	li $17, 40
	# ADD, INT(tmp_int_9507[temp]), INT(tmp_int_9507[temp]), INT(tmp_int_9506[temp])
	addu $17, $17, $26
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_9507[temp]))->POINTER(tmp_pointer_3228[temp])
	addiu $3, $28, 436
	addu $18, $3, $17
	# LOAD POINTER(tmp_pointer_3228[temp]), INT(tmp_int_9508[temp])
	lw $19, 0x0($18)
	# Call FUNC_matrixMulti; Params: POINTER(tmp_pointer_3226[temp]), POINTER(tmp_pointer_3227[temp]), INT(tmp_int_9508[temp]); RET INT(tmp_int_9509[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -80
	sw $25, -0x4($4)
	sw $27, -0x8($4)
	sw $19, -0xc($4)
	move $29, $4
	jal FUNC_matrixMulti
	addiu $29, $29, 80
	lw $31, 0x0($29)
	move $22, $2
	# PRINT_INT INT(tmp_int_9509[temp])
	li $2, 1
	move $4, $22
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
