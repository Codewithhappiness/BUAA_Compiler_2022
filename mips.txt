# Yuelin's Compiler
	
.data
	global:
	1 2 2 4 6 9 8 7 0 0 0 0 0 0 0 0 0 1 2 9 8 7 6
	.space 4
	STR_1: .asciiz " "
	STR_2: .asciiz "\n"
	STR_3: .asciiz "20373236\n"
.text
	la $gp, global
	j FUNC_main
FUNC_print_array:
	# DEF, INT(i[sp-0xc]), 1
	li $5, 1
	# MUL, INT(tmp_int_0[temp]), 0, 4
	li $6, 0
	# ADD, INT(tmp_int_0[temp]), INT(tmp_int_0[temp]), 0
	addiu $6, $6, 0
	# OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_0[temp]))->POINTER(tmp_pointer_0[temp])
	lw $3, -0x4($29)
	addu $7, $3, $6
	# LOAD POINTER(tmp_pointer_0[temp]), INT(tmp_int_1[temp])
	lw $8, 0x0($7)
	# PRINT_INT INT(tmp_int_1[temp])
	li $2, 1
	move $4, $8
	syscall
	# JUMP WHILE_0
	sw $5, -0xc($29)
	sw $8, -0x10($29)
	j WHILE_0
WHILE_0:
	# JUMP L_OR_EXP_3
	j L_OR_EXP_3
L_OR_EXP_3:
	# JUMP L_AND_EXP_5
	j L_AND_EXP_5
L_AND_EXP_5:
	# LT, INT(tmp_int_2[temp]), INT(i[sp-0xc]), INT(l[sp-0x8])
	lw $9, -0xc($29)
	lw $10, -0x8($29)
	slt $11, $9, $10
	# ASS, INT(tmp_int_3[temp]), INT(tmp_int_2[temp])
	move $12, $11
	# Branch INT(tmp_int_2[temp]) ? AND_7 : AND_END_6
	sw $9, -0xc($29)
	sw $10, -0x8($29)
	sw $11, -0x14($29)
	sw $12, -0x18($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_7
	j AND_END_6
AND_7:
	# JUMP AND_END_6
	j AND_END_6
AND_END_6:
	# ASS, INT(tmp_int_4[temp]), INT(tmp_int_3[sp-0x18])
	lw $14, -0x18($29)
	move $13, $14
	# Branch INT(tmp_int_4[temp]) ? OR_END_4 : OR_8
	sw $13, -0x1c($29)
	sw $14, -0x18($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_4
	j OR_8
OR_8:
	# JUMP OR_END_4
	j OR_END_4
OR_END_4:
	# Branch INT(tmp_int_4[sp-0x1c]) ? WHILE_BODY_1 : WHILE_END_2
	lw $3, -0x1c($29)
	bne $3, $0, WHILE_BODY_1
	j WHILE_END_2
WHILE_BODY_1:
	# JUMP B_9
	j B_9
B_9:
	# MUL, INT(tmp_int_5[temp]), INT(i[sp-0xc]), 4
	lw $15, -0xc($29)
	li $3, 4
	mult $15 $3
	mflo $16
	# ADD, INT(tmp_int_5[temp]), INT(tmp_int_5[temp]), 0
	addiu $16, $16, 0
	# OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_5[temp]))->POINTER(tmp_pointer_1[temp])
	lw $3, -0x4($29)
	addu $17, $3, $16
	# LOAD POINTER(tmp_pointer_1[temp]), INT(tmp_int_6[temp])
	lw $18, 0x0($17)
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT INT(tmp_int_6[temp])
	li $2, 1
	move $4, $18
	syscall
	# ADD, INT(tmp_int_7[temp]), INT(i[sp-0xc]), 1
	addiu $19, $15, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_7[temp])
	move $15, $19
	# JUMP B_10
	sw $18, -0x20($29)
	sw $15, -0xc($29)
	j B_10
B_10:
	# JUMP WHILE_0
	j WHILE_0
WHILE_END_2:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_print_array_2:
	# DEF, INT(i[sp-0xc]), 1
	li $20, 1
	# MUL, INT(tmp_int_8[temp]), 0, 8
	li $21, 0
	# ADD, INT(tmp_int_8[temp]), INT(tmp_int_8[temp]), 0
	addiu $21, $21, 0
	# OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_8[temp]))->POINTER(tmp_pointer_2[temp])
	lw $3, -0x4($29)
	addu $22, $3, $21
	# Call FUNC_print_array; Params: POINTER(tmp_pointer_2[temp]), INT(l[sp-0x8])
	sw $20, -0xc($29)
	sw $22, -0x10($29)
	sw $31, 0x0($29)
	addiu $4, $29, -20
	lw $3, -0x10($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_print_array
	addiu $29, $29, 20
	lw $31, 0x0($29)
	# JUMP WHILE_12
	j WHILE_12
WHILE_12:
	# JUMP L_OR_EXP_15
	j L_OR_EXP_15
L_OR_EXP_15:
	# JUMP L_AND_EXP_17
	j L_AND_EXP_17
L_AND_EXP_17:
	# LT, INT(tmp_int_9[temp]), INT(i[sp-0xc]), INT(l[sp-0x8])
	lw $23, -0xc($29)
	lw $24, -0x8($29)
	slt $25, $23, $24
	# ASS, INT(tmp_int_10[temp]), INT(tmp_int_9[temp])
	move $26, $25
	# Branch INT(tmp_int_9[temp]) ? AND_19 : AND_END_18
	sw $23, -0xc($29)
	sw $24, -0x8($29)
	sw $25, -0x14($29)
	sw $26, -0x18($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_19
	j AND_END_18
AND_19:
	# JUMP AND_END_18
	j AND_END_18
AND_END_18:
	# ASS, INT(tmp_int_11[temp]), INT(tmp_int_10[sp-0x18])
	lw $6, -0x18($29)
	move $27, $6
	# Branch INT(tmp_int_11[temp]) ? OR_END_16 : OR_20
	sw $6, -0x18($29)
	sw $27, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_16
	j OR_20
OR_20:
	# JUMP OR_END_16
	j OR_END_16
OR_END_16:
	# Branch INT(tmp_int_11[sp-0x1c]) ? WHILE_BODY_13 : WHILE_END_14
	lw $3, -0x1c($29)
	bne $3, $0, WHILE_BODY_13
	j WHILE_END_14
WHILE_BODY_13:
	# JUMP B_21
	j B_21
B_21:
	# MUL, INT(tmp_int_12[temp]), INT(i[sp-0xc]), 8
	lw $7, -0xc($29)
	li $3, 8
	mult $7 $3
	mflo $5
	# ADD, INT(tmp_int_12[temp]), INT(tmp_int_12[temp]), 0
	addiu $5, $5, 0
	# OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_12[temp]))->POINTER(tmp_pointer_3[temp])
	lw $3, -0x4($29)
	addu $8, $3, $5
	# Call FUNC_print_array; Params: POINTER(tmp_pointer_3[temp]), INT(l[sp-0x8])
	sw $7, -0xc($29)
	sw $8, -0x20($29)
	sw $31, 0x0($29)
	addiu $4, $29, -36
	lw $3, -0x20($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_print_array
	addiu $29, $29, 36
	lw $31, 0x0($29)
	# ADD, INT(tmp_int_13[temp]), INT(i[sp-0xc]), 1
	lw $9, -0xc($29)
	addiu $10, $9, 1
	# ASS, INT(i[sp-0xc]), INT(tmp_int_13[temp])
	move $9, $10
	# JUMP B_22
	sw $9, -0xc($29)
	j B_22
B_22:
	# JUMP WHILE_12
	j WHILE_12
WHILE_END_14:
	# RETURN VOID
	jr $ra
	
FUNC_main:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# MUL, INT(tmp_int_14[temp]), 0, 4
	li $11, 0
	# ADD, INT(tmp_int_14[temp]), INT(tmp_int_14[temp]), 0
	addiu $11, $11, 0
	# OFFSET (ARRAY(a[data+0x20])+INT(tmp_int_14[temp]))->POINTER(tmp_pointer_4[temp])
	addiu $3, $28, 32
	addu $12, $3, $11
	# STORE POINTER(tmp_pointer_4[temp]), 100
	li $3, 100
	sw $3, 0x0($12)
	# MUL, INT(tmp_int_15[temp]), 1, 4
	li $13, 4
	# ADD, INT(tmp_int_15[temp]), INT(tmp_int_15[temp]), 0
	addiu $13, $13, 0
	# OFFSET (ARRAY(a[data+0x20])+INT(tmp_int_15[temp]))->POINTER(tmp_pointer_5[temp])
	addiu $3, $28, 32
	addu $14, $3, $13
	# STORE POINTER(tmp_pointer_5[temp]), 0
	li $3, 0
	sw $3, 0x0($14)
	# MUL, INT(tmp_int_16[temp]), 0, 4
	li $16, 0
	# ADD, INT(tmp_int_16[temp]), INT(tmp_int_16[temp]), 0
	addiu $16, $16, 0
	# MUL, INT(tmp_int_17[temp]), 0, 12
	li $17, 0
	# ADD, INT(tmp_int_17[temp]), INT(tmp_int_17[temp]), INT(tmp_int_16[temp])
	addu $17, $17, $16
	# OFFSET (ARRAY(b[data+0x28])+INT(tmp_int_17[temp]))->POINTER(tmp_pointer_6[temp])
	addiu $3, $28, 40
	addu $19, $3, $17
	# STORE POINTER(tmp_pointer_6[temp]), 0
	li $3, 0
	sw $3, 0x0($19)
	# OFFSET (ARRAY(a[data+0x20])+0)->POINTER(tmp_pointer_7[temp])
	addiu $18, $28, 32
	# Call FUNC_print_array; Params: POINTER(tmp_pointer_7[temp]), 2
	sw $18, -0x4($29)
	sw $31, 0x0($29)
	addiu $4, $29, -8
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	li $3, 2
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_print_array
	addiu $29, $29, 8
	lw $31, 0x0($29)
	# OFFSET (ARRAY(c[data+0x40])+0)->POINTER(tmp_pointer_8[temp])
	addiu $15, $28, 64
	# Call FUNC_print_array; Params: POINTER(tmp_pointer_8[temp]), 3
	sw $15, -0x8($29)
	sw $31, 0x0($29)
	addiu $4, $29, -12
	lw $3, -0x8($29)
	sw $3, -0x4($4)
	li $3, 3
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_print_array
	addiu $29, $29, 12
	lw $31, 0x0($29)
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# OFFSET (ARRAY(d[data+0x4c])+0)->POINTER(tmp_pointer_9[temp])
	addiu $21, $28, 76
	# Call FUNC_print_array_2; Params: POINTER(tmp_pointer_9[temp]), 2
	sw $21, -0xc($29)
	sw $31, 0x0($29)
	addiu $4, $29, -16
	lw $3, -0xc($29)
	sw $3, -0x4($4)
	li $3, 2
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_print_array_2
	addiu $29, $29, 16
	lw $31, 0x0($29)
	# RETURN 0
	li $2, 10
	syscall
	
