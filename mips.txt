# Yuelin's Compiler
	
.data
	global:
	20373117 1 10 11 12 0
	.space 4
	STR_1: .asciiz "\n"
	STR_3: .asciiz "if is wrong\n"
	STR_2: .asciiz "continue is wrong\n"
	STR_4: .asciiz "\n\n\n\n\n\n"
.text
	la $gp, global
	j FUNC_main
FUNC_main:
	# ASS, 13, INT(value13[data+0x14])
	li $5, 13
	# DEF, 14, INT(value14[sp-0x4])
	li $6, 14
	# DEF, 15, INT(value15[sp-0x8])
	li $7, 15
	# DEF, 0, INT(value16[sp-0xc])
	li $8, 0
	# DEF, 0, INT(value17[sp-0x10])
	li $9, 0
	# PRINT_INT INT(_[data+0x0])
	li $2, 1
	lw $4, 0x0($28)
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# DEF, 3, INT(n[sp-0x14])
	li $10, 3
	# JUMP WHILE_0
	j WHILE_0
WHILE_0:
	# GT, INT(n[sp-0x14]), 0, INT(tmp_int_0[temp])
	sgt $11, $10, 0
	# ASS, INT(tmp_int_0[temp]), INT(tmp_int_1[temp])
	move $12, $11
	# Branch INT(tmp_int_0[temp]) ? AND_5 : AND_END_4
	move $3, $11
	bne $3, $0, AND_5
	j AND_END_4
AND_5:
	# JUMP AND_END_4
	j AND_END_4
AND_END_4:
	# ASS, INT(tmp_int_1[temp]), INT(tmp_int_2[temp])
	move $13, $12
	# Branch INT(tmp_int_2[temp]) ? OR_END_3 : OR_6
	move $3, $13
	bne $3, $0, OR_END_3
	j OR_6
OR_6:
	# JUMP OR_END_3
	j OR_END_3
OR_END_3:
	# Branch INT(tmp_int_2[temp]) ? WHILE_BODY_1 : WHILE_END_2
	move $3, $13
	bne $3, $0, WHILE_BODY_1
	j WHILE_END_2
WHILE_BODY_1:
	# JUMP B_7
	j B_7
B_7:
	# NEG, 1, INT(tmp_int_3[temp])
	li $14, -1
	# ADD, INT(tmp_int_3[temp]), INT(n[sp-0x14]), INT(tmp_int_4[temp])
	addu $15, $14, $10
	# ASS, INT(tmp_int_4[temp]), INT(n[sp-0x14])
	move $10, $15
	# EQ, INT(n[sp-0x14]), 2, INT(tmp_int_5[temp])
	seq $16, $10, 2
	# ASS, INT(tmp_int_5[temp]), INT(tmp_int_6[temp])
	move $17, $16
	# Branch INT(tmp_int_5[temp]) ? AND_10 : AND_END_9
	move $3, $16
	bne $3, $0, AND_10
	j AND_END_9
AND_10:
	# JUMP AND_END_9
	j AND_END_9
AND_END_9:
	# ASS, INT(tmp_int_6[temp]), INT(tmp_int_7[temp])
	move $18, $17
	# Branch INT(tmp_int_7[temp]) ? OR_END_8 : OR_11
	move $3, $18
	bne $3, $0, OR_END_8
	j OR_11
OR_11:
	# JUMP OR_END_8
	j OR_END_8
OR_END_8:
	# Branch INT(tmp_int_7[temp]) ? IF_BODY_12 : IF_ELSE_14
	move $3, $18
	bne $3, $0, IF_BODY_12
	j IF_ELSE_14
IF_BODY_12:
	# JUMP B_15
	j B_15
B_15:
	# SUB, INT(value14[sp-0x4]), INT(value11[data+0xc]), INT(tmp_int_8[temp])
	lw $20, 0xc($28)
	subu $19, $6, $20
	# EQ, INT(tmp_int_8[temp]), 3, INT(tmp_int_9[temp])
	seq $21, $19, 3
	# ASS, INT(tmp_int_9[temp]), INT(tmp_int_10[temp])
	move $22, $21
	# Branch INT(tmp_int_9[temp]) ? AND_18 : AND_END_17
	move $3, $21
	bne $3, $0, AND_18
	j AND_END_17
AND_18:
	# JUMP AND_END_17
	j AND_END_17
AND_END_17:
	# ASS, INT(tmp_int_10[temp]), INT(tmp_int_11[temp])
	move $23, $22
	# Branch INT(tmp_int_11[temp]) ? OR_END_16 : OR_19
	move $3, $23
	bne $3, $0, OR_END_16
	j OR_19
OR_19:
	# JUMP OR_END_16
	j OR_END_16
OR_END_16:
	# Branch INT(tmp_int_11[temp]) ? IF_BODY_20 : IF_ELSE_22
	move $3, $23
	bne $3, $0, IF_BODY_20
	j IF_ELSE_22
IF_BODY_20:
	# JUMP B_23
	j B_23
B_23:
	# JUMP WHILE_0
	j WHILE_0
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_24
	j B_24
B_24:
	# JUMP IF_END_21
	j IF_END_21
IF_END_21:
	# JUMP B_27
	j B_27
B_27:
	# JUMP IF_END_13
	j IF_END_13
IF_END_13:
	# EQ, INT(n[sp-0x14]), 0, INT(tmp_int_19[temp])
	seq $24, $10, 0
	# ASS, INT(tmp_int_19[temp]), INT(tmp_int_20[temp])
	move $25, $24
	# Branch INT(tmp_int_19[temp]) ? AND_49 : AND_END_48
	move $3, $24
	bne $3, $0, AND_49
	j AND_END_48
AND_49:
	# JUMP AND_END_48
	j AND_END_48
AND_END_48:
	# ASS, INT(tmp_int_20[temp]), INT(tmp_int_21[temp])
	move $26, $25
	# Branch INT(tmp_int_21[temp]) ? OR_END_47 : OR_50
	move $3, $26
	bne $3, $0, OR_END_47
	j OR_50
OR_50:
	# JUMP OR_END_47
	j OR_END_47
OR_END_47:
	# Branch INT(tmp_int_21[temp]) ? IF_BODY_51 : IF_END_52
	move $3, $26
	bne $3, $0, IF_BODY_51
	j IF_END_52
IF_BODY_51:
	# JUMP B_53
	j B_53
B_53:
	# NEG, 1, INT(tmp_int_23[temp])
	li $27, -1
	# NEG, INT(tmp_int_23[temp]), INT(tmp_int_24[temp])
	subu $11, $0, $27
	# MUL, INT(tmp_int_24[temp]), 1, INT(tmp_int_25[temp])
	li $3, 1
	mult $11 $3
	mflo $12
	# DIV, INT(tmp_int_25[temp]), 1, INT(tmp_int_26[temp])
	li $3, 1
	div $12 $3
	mflo $13
	# ADD, 20373117, INT(tmp_int_26[temp]), INT(tmp_int_22[temp])
	addiu $14, $13, 20373117
	# MOD, 1, 2, INT(tmp_int_28[temp])
	li $15, 1
	# SUB, INT(tmp_int_22[temp]), INT(tmp_int_28[temp]), INT(tmp_int_27[temp])
	subu $16, $14, $15
	# PRINT_INT INT(tmp_int_27[temp])
	li $2, 1
	move $4, $16
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT 20373117
	li $2, 1
	li $4, 20373117
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_54
	j B_54
B_54:
	# JUMP IF_END_52
	j IF_END_52
IF_END_52:
	# JUMP B_55
	j B_55
B_55:
	# JUMP WHILE_0
	j WHILE_0
IF_ELSE_22:
	# JUMP B_25
	j B_25
B_25:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP WHILE_END_2
	j WHILE_END_2
WHILE_END_2:
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# RETURN 0
	li $2, 10
	syscall
	# JUMP B_26
	j B_26
B_26:
	# JUMP IF_END_21
	j IF_END_21
	# JUMP B_27
	j B_27
IF_ELSE_14:
	# EQ, INT(n[sp-0x14]), 1, INT(tmp_int_12[temp])
	seq $17, $10, 1
	# ASS, INT(tmp_int_12[temp]), INT(tmp_int_13[temp])
	move $18, $17
	# Branch INT(tmp_int_12[temp]) ? AND_30 : AND_END_29
	move $3, $17
	bne $3, $0, AND_30
	j AND_END_29
AND_30:
	# JUMP AND_END_29
	j AND_END_29
AND_END_29:
	# ASS, INT(tmp_int_13[temp]), INT(tmp_int_14[temp])
	move $19, $18
	# Branch INT(tmp_int_14[temp]) ? OR_END_28 : OR_31
	move $3, $19
	bne $3, $0, OR_END_28
	j OR_31
OR_31:
	# JUMP OR_END_28
	j OR_END_28
OR_END_28:
	# Branch INT(tmp_int_14[temp]) ? IF_BODY_32 : IF_END_33
	move $3, $19
	bne $3, $0, IF_BODY_32
	j IF_END_33
IF_BODY_32:
	# JUMP B_34
	j B_34
B_34:
	# SUB, INT(value15[sp-0x8]), INT(value12[data+0x10]), INT(tmp_int_15[temp])
	lw $22, 0x10($28)
	subu $21, $7, $22
	# NEQ, INT(tmp_int_15[temp]), 3, INT(tmp_int_16[temp])
	sne $23, $21, 3
	# ASS, INT(tmp_int_16[temp]), INT(tmp_int_17[temp])
	move $24, $23
	# Branch INT(tmp_int_16[temp]) ? AND_37 : AND_END_36
	move $3, $23
	bne $3, $0, AND_37
	j AND_END_36
AND_37:
	# JUMP AND_END_36
	j AND_END_36
AND_END_36:
	# ASS, INT(tmp_int_17[temp]), INT(tmp_int_18[temp])
	move $25, $24
	# Branch INT(tmp_int_18[temp]) ? OR_END_35 : OR_38
	move $3, $25
	bne $3, $0, OR_END_35
	j OR_38
OR_38:
	# JUMP OR_END_35
	j OR_END_35
OR_END_35:
	# Branch INT(tmp_int_18[temp]) ? IF_BODY_39 : IF_ELSE_41
	move $3, $25
	bne $3, $0, IF_BODY_39
	j IF_ELSE_41
IF_BODY_39:
	# JUMP B_42
	j B_42
B_42:
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# JUMP WHILE_END_2
	j WHILE_END_2
	# JUMP B_43
	j B_43
B_43:
	# JUMP IF_END_40
	j IF_END_40
IF_END_40:
	# JUMP B_46
	j B_46
B_46:
	# JUMP IF_END_33
	j IF_END_33
IF_END_33:
	# JUMP IF_END_13
	j IF_END_13
IF_ELSE_41:
	# JUMP B_44
	j B_44
B_44:
	# JUMP WHILE_0
	j WHILE_0
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_45
	j B_45
B_45:
	# JUMP IF_END_40
	j IF_END_40
	# JUMP B_46
	j B_46
	# JUMP B_55
	j B_55
	
