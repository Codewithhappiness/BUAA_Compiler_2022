# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "a is "
	STR_2: .asciiz "\n, b is "
.text
	j FUNC_main
FUNC_main:
	# DEF, 1, INT(a[sp-0x4])
	li $5, 1
	# DEF, 2, INT(b[sp-0x8])
	li $6, 2
	# EQ, INT(a[sp-0x4]), 1, BOOL(tmp_bool_0[temp])
	seq $7, $5, 1
	# ASS, BOOL(tmp_bool_0[temp]), BOOL(tmp_bool_1[temp])
	move $8, $7
	# Branch BOOL(tmp_bool_0[temp]) ? AND_2 : AND_END_1
	move $3, $7
	bne $3, $0, AND_2
	j AND_END_1
AND_2:
	# EQ, INT(b[sp-0x8]), 2, BOOL(tmp_bool_2[temp])
	seq $9, $6, 2
	# AND, BOOL(tmp_bool_2[temp]), BOOL(tmp_bool_1[temp]), BOOL(tmp_bool_1[temp])
	andi $8, $9, 8
	# Branch BOOL(tmp_bool_1[temp]) ? AND_3 : AND_END_1
	move $3, $8
	bne $3, $0, AND_3
	j AND_END_1
AND_3:
	# JUMP AND_END_1
	j AND_END_1
AND_END_1:
	# ASS, BOOL(tmp_bool_1[temp]), BOOL(tmp_bool_3[temp])
	move $10, $8
	# Branch BOOL(tmp_bool_3[temp]) ? OR_END_0 : OR_4
	move $3, $10
	bne $3, $0, OR_END_0
	j OR_4
OR_END_0:
	# Branch BOOL(tmp_bool_3[temp]) ? IF_BODY_5 : IF_END_6
	move $3, $10
	bne $3, $0, IF_BODY_5
	j IF_END_6
IF_BODY_5:
	# JUMP B_7
	j B_7
B_7:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT INT(a[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(b[sp-0x8])
	li $2, 1
	move $4, $6
	syscall
	# JUMP B_8
	j B_8
B_8:
	# JUMP IF_END_6
	j IF_END_6
IF_END_6:
	# RETURN 0
	li $2, 10
	syscall
OR_4:
	# JUMP OR_END_0
	j OR_END_0
