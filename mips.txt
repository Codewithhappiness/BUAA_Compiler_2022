# Yuelin's Compiler
	
.data
	global:
	
	.space 4
	STR_1: .asciiz "20373420\n"
	STR_2: .asciiz "Fu1_nC(): "
	STR_3: .asciiz "\n"
	STR_4: .asciiz "func2(): "
	STR_5: .asciiz "func_3(): "
	STR_6: .asciiz "a is no less than 0!\n"
	STR_7: .asciiz "a is no greater than 0!\n"
	STR_8: .asciiz "b is greater than 0!\n"
	STR_9: .asciiz "b is no greater than 0!\n"
	STR_10: .asciiz "c is exactly zero!\n"
	STR_11: .asciiz "i break with a value of "
	STR_12: .asciiz "func4 result: "
.text
	la $gp, global
	j FUNC_main
FUNC_func:
	# DEF, INT(i[sp-0x4]), 0
	li $5, 0
	# JUMP WHILE_0
	sw $5, -0x4($29)
WHILE_0:
	# JUMP L_OR_EXP_3
L_OR_EXP_3:
	# JUMP L_AND_EXP_5
L_AND_EXP_5:
	# ASS, INT(tmp_int_303[temp]), 1
	li $17, 1
	# Branch 1 ? AND_7 : AND_END_6
	sw $17, -0x8($29)
	li $3, 1
	bne $3, $0, AND_7
	j AND_END_6
AND_7:
	# JUMP AND_END_6
AND_END_6:
	# ASS, INT(tmp_int_304[temp]), INT(tmp_int_303[sp-0x8])
	lw $18, -0x8($29)
	move $19, $18
	# Branch INT(tmp_int_304[temp]) ? OR_END_4 : OR_8
	sw $19, -0xc($29)
	lw $3, -0xc($29)
	bne $3, $0, OR_END_4
OR_8:
	# JUMP OR_END_4
OR_END_4:
	# Branch INT(tmp_int_304[sp-0xc]) ? WHILE_BODY_1 : WHILE_END_2
	lw $3, -0xc($29)
	bne $3, $0, WHILE_BODY_1
	j WHILE_END_2
WHILE_BODY_1:
	# JUMP B_9
B_9:
	# JUMP L_OR_EXP_10
	j L_OR_EXP_10
	# JUMP B_20
	j B_20
L_OR_EXP_10:
	# JUMP L_AND_EXP_12
L_AND_EXP_12:
	# EQ, INT(tmp_int_305[temp]), INT(i[sp-0x4]), 0
	lw $5, -0x4($29)
	seq $20, $5, 0
	# ASS, INT(tmp_int_306[temp]), INT(tmp_int_305[temp])
	move $21, $20
	# Branch INT(tmp_int_305[temp]) ? AND_14 : AND_END_13
	sw $5, -0x4($29)
	sw $21, -0x10($29)
	sw $20, -0x14($29)
	lw $3, -0x14($29)
	bne $3, $0, AND_14
	j AND_END_13
AND_14:
	# JUMP AND_END_13
AND_END_13:
	# ASS, INT(tmp_int_307[temp]), INT(tmp_int_306[sp-0x10])
	lw $22, -0x10($29)
	move $23, $22
	# Branch INT(tmp_int_307[temp]) ? OR_END_11 : OR_15
	sw $23, -0x18($29)
	lw $3, -0x18($29)
	bne $3, $0, OR_END_11
OR_15:
	# JUMP OR_END_11
OR_END_11:
	# Branch INT(tmp_int_307[sp-0x18]) ? IF_BODY_16 : IF_END_17
	lw $3, -0x18($29)
	bne $3, $0, IF_BODY_16
	j IF_END_17
IF_BODY_16:
	# JUMP B_18
B_18:
	# ADD, INT(tmp_int_308[temp]), INT(i[sp-0x4]), 1
	lw $5, -0x4($29)
	addiu $24, $5, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_308[temp])
	move $5, $24
	# JUMP WHILE_0
	sw $5, -0x4($29)
	j WHILE_0
	# JUMP B_19
B_19:
	# JUMP IF_END_17
IF_END_17:
	# ASS, INT(i[sp-0x4]), 100
	li $5, 100
	# JUMP WHILE_END_2
	sw $5, -0x4($29)
	j WHILE_END_2
B_20:
	# JUMP WHILE_0
	j WHILE_0
WHILE_END_2:
	# RETURN VOID
	jr $ra
	
FUNC_func1:
	# DEF, INT(i[sp-0x10]), 0
	li $5, 0
	# DEF, INT(j[sp-0x14]), 1
	li $5, 1
	# DEF, INT(k[sp-0x18]), 1
	li $5, 1
	# DEF, INT(i1[sp-0x1c]), 1
	li $5, 1
	# DEF, INT(i2_[sp-0x20]), 2
	li $5, 2
	# DEF, INT(i_3[sp-0x24]), 3
	li $5, 3
	# DEF, INT(i4_I[sp-0x28]), 4
	li $5, 4
	# RETURN VOID
	jr $ra
	
FUNC_Fu1_nC:
	# DEF, INT(i[sp-0x4]), 0
	li $5, 0
	# JUMP L_OR_EXP_23
	sw $5, -0x4($29)
L_OR_EXP_23:
	# JUMP L_AND_EXP_25
L_AND_EXP_25:
	# NOT, INT(tmp_int_309[temp]), INT(i[sp-0x4])
	lw $5, -0x4($29)
	seq $25, $0, $5
	# ASS, INT(tmp_int_310[temp]), INT(tmp_int_309[temp])
	move $26, $25
	# Branch INT(tmp_int_309[temp]) ? AND_27 : AND_END_26
	sw $5, -0x4($29)
	sw $26, -0x8($29)
	sw $25, -0xc($29)
	lw $3, -0xc($29)
	bne $3, $0, AND_27
	j AND_END_26
AND_27:
	# JUMP AND_END_26
AND_END_26:
	# ASS, INT(tmp_int_311[temp]), INT(tmp_int_310[sp-0x8])
	lw $27, -0x8($29)
	move $17, $27
	# Branch INT(tmp_int_311[temp]) ? OR_END_24 : OR_28
	sw $17, -0x10($29)
	lw $3, -0x10($29)
	bne $3, $0, OR_END_24
OR_28:
	# JUMP OR_END_24
OR_END_24:
	# Branch INT(tmp_int_311[sp-0x10]) ? IF_BODY_29 : IF_END_30
	lw $3, -0x10($29)
	bne $3, $0, IF_BODY_29
	j IF_END_30
IF_BODY_29:
	# JUMP B_31
B_31:
	# ADD, INT(tmp_int_312[temp]), 1, 2
	li $18, 3
	# RETURN INT(tmp_int_312[temp])
	move $2, $18
	jr $ra
	# JUMP B_32
B_32:
	# JUMP IF_END_30
IF_END_30:
	# ADD, INT(tmp_int_313[temp]), 2, 2
	li $19, 4
	# RETURN INT(tmp_int_313[temp])
	move $2, $19
	jr $ra
	
FUNC_func2:
	# DEF, INT(i[sp-0x4]), 1
	li $5, 1
	# DEF, INT(ret[sp-0x8]), 0
	li $5, 0
	# JUMP L_OR_EXP_34
	sw $5, -0x8($29)
L_OR_EXP_34:
	# JUMP L_AND_EXP_36
L_AND_EXP_36:
	# NEQ, INT(tmp_int_314[temp]), INT(i[sp-0x4]), 0
	lw $5, -0x4($29)
	sne $21, $5, 0
	# ASS, INT(tmp_int_315[temp]), INT(tmp_int_314[temp])
	move $20, $21
	# Branch INT(tmp_int_314[temp]) ? AND_38 : AND_END_37
	sw $5, -0x4($29)
	sw $21, -0xc($29)
	sw $20, -0x10($29)
	lw $3, -0xc($29)
	bne $3, $0, AND_38
	j AND_END_37
AND_38:
	# JUMP AND_END_37
AND_END_37:
	# ASS, INT(tmp_int_316[temp]), INT(tmp_int_315[sp-0x10])
	lw $22, -0x10($29)
	move $23, $22
	# Branch INT(tmp_int_316[temp]) ? OR_END_35 : OR_39
	sw $23, -0x14($29)
	lw $3, -0x14($29)
	bne $3, $0, OR_END_35
OR_39:
	# JUMP OR_END_35
OR_END_35:
	# Branch INT(tmp_int_316[sp-0x14]) ? IF_BODY_40 : IF_ELSE_42
	lw $3, -0x14($29)
	bne $3, $0, IF_BODY_40
	j IF_ELSE_42
IF_BODY_40:
	# JUMP B_43
B_43:
	# ASS, INT(ret[sp-0x8]), 222
	li $5, 222
	# JUMP B_44
	sw $5, -0x8($29)
B_44:
	# JUMP IF_END_41
	j IF_END_41
IF_ELSE_42:
	# JUMP B_45
B_45:
	# ASS, INT(ret[sp-0x8]), 666
	li $5, 666
	# JUMP B_46
	sw $5, -0x8($29)
B_46:
	# JUMP IF_END_41
IF_END_41:
	# RETURN INT(ret[sp-0x8])
	lw $2, -0x8($29)
	jr $ra
	
FUNC_func_3:
	# DEF, INT(i[sp-0x4]), 1
	li $16, 1
	# DEF, INT(j[sp-0x8]), 2
	li $15, 2
	# ADD, INT(tmp_int_317[temp]), INT(i[sp-0x4]), INT(j[sp-0x8])
	addu $24, $16, $15
	# RETURN INT(tmp_int_317[temp])
	move $2, $24
	jr $ra
	
FUNC_func4:
	# MUL, INT(tmp_int_318[temp]), 2, INT(x[sp-0x4])
	lw $15, -0x4($29)
	sll $26, $15, 1
	# DIV, INT(tmp_int_320[temp]), INT(y[sp-0x8]), 3
	lw $16, -0x8($29)
	bltz $16, DIV_15
	li $25, 2863311531
	multu $25 $16
	mfhi $25
	srl $25, $25, 1
	j DIV_END_16
DIV_15:
	subu $16, $0, $16
	li $25, 2863311531
	multu $25 $16
	mfhi $25
	srl $25, $25, 1
	subu $25, $0, $25
DIV_END_16:
	# ADD, INT(tmp_int_319[temp]), INT(tmp_int_318[temp]), INT(tmp_int_320[temp])
	addu $27, $26, $25
	# DIV, INT(tmp_int_321[temp]), INT(tmp_int_319[temp]), 5
	bltz $27, DIV_17
	li $17, 3435973837
	multu $17 $27
	mfhi $17
	srl $17, $17, 2
	j DIV_END_18
DIV_17:
	subu $27, $0, $27
	li $17, 3435973837
	multu $17 $27
	mfhi $17
	srl $17, $17, 2
	subu $17, $0, $17
DIV_END_18:
	# MOD, INT(tmp_int_322[temp]), INT(tmp_int_321[temp]), 10
	bltz $17, DIV_19
	li $18, 3435973837
	multu $18 $17
	mfhi $18
	srl $18, $18, 3
	sll $2, $18, 3
	sll $3, $18, 1
	addu $2, $2, $3
	subu $18, $17, $2
	j DIV_END_20
DIV_19:
	subu $17, $0, $17
	li $18, 3435973837
	multu $18 $17
	mfhi $18
	srl $18, $18, 3
	sll $2, $18, 3
	sll $3, $18, 1
	addu $2, $2, $3
	subu $18, $17, $2
	subu $18, $0, $18
DIV_END_20:
	# RETURN INT(tmp_int_322[temp])
	move $2, $18
	jr $ra
	
FUNC_main:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# Call FUNC_Fu1_nC; Params: ; RET INT(tmp_int_323[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -20
	move $29, $4
	jal FUNC_Fu1_nC
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $19, $2
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(tmp_int_323[temp])
	li $2, 1
	move $4, $19
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# Call FUNC_func2; Params: ; RET INT(tmp_int_324[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -20
	move $29, $4
	jal FUNC_func2
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $21, $2
	# PRINT_STR STR_4
	li $2, 4
	la $4, STR_4
	syscall
	# PRINT_INT INT(tmp_int_324[temp])
	li $2, 1
	move $4, $21
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# Call FUNC_func_3; Params: ; RET INT(tmp_int_325[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -20
	move $29, $4
	jal FUNC_func_3
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $20, $2
	# PRINT_STR STR_5
	li $2, 4
	la $4, STR_5
	syscall
	# PRINT_INT INT(tmp_int_325[temp])
	li $2, 1
	move $4, $20
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# DEF, INT(a[sp-0x4]), 0
	li $14, 0
	# GETINT INT(a[sp-0x4])
	li $2, 5
	syscall
	move $14, $2
	# JUMP L_OR_EXP_50
	sw $14, -0x4($29)
L_OR_EXP_50:
	# JUMP L_AND_EXP_52
L_AND_EXP_52:
	# GE, INT(tmp_int_326[temp]), INT(a[sp-0x4]), 0
	lw $14, -0x4($29)
	sge $22, $14, 0
	# ASS, INT(tmp_int_327[temp]), INT(tmp_int_326[temp])
	move $23, $22
	# Branch INT(tmp_int_326[temp]) ? AND_54 : AND_END_53
	sw $14, -0x4($29)
	sw $23, -0x14($29)
	sw $22, -0x18($29)
	lw $3, -0x18($29)
	bne $3, $0, AND_54
	j AND_END_53
AND_54:
	# JUMP AND_END_53
AND_END_53:
	# ASS, INT(tmp_int_328[temp]), INT(tmp_int_327[sp-0x14])
	lw $24, -0x14($29)
	move $26, $24
	# Branch INT(tmp_int_328[temp]) ? OR_END_51 : OR_55
	sw $26, -0x1c($29)
	lw $3, -0x1c($29)
	bne $3, $0, OR_END_51
OR_55:
	# JUMP OR_END_51
OR_END_51:
	# Branch INT(tmp_int_328[sp-0x1c]) ? IF_BODY_56 : IF_ELSE_58
	lw $3, -0x1c($29)
	bne $3, $0, IF_BODY_56
	j IF_ELSE_58
IF_BODY_56:
	# JUMP B_59
B_59:
	# PRINT_STR STR_6
	li $2, 4
	la $4, STR_6
	syscall
	# JUMP B_60
B_60:
	# JUMP IF_END_57
	j IF_END_57
IF_ELSE_58:
	# JUMP B_61
B_61:
	# PRINT_STR STR_7
	li $2, 4
	la $4, STR_7
	syscall
	# JUMP B_62
B_62:
	# JUMP IF_END_57
IF_END_57:
	# DEF, INT(b[sp-0x8]), 0
	li $15, 0
	# GETINT INT(b[sp-0x8])
	li $2, 5
	syscall
	move $15, $2
	# JUMP L_OR_EXP_63
	sw $15, -0x8($29)
L_OR_EXP_63:
	# JUMP L_AND_EXP_65
L_AND_EXP_65:
	# GT, INT(tmp_int_329[temp]), INT(b[sp-0x8]), 0
	lw $15, -0x8($29)
	sgt $25, $15, 0
	# ASS, INT(tmp_int_330[temp]), INT(tmp_int_329[temp])
	move $27, $25
	# Branch INT(tmp_int_329[temp]) ? AND_67 : AND_END_66
	sw $25, -0x20($29)
	sw $15, -0x8($29)
	sw $27, -0x24($29)
	lw $3, -0x20($29)
	bne $3, $0, AND_67
	j AND_END_66
AND_67:
	# JUMP AND_END_66
AND_END_66:
	# ASS, INT(tmp_int_331[temp]), INT(tmp_int_330[sp-0x24])
	lw $17, -0x24($29)
	move $18, $17
	# Branch INT(tmp_int_331[temp]) ? OR_END_64 : OR_68
	sw $18, -0x28($29)
	lw $3, -0x28($29)
	bne $3, $0, OR_END_64
OR_68:
	# JUMP OR_END_64
OR_END_64:
	# Branch INT(tmp_int_331[sp-0x28]) ? IF_BODY_69 : IF_END_70
	lw $3, -0x28($29)
	bne $3, $0, IF_BODY_69
	j IF_END_70
IF_BODY_69:
	# JUMP B_71
B_71:
	# PRINT_STR STR_8
	li $2, 4
	la $4, STR_8
	syscall
	# JUMP B_72
B_72:
	# JUMP IF_END_70
IF_END_70:
	# JUMP L_OR_EXP_73
L_OR_EXP_73:
	# JUMP L_AND_EXP_75
L_AND_EXP_75:
	# LE, INT(tmp_int_332[temp]), INT(b[sp-0x8]), 0
	lw $15, -0x8($29)
	sle $19, $15, 0
	# ASS, INT(tmp_int_333[temp]), INT(tmp_int_332[temp])
	move $21, $19
	# Branch INT(tmp_int_332[temp]) ? AND_77 : AND_END_76
	sw $19, -0x2c($29)
	sw $15, -0x8($29)
	sw $21, -0x30($29)
	lw $3, -0x2c($29)
	bne $3, $0, AND_77
	j AND_END_76
AND_77:
	# JUMP AND_END_76
AND_END_76:
	# ASS, INT(tmp_int_334[temp]), INT(tmp_int_333[sp-0x30])
	lw $20, -0x30($29)
	move $23, $20
	# Branch INT(tmp_int_334[temp]) ? OR_END_74 : OR_78
	sw $23, -0x34($29)
	lw $3, -0x34($29)
	bne $3, $0, OR_END_74
OR_78:
	# JUMP OR_END_74
OR_END_74:
	# Branch INT(tmp_int_334[sp-0x34]) ? IF_BODY_79 : IF_END_80
	lw $3, -0x34($29)
	bne $3, $0, IF_BODY_79
	j IF_END_80
IF_BODY_79:
	# JUMP B_81
B_81:
	# PRINT_STR STR_9
	li $2, 4
	la $4, STR_9
	syscall
	# JUMP B_82
B_82:
	# JUMP IF_END_80
IF_END_80:
	# DEF, INT(c[sp-0xc]), 0
	li $16, 0
	# GETINT INT(c[sp-0xc])
	li $2, 5
	syscall
	move $16, $2
	# JUMP L_OR_EXP_83
	sw $16, -0xc($29)
L_OR_EXP_83:
	# JUMP L_AND_EXP_85
L_AND_EXP_85:
	# EQ, INT(tmp_int_335[temp]), INT(c[sp-0xc]), 0
	lw $16, -0xc($29)
	seq $22, $16, 0
	# ASS, INT(tmp_int_336[temp]), INT(tmp_int_335[temp])
	move $24, $22
	# Branch INT(tmp_int_335[temp]) ? AND_87 : AND_END_86
	sw $24, -0x38($29)
	sw $22, -0x3c($29)
	sw $16, -0xc($29)
	lw $3, -0x3c($29)
	bne $3, $0, AND_87
	j AND_END_86
AND_87:
	# JUMP AND_END_86
AND_END_86:
	# ASS, INT(tmp_int_337[temp]), INT(tmp_int_336[sp-0x38])
	lw $26, -0x38($29)
	move $25, $26
	# Branch INT(tmp_int_337[temp]) ? OR_END_84 : OR_88
	sw $25, -0x40($29)
	lw $3, -0x40($29)
	bne $3, $0, OR_END_84
OR_88:
	# JUMP OR_END_84
OR_END_84:
	# Branch INT(tmp_int_337[sp-0x40]) ? IF_BODY_89 : IF_END_90
	lw $3, -0x40($29)
	bne $3, $0, IF_BODY_89
	j IF_END_90
IF_BODY_89:
	# JUMP B_91
B_91:
	# PRINT_STR STR_10
	li $2, 4
	la $4, STR_10
	syscall
	# ASS, INT(c[sp-0xc]), 13
	li $16, 13
	# JUMP B_92
	sw $16, -0xc($29)
B_92:
	# JUMP IF_END_90
IF_END_90:
	# DEF, INT(i[sp-0x10]), 1
	li $13, 1
	# JUMP WHILE_93
	sw $13, -0x10($29)
WHILE_93:
	# JUMP L_OR_EXP_96
L_OR_EXP_96:
	# JUMP L_AND_EXP_98
L_AND_EXP_98:
	# ASS, INT(tmp_int_338[temp]), 1
	li $27, 1
	# Branch 1 ? AND_100 : AND_END_99
	sw $27, -0x44($29)
	li $3, 1
	bne $3, $0, AND_100
	j AND_END_99
AND_100:
	# JUMP AND_END_99
AND_END_99:
	# ASS, INT(tmp_int_339[temp]), INT(tmp_int_338[sp-0x44])
	lw $17, -0x44($29)
	move $18, $17
	# Branch INT(tmp_int_339[temp]) ? OR_END_97 : OR_101
	sw $18, -0x48($29)
	lw $3, -0x48($29)
	bne $3, $0, OR_END_97
OR_101:
	# JUMP OR_END_97
OR_END_97:
	# Branch INT(tmp_int_339[sp-0x48]) ? WHILE_BODY_94 : WHILE_END_95
	lw $3, -0x48($29)
	bne $3, $0, WHILE_BODY_94
	j WHILE_END_95
WHILE_BODY_94:
	# JUMP B_102
B_102:
	# MUL, INT(tmp_int_340[temp]), INT(i[sp-0x10]), 2
	lw $13, -0x10($29)
	sll $19, $13, 1
	# ASS, INT(i[sp-0x10]), INT(tmp_int_340[temp])
	move $13, $19
	# JUMP L_OR_EXP_103
	sw $13, -0x10($29)
	j L_OR_EXP_103
	# JUMP B_113
	j B_113
L_OR_EXP_103:
	# JUMP L_AND_EXP_105
L_AND_EXP_105:
	# GT, INT(tmp_int_341[temp]), INT(i[sp-0x10]), 100
	lw $13, -0x10($29)
	sgt $21, $13, 100
	# ASS, INT(tmp_int_342[temp]), INT(tmp_int_341[temp])
	move $20, $21
	# Branch INT(tmp_int_341[temp]) ? AND_107 : AND_END_106
	sw $13, -0x10($29)
	sw $20, -0x4c($29)
	sw $21, -0x50($29)
	lw $3, -0x50($29)
	bne $3, $0, AND_107
	j AND_END_106
AND_107:
	# JUMP AND_END_106
AND_END_106:
	# ASS, INT(tmp_int_343[temp]), INT(tmp_int_342[sp-0x4c])
	lw $23, -0x4c($29)
	move $24, $23
	# Branch INT(tmp_int_343[temp]) ? OR_END_104 : OR_108
	sw $24, -0x54($29)
	lw $3, -0x54($29)
	bne $3, $0, OR_END_104
OR_108:
	# JUMP OR_END_104
OR_END_104:
	# Branch INT(tmp_int_343[sp-0x54]) ? IF_BODY_109 : IF_END_110
	lw $3, -0x54($29)
	bne $3, $0, IF_BODY_109
	j IF_END_110
IF_BODY_109:
	# JUMP B_111
B_111:
	# JUMP WHILE_END_95
	j WHILE_END_95
	# JUMP B_112
B_112:
	# JUMP IF_END_110
IF_END_110:
	# JUMP B_113
B_113:
	# JUMP WHILE_93
	j WHILE_93
WHILE_END_95:
	# Call FUNC_func1; Params: INT(a[sp-0x4]), INT(b[sp-0x8]), INT(c[sp-0xc])
	sw $31, 0x0($29)
	addiu $4, $29, -88
	lw $3, -0x4($29)
	sw $3, -0x4($4)
	lw $3, -0x8($29)
	sw $3, -0x8($4)
	lw $3, -0xc($29)
	sw $3, -0xc($4)
	move $29, $4
	jal FUNC_func1
	addiu $29, $29, 88
	lw $31, 0x0($29)
	# PRINT_STR STR_11
	li $2, 4
	la $4, STR_11
	syscall
	# PRINT_INT INT(i[sp-0x10])
	li $2, 1
	lw $4, -0x10($29)
	syscall
	# PRINT_STR STR_3
	li $2, 4
	la $4, STR_3
	syscall
	# Call FUNC_func4; Params: INT(b[sp-0x8]), INT(c[sp-0xc]); RET INT(tmp_int_344[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -88
	lw $3, -0x8($29)
	sw $3, -0x4($4)
	lw $3, -0xc($29)
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_func4
	addiu $29, $29, 88
	lw $31, 0x0($29)
	move $22, $2
	# PRINT_STR STR_12
	li $2, 4
	la $4, STR_12
	syscall
	# PRINT_INT INT(tmp_int_344[temp])
	li $2, 1
	move $4, $22
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
