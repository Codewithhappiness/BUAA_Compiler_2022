# Yuelin's Compiler
	
.data
	global:
	1 2 2 3 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
	.space 4
	STR_1: .asciiz "19373630\n"
	STR_2: .asciiz "\n"
.text
	la $gp, global
	j FUNC_main
FUNC_output_id:
	# JUMP L_OR_EXP_0
L_OR_EXP_0:
	# JUMP L_AND_EXP_1
L_AND_EXP_1:
	# NOT, INT(tmp_int_9949[temp]), 0
	seq $17, $0, 0
	# ASS, INT(tmp_int_9950[temp]), INT(tmp_int_9949[temp])
	move $18, $17
	# Branch INT(tmp_int_9949[temp]) ? AND_3 : AND_END_2
	sw $17, -0x4($29)
	sw $18, -0x8($29)
	lw $19, -0x4($29)
	bne $19, $0, AND_3
	j AND_END_2
AND_3:
	# AND, INT(tmp_int_9950[sp-0x8]), 0, INT(tmp_int_9950[sp-0x8])
	lw $20, -0x8($29)
	li $20, 0
	# Branch INT(tmp_int_9950[sp-0x8]) ? AND_4 : AND_END_2
	sw $20, -0x8($29)
	lw $21, -0x8($29)
	bne $21, $0, AND_4
	j AND_END_2
AND_4:
	# JUMP AND_END_2
AND_END_2:
	# ASS, INT(tmp_int_9951[temp]), INT(tmp_int_9950[sp-0x8])
	lw $22, -0x8($29)
	move $23, $22
	# Branch INT(tmp_int_9951[temp]) ? OR_END_5 : OR_6
	sw $23, -0xc($29)
	lw $24, -0xc($29)
	bne $24, $0, OR_END_5
OR_6:
	# JUMP L_AND_EXP_7
L_AND_EXP_7:
	# JUMP AND_END_8
AND_END_8:
	# OR, INT(tmp_int_9951[sp-0xc]), 1, INT(tmp_int_9951[sp-0xc])
	lw $25, -0xc($29)
	li $25, 1
	# Branch INT(tmp_int_9951[sp-0xc]) ? OR_END_5 : OR_9
	sw $25, -0xc($29)
	lw $26, -0xc($29)
	bne $26, $0, OR_END_5
OR_9:
	# JUMP OR_END_5
OR_END_5:
	# Branch INT(tmp_int_9951[sp-0xc]) ? IF_BODY_10 : IF_END_11
	lw $27, -0xc($29)
	bne $27, $0, IF_BODY_10
	j IF_END_11
IF_BODY_10:
	# JUMP B_12
B_12:
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# JUMP B_13
B_13:
	# JUMP IF_END_11
IF_END_11:
	# RETURN VOID
	jr $ra
	
FUNC_output_a_plus_b:
	lw $5, -0x4($29)
	lw $6, -0x8($29)
	# ADD, INT(tmp_int_9952[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $5, $6
	# PRINT_INT INT(tmp_int_9952[temp])
	li $2, 1
	move $4, $17
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN VOID
	jr $ra
	
FUNC_A_plus_B:
	lw $6, -0x4($29)
	lw $5, -0x8($29)
	# ADD, INT(tmp_int_9953[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	addu $17, $6, $5
	# RETURN INT(tmp_int_9953[temp])
	move $2, $17
	jr $ra
	
FUNC_return_one:
	# RETURN 1
	li $2, 1
	jr $ra
	
FUNC_factorial:
	lw $5, -0x4($29)
	# JUMP L_OR_EXP_18
L_OR_EXP_18:
	# JUMP L_AND_EXP_19
L_AND_EXP_19:
	# MUL, INT(tmp_int_9954[temp]), INT(n[sp-0x4]), 4
	sll $17, $5, 2
	# ADD, INT(tmp_int_9954[temp]), INT(tmp_int_9954[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9954[temp]))->POINTER(tmp_pointer_3240[temp])
	addiu $3, $28, 36
	addu $18, $3, $17
	# LOAD POINTER(tmp_pointer_3240[temp]), INT(tmp_int_9955[temp])
	lw $19, 0x0($18)
	# NEQ, INT(tmp_int_9956[temp]), INT(tmp_int_9955[temp]), 0
	sne $20, $19, 0
	# JUMP AND_END_20
	sw $20, -0x8($29)
AND_END_20:
	# JUMP OR_END_21
OR_END_21:
	# Branch INT(tmp_int_9956[sp-0x8]) ? IF_BODY_22 : IF_ELSE_24
	lw $21, -0x8($29)
	bne $21, $0, IF_BODY_22
	j IF_ELSE_24
IF_BODY_22:
	# JUMP B_25
B_25:
	# MUL, INT(tmp_int_9957[temp]), INT(n[sp-0x4]), 4
	sll $22, $5, 2
	# ADD, INT(tmp_int_9957[temp]), INT(tmp_int_9957[temp]), 0
	addiu $22, $22, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9957[temp]))->POINTER(tmp_pointer_3241[temp])
	addiu $3, $28, 36
	addu $23, $3, $22
	# LOAD POINTER(tmp_pointer_3241[temp]), INT(tmp_int_9958[temp])
	lw $24, 0x0($23)
	# RETURN INT(tmp_int_9958[temp])
	move $2, $24
	jr $ra
	# JUMP B_26
B_26:
	# JUMP IF_END_23
	j IF_END_23
IF_ELSE_24:
	# JUMP B_27
B_27:
	# SUB, INT(tmp_int_9960[temp]), INT(n[sp-0x4]), 1
	addiu $25, $5, -1
	# MUL, INT(tmp_int_9959[temp]), INT(tmp_int_9960[temp]), 4
	sll $26, $25, 2
	# ADD, INT(tmp_int_9959[temp]), INT(tmp_int_9959[temp]), 0
	addiu $26, $26, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9959[temp]))->POINTER(tmp_pointer_3242[temp])
	addiu $3, $28, 36
	addu $27, $3, $26
	# SUB, INT(tmp_int_9961[temp]), INT(n[sp-0x4]), 1
	addiu $17, $5, -1
	# Call FUNC_factorial; Params: INT(tmp_int_9961[temp]); RET INT(tmp_int_9962[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -20
	sw $17, -0x4($4)
	sw $27, -0xc($29)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $18, $2
	lw $5, -0x4($29)
	# STORE POINTER(tmp_pointer_3242[sp-0xc]), INT(tmp_int_9962[temp])
	lw $19, -0xc($29)
	sw $18, 0x0($19)
	# MUL, INT(tmp_int_9963[temp]), INT(n[sp-0x4]), 4
	sll $20, $5, 2
	# ADD, INT(tmp_int_9963[temp]), INT(tmp_int_9963[temp]), 0
	addiu $20, $20, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9963[temp]))->POINTER(tmp_pointer_3243[temp])
	addiu $3, $28, 36
	addu $21, $3, $20
	# SUB, INT(tmp_int_9965[temp]), INT(n[sp-0x4]), 1
	addiu $22, $5, -1
	# MUL, INT(tmp_int_9964[temp]), INT(tmp_int_9965[temp]), 4
	sll $23, $22, 2
	# ADD, INT(tmp_int_9964[temp]), INT(tmp_int_9964[temp]), 0
	addiu $23, $23, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9964[temp]))->POINTER(tmp_pointer_3244[temp])
	addiu $3, $28, 36
	addu $24, $3, $23
	# LOAD POINTER(tmp_pointer_3244[temp]), INT(tmp_int_9966[temp])
	lw $25, 0x0($24)
	# MUL, INT(tmp_int_9967[temp]), INT(tmp_int_9966[temp]), INT(n[sp-0x4])
	mult $25 $5
	mflo $26
	# STORE POINTER(tmp_pointer_3243[temp]), INT(tmp_int_9967[temp])
	sw $26, 0x0($21)
	# MUL, INT(tmp_int_9968[temp]), INT(n[sp-0x4]), 4
	sll $17, $5, 2
	# ADD, INT(tmp_int_9968[temp]), INT(tmp_int_9968[temp]), 0
	addiu $17, $17, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9968[temp]))->POINTER(tmp_pointer_3245[temp])
	addiu $3, $28, 36
	addu $27, $3, $17
	# LOAD POINTER(tmp_pointer_3245[temp]), INT(tmp_int_9969[temp])
	lw $19, 0x0($27)
	# RETURN INT(tmp_int_9969[temp])
	move $2, $19
	jr $ra
	# JUMP B_28
B_28:
	# JUMP IF_END_23
IF_END_23:
	# RETURN 0
	li $2, 0
	jr $ra
	
FUNC_isPrime:
	lw $5, -0x4($29)
	# DEF, INT(i[sp-0x8]), 3
	li $6, 3
	# JUMP L_OR_EXP_30
L_OR_EXP_30:
	# JUMP L_AND_EXP_31
L_AND_EXP_31:
	# LE, INT(tmp_int_9970[temp]), INT(n[sp-0x4]), 0
	sle $17, $5, 0
	# JUMP AND_END_32
	sw $17, -0xc($29)
AND_END_32:
	# JUMP OR_END_33
OR_END_33:
	# Branch INT(tmp_int_9970[sp-0xc]) ? IF_BODY_34 : IF_END_35
	lw $18, -0xc($29)
	bne $18, $0, IF_BODY_34
	j IF_END_35
IF_BODY_34:
	# JUMP B_36
B_36:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_37
B_37:
	# JUMP IF_END_35
IF_END_35:
	# JUMP L_OR_EXP_38
L_OR_EXP_38:
	# JUMP L_AND_EXP_39
L_AND_EXP_39:
	# MOD, INT(tmp_int_9971[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_513
	andi $19, $5, 1
	j DIV_END_514
DIV_513:
	subu $5, $0, $5
	andi $19, $5, 1
	subu $19, $0, $19
DIV_END_514:
	# EQ, INT(tmp_int_9972[temp]), INT(tmp_int_9971[temp]), 0
	seq $20, $19, 0
	# JUMP AND_END_40
	sw $20, -0x10($29)
AND_END_40:
	# JUMP OR_END_41
OR_END_41:
	# Branch INT(tmp_int_9972[sp-0x10]) ? IF_BODY_42 : IF_END_43
	lw $21, -0x10($29)
	bne $21, $0, IF_BODY_42
	j IF_END_43
IF_BODY_42:
	# JUMP B_44
B_44:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_45
B_45:
	# JUMP IF_END_43
IF_END_43:
	# JUMP L_OR_EXP_49
L_OR_EXP_49:
	# JUMP L_AND_EXP_50
L_AND_EXP_50:
	# DIV, INT(tmp_int_9974[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_515
	srl $22, $5, 1
	j DIV_END_516
DIV_515:
	subu $5, $0, $5
	srl $22, $5, 1
	subu $22, $0, $22
DIV_END_516:
	# LT, INT(tmp_int_9973[temp]), INT(i[sp-0x8]), INT(tmp_int_9974[temp])
	slt $23, $6, $22
	# JUMP AND_END_51
	sw $23, -0x14($29)
AND_END_51:
	# JUMP OR_END_52
OR_END_52:
	# Branch INT(tmp_int_9973[sp-0x14]) ? DO_BODY_46 : DO_END_48
	lw $24, -0x14($29)
	bne $24, $0, DO_BODY_46
	j DO_END_48
	# JUMP DO_BODY_46
DO_BODY_46:
	# JUMP B_53
B_53:
	# JUMP L_OR_EXP_54
	j L_OR_EXP_54
	# JUMP B_62
	j B_62
L_OR_EXP_54:
	# JUMP L_AND_EXP_55
L_AND_EXP_55:
	# MOD, INT(tmp_int_9975[temp]), INT(n[sp-0x4]), INT(i[sp-0x8])
	div $5 $6
	mfhi $25
	# EQ, INT(tmp_int_9976[temp]), INT(tmp_int_9975[temp]), 0
	seq $26, $25, 0
	# JUMP AND_END_56
	sw $26, -0x18($29)
AND_END_56:
	# JUMP OR_END_57
OR_END_57:
	# Branch INT(tmp_int_9976[sp-0x18]) ? IF_BODY_58 : IF_END_59
	lw $27, -0x18($29)
	bne $27, $0, IF_BODY_58
	j IF_END_59
IF_BODY_58:
	# JUMP B_60
B_60:
	# RETURN 0
	li $2, 0
	jr $ra
	# JUMP B_61
B_61:
	# JUMP IF_END_59
IF_END_59:
	# ADD, INT(tmp_int_9977[temp]), INT(i[sp-0x8]), 2
	addiu $17, $6, 2
	# ASS, INT(i[sp-0x8]), INT(tmp_int_9977[temp])
	move $6, $17
	# JUMP B_62
B_62:
	# JUMP DO_CHECK_47
DO_CHECK_47:
	# JUMP L_OR_EXP_63
L_OR_EXP_63:
	# JUMP L_AND_EXP_64
L_AND_EXP_64:
	# DIV, INT(tmp_int_9979[temp]), INT(n[sp-0x4]), 2
	bltz $5, DIV_517
	srl $18, $5, 1
	j DIV_END_518
DIV_517:
	subu $5, $0, $5
	srl $18, $5, 1
	subu $18, $0, $18
DIV_END_518:
	# LT, INT(tmp_int_9978[temp]), INT(i[sp-0x8]), INT(tmp_int_9979[temp])
	slt $19, $6, $18
	# JUMP AND_END_65
	sw $19, -0x1c($29)
AND_END_65:
	# JUMP OR_END_66
OR_END_66:
	# Branch INT(tmp_int_9978[sp-0x1c]) ? DO_BODY_46 : DO_END_48
	lw $20, -0x1c($29)
	bne $20, $0, DO_BODY_46
	j DO_END_48
	# JUMP DO_END_48
DO_END_48:
	# ADD, INT(tmp_int_9980[temp]), 1, 1
	li $21, 2
	# DIV, INT(tmp_int_9982[temp]), 1, 1
	li $22, 1
	# SUB, INT(tmp_int_9981[temp]), INT(tmp_int_9980[temp]), INT(tmp_int_9982[temp])
	subu $23, $21, $22
	# RETURN INT(tmp_int_9981[temp])
	move $2, $23
	jr $ra
	
FUNC_sumMatrix:
	lw $6, -0x4($29)
	# DEF, INT(i[sp-0x8]), 0
	li $7, 0
	# DEF, INT(sum[sp-0x10]), 0
	li $8, 0
	# JUMP L_OR_EXP_71
L_OR_EXP_71:
	# JUMP L_AND_EXP_72
L_AND_EXP_72:
	# LT, INT(tmp_int_9983[temp]), INT(i[sp-0x8]), 10
	li $3, 10
	slt $17, $7, $3
	# JUMP AND_END_73
	sw $17, -0x14($29)
AND_END_73:
	# JUMP OR_END_74
OR_END_74:
	# Branch INT(tmp_int_9983[sp-0x14]) ? DO_BODY_68 : DO_END_70
	lw $18, -0x14($29)
	bne $18, $0, DO_BODY_68
	j DO_END_70
	# JUMP DO_BODY_68
DO_BODY_68:
	# JUMP B_75
B_75:
	# ASS, INT(j[sp-0xc]), 0
	li $5, 0
	# JUMP L_OR_EXP_79
	j L_OR_EXP_79
	# JUMP B_89
	j B_89
L_OR_EXP_79:
	# JUMP L_AND_EXP_80
L_AND_EXP_80:
	# LT, INT(tmp_int_9984[temp]), INT(j[sp-0xc]), 10
	li $3, 10
	slt $19, $5, $3
	# JUMP AND_END_81
	sw $19, -0x18($29)
AND_END_81:
	# JUMP OR_END_82
OR_END_82:
	# Branch INT(tmp_int_9984[sp-0x18]) ? DO_BODY_76 : DO_END_78
	lw $20, -0x18($29)
	bne $20, $0, DO_BODY_76
	j DO_END_78
	# JUMP DO_BODY_76
DO_BODY_76:
	# JUMP B_83
B_83:
	# MUL, INT(tmp_int_9986[temp]), INT(j[sp-0xc]), 4
	sll $21, $5, 2
	# ADD, INT(tmp_int_9986[temp]), INT(tmp_int_9986[temp]), 0
	addiu $21, $21, 0
	# MUL, INT(tmp_int_9987[temp]), INT(i[sp-0x8]), 40
	sll $22, $7, 5
	sll $3, $7, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_9987[temp]), INT(tmp_int_9987[temp]), INT(tmp_int_9986[temp])
	addu $22, $22, $21
	# OFFSET (ARRAY(array_f[sp-0x4])+INT(tmp_int_9987[temp]))->POINTER(tmp_pointer_3246[temp])
	addu $23, $6, $22
	# LOAD POINTER(tmp_pointer_3246[temp]), INT(tmp_int_9988[temp])
	lw $24, 0x0($23)
	# ADD, INT(tmp_int_9985[temp]), INT(sum[sp-0x10]), INT(tmp_int_9988[temp])
	addu $25, $8, $24
	# ASS, INT(sum[sp-0x10]), INT(tmp_int_9985[temp])
	move $8, $25
	# ADD, INT(tmp_int_9989[temp]), INT(j[sp-0xc]), 1
	addiu $26, $5, 1
	# ASS, INT(j[sp-0xc]), INT(tmp_int_9989[temp])
	move $5, $26
	# JUMP B_84
	sw $22, -0x1c($29)
B_84:
	# JUMP DO_CHECK_77
DO_CHECK_77:
	# JUMP L_OR_EXP_85
L_OR_EXP_85:
	# JUMP L_AND_EXP_86
L_AND_EXP_86:
	# LT, INT(tmp_int_9990[temp]), INT(j[sp-0xc]), 10
	li $3, 10
	slt $27, $5, $3
	# JUMP AND_END_87
	sw $27, -0x20($29)
AND_END_87:
	# JUMP OR_END_88
OR_END_88:
	# Branch INT(tmp_int_9990[sp-0x20]) ? DO_BODY_76 : DO_END_78
	lw $17, -0x20($29)
	bne $17, $0, DO_BODY_76
	j DO_END_78
	# JUMP DO_END_78
DO_END_78:
	# ADD, INT(tmp_int_9991[temp]), INT(i[sp-0x8]), 1
	addiu $18, $7, 1
	# ASS, INT(i[sp-0x8]), INT(tmp_int_9991[temp])
	move $7, $18
	# JUMP B_89
B_89:
	# JUMP DO_CHECK_69
DO_CHECK_69:
	# JUMP L_OR_EXP_90
L_OR_EXP_90:
	# JUMP L_AND_EXP_91
L_AND_EXP_91:
	# LT, INT(tmp_int_9992[temp]), INT(i[sp-0x8]), 10
	li $3, 10
	slt $19, $7, $3
	# JUMP AND_END_92
	sw $19, -0x24($29)
AND_END_92:
	# JUMP OR_END_93
OR_END_93:
	# Branch INT(tmp_int_9992[sp-0x24]) ? DO_BODY_68 : DO_END_70
	lw $20, -0x24($29)
	bne $20, $0, DO_BODY_68
	j DO_END_70
	# JUMP DO_END_70
DO_END_70:
	# RETURN INT(sum[sp-0x10])
	move $2, $8
	jr $ra
	
FUNC_matrixMulti:
	lw $10, -0x4($29)
	lw $9, -0x8($29)
	lw $5, -0xc($29)
	# DEF, INT(i[sp-0x1a0]), 0
	li $8, 0
	# JUMP L_OR_EXP_98
L_OR_EXP_98:
	# JUMP L_AND_EXP_99
L_AND_EXP_99:
	# LT, INT(tmp_int_9993[temp]), INT(i[sp-0x1a0]), 10
	li $3, 10
	slt $17, $8, $3
	# JUMP AND_END_100
	sw $17, -0x1ac($29)
AND_END_100:
	# JUMP OR_END_101
OR_END_101:
	# Branch INT(tmp_int_9993[sp-0x1ac]) ? DO_BODY_95 : DO_END_97
	lw $18, -0x1ac($29)
	bne $18, $0, DO_BODY_95
	j DO_END_97
	# JUMP DO_BODY_95
DO_BODY_95:
	# JUMP B_102
B_102:
	# ASS, INT(j[sp-0x1a4]), 0
	li $6, 0
	# JUMP L_OR_EXP_106
	j L_OR_EXP_106
	# JUMP B_129
	j B_129
L_OR_EXP_106:
	# JUMP L_AND_EXP_107
L_AND_EXP_107:
	# LT, INT(tmp_int_9994[temp]), INT(j[sp-0x1a4]), 10
	li $3, 10
	slt $19, $6, $3
	# JUMP AND_END_108
	sw $19, -0x1b0($29)
AND_END_108:
	# JUMP OR_END_109
OR_END_109:
	# Branch INT(tmp_int_9994[sp-0x1b0]) ? DO_BODY_103 : DO_END_105
	lw $20, -0x1b0($29)
	bne $20, $0, DO_BODY_103
	j DO_END_105
	# JUMP DO_BODY_103
DO_BODY_103:
	# JUMP B_110
B_110:
	# ASS, INT(k[sp-0x1a8]), 0
	li $5, 0
	# MUL, INT(tmp_int_9995[temp]), INT(j[sp-0x1a4]), 4
	sll $21, $6, 2
	# ADD, INT(tmp_int_9995[temp]), INT(tmp_int_9995[temp]), 0
	addiu $21, $21, 0
	# MUL, INT(tmp_int_9996[temp]), INT(i[sp-0x1a0]), 40
	sll $22, $8, 5
	sll $3, $8, 3
	addu $22, $22, $3
	# ADD, INT(tmp_int_9996[temp]), INT(tmp_int_9996[temp]), INT(tmp_int_9995[temp])
	addu $22, $22, $21
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_9996[temp]))->POINTER(tmp_pointer_3247[temp])
	addiu $3, $29, -412
	addu $23, $3, $22
	# STORE POINTER(tmp_pointer_3247[temp]), 0
	li $3, 0
	sw $3, 0x0($23)
	# JUMP L_OR_EXP_114
	j L_OR_EXP_114
	# JUMP B_124
	j B_124
L_OR_EXP_114:
	# JUMP L_AND_EXP_115
L_AND_EXP_115:
	# LT, INT(tmp_int_9997[temp]), INT(k[sp-0x1a8]), 10
	li $3, 10
	slt $24, $5, $3
	# JUMP AND_END_116
	sw $24, -0x1b4($29)
AND_END_116:
	# JUMP OR_END_117
OR_END_117:
	# Branch INT(tmp_int_9997[sp-0x1b4]) ? DO_BODY_111 : DO_END_113
	lw $25, -0x1b4($29)
	bne $25, $0, DO_BODY_111
	j DO_END_113
	# JUMP DO_BODY_111
DO_BODY_111:
	# JUMP B_118
B_118:
	# MUL, INT(tmp_int_9998[temp]), INT(j[sp-0x1a4]), 4
	sll $26, $6, 2
	# ADD, INT(tmp_int_9998[temp]), INT(tmp_int_9998[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_9999[temp]), INT(i[sp-0x1a0]), 40
	sll $27, $8, 5
	sll $3, $8, 3
	addu $27, $27, $3
	# ADD, INT(tmp_int_9999[temp]), INT(tmp_int_9999[temp]), INT(tmp_int_9998[temp])
	addu $27, $27, $26
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_9999[temp]))->POINTER(tmp_pointer_3248[temp])
	addiu $3, $29, -412
	addu $17, $3, $27
	# MUL, INT(tmp_int_10000[temp]), INT(j[sp-0x1a4]), 4
	sll $18, $6, 2
	# ADD, INT(tmp_int_10000[temp]), INT(tmp_int_10000[temp]), 0
	addiu $18, $18, 0
	# MUL, INT(tmp_int_10001[temp]), INT(i[sp-0x1a0]), 40
	sll $19, $8, 5
	sll $3, $8, 3
	addu $19, $19, $3
	# ADD, INT(tmp_int_10001[temp]), INT(tmp_int_10001[temp]), INT(tmp_int_10000[temp])
	addu $19, $19, $18
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_10001[temp]))->POINTER(tmp_pointer_3249[temp])
	addiu $3, $29, -412
	addu $20, $3, $19
	# LOAD POINTER(tmp_pointer_3249[temp]), INT(tmp_int_10002[temp])
	lw $21, 0x0($20)
	# MUL, INT(tmp_int_10004[temp]), INT(k[sp-0x1a8]), 4
	sll $22, $5, 2
	# ADD, INT(tmp_int_10004[temp]), INT(tmp_int_10004[temp]), 0
	addiu $22, $22, 0
	# MUL, INT(tmp_int_10005[temp]), INT(i[sp-0x1a0]), 40
	sll $23, $8, 5
	sll $3, $8, 3
	addu $23, $23, $3
	# ADD, INT(tmp_int_10005[temp]), INT(tmp_int_10005[temp]), INT(tmp_int_10004[temp])
	addu $23, $23, $22
	# OFFSET (ARRAY(matrix_a[sp-0x4])+INT(tmp_int_10005[temp]))->POINTER(tmp_pointer_3250[temp])
	addu $24, $10, $23
	# LOAD POINTER(tmp_pointer_3250[temp]), INT(tmp_int_10006[temp])
	lw $25, 0x0($24)
	# MUL, INT(tmp_int_10008[temp]), INT(j[sp-0x1a4]), 4
	sll $26, $6, 2
	# ADD, INT(tmp_int_10008[temp]), INT(tmp_int_10008[temp]), 0
	addiu $26, $26, 0
	# MUL, INT(tmp_int_10009[temp]), INT(k[sp-0x1a8]), 40
	sll $27, $5, 5
	sll $3, $5, 3
	addu $27, $27, $3
	# ADD, INT(tmp_int_10009[temp]), INT(tmp_int_10009[temp]), INT(tmp_int_10008[temp])
	addu $27, $27, $26
	# OFFSET (ARRAY(matrix_b[sp-0x8])+INT(tmp_int_10009[temp]))->POINTER(tmp_pointer_3251[temp])
	addu $18, $9, $27
	# LOAD POINTER(tmp_pointer_3251[temp]), INT(tmp_int_10010[temp])
	lw $19, 0x0($18)
	# MUL, INT(tmp_int_10007[temp]), INT(tmp_int_10006[temp]), INT(tmp_int_10010[temp])
	mult $25 $19
	mflo $20
	# ADD, INT(tmp_int_10003[temp]), INT(tmp_int_10002[temp]), INT(tmp_int_10007[temp])
	addu $22, $21, $20
	# STORE POINTER(tmp_pointer_3248[temp]), INT(tmp_int_10003[temp])
	sw $22, 0x0($17)
	# ADD, INT(tmp_int_10011[temp]), INT(k[sp-0x1a8]), 1
	addiu $24, $5, 1
	# ASS, INT(k[sp-0x1a8]), INT(tmp_int_10011[temp])
	move $5, $24
	# JUMP B_119
	sw $23, -0x1b8($29)
	sw $27, -0x1bc($29)
B_119:
	# JUMP DO_CHECK_112
DO_CHECK_112:
	# JUMP L_OR_EXP_120
L_OR_EXP_120:
	# JUMP L_AND_EXP_121
L_AND_EXP_121:
	# LT, INT(tmp_int_10012[temp]), INT(k[sp-0x1a8]), 10
	li $3, 10
	slt $26, $5, $3
	# JUMP AND_END_122
	sw $26, -0x1c0($29)
AND_END_122:
	# JUMP OR_END_123
OR_END_123:
	# Branch INT(tmp_int_10012[sp-0x1c0]) ? DO_BODY_111 : DO_END_113
	lw $18, -0x1c0($29)
	bne $18, $0, DO_BODY_111
	j DO_END_113
	# JUMP DO_END_113
DO_END_113:
	# ADD, INT(tmp_int_10013[temp]), INT(j[sp-0x1a4]), 1
	addiu $25, $6, 1
	# ASS, INT(j[sp-0x1a4]), INT(tmp_int_10013[temp])
	move $6, $25
	# JUMP B_124
B_124:
	# JUMP DO_CHECK_104
DO_CHECK_104:
	# JUMP L_OR_EXP_125
L_OR_EXP_125:
	# JUMP L_AND_EXP_126
L_AND_EXP_126:
	# LT, INT(tmp_int_10014[temp]), INT(j[sp-0x1a4]), 10
	li $3, 10
	slt $19, $6, $3
	# JUMP AND_END_127
	sw $19, -0x1c4($29)
AND_END_127:
	# JUMP OR_END_128
OR_END_128:
	# Branch INT(tmp_int_10014[sp-0x1c4]) ? DO_BODY_103 : DO_END_105
	lw $21, -0x1c4($29)
	bne $21, $0, DO_BODY_103
	j DO_END_105
	# JUMP DO_END_105
DO_END_105:
	# ADD, INT(tmp_int_10015[temp]), INT(i[sp-0x1a0]), 1
	addiu $20, $8, 1
	# ASS, INT(i[sp-0x1a0]), INT(tmp_int_10015[temp])
	move $8, $20
	# JUMP B_129
B_129:
	# JUMP DO_CHECK_96
DO_CHECK_96:
	# JUMP L_OR_EXP_130
L_OR_EXP_130:
	# JUMP L_AND_EXP_131
L_AND_EXP_131:
	# LT, INT(tmp_int_10016[temp]), INT(i[sp-0x1a0]), 10
	li $3, 10
	slt $17, $8, $3
	# JUMP AND_END_132
	sw $17, -0x1c8($29)
AND_END_132:
	# JUMP OR_END_133
OR_END_133:
	# Branch INT(tmp_int_10016[sp-0x1c8]) ? DO_BODY_95 : DO_END_97
	lw $22, -0x1c8($29)
	bne $22, $0, DO_BODY_95
	j DO_END_97
	# JUMP DO_END_97
DO_END_97:
	# OFFSET (ARRAY(matrix_c[sp-0x19c])+0)->POINTER(tmp_pointer_3252[temp])
	addiu $24, $29, -412
	# Call FUNC_sumMatrix; Params: POINTER(tmp_pointer_3252[temp]); RET INT(tmp_int_10017[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -464
	sw $24, -0x4($4)
	move $29, $4
	jal FUNC_sumMatrix
	addiu $29, $29, 464
	lw $31, 0x0($29)
	move $23, $2
	# RETURN INT(tmp_int_10017[temp])
	move $2, $23
	jr $ra
	
FUNC_main:
	# Call FUNC_output_id; Params: 
	sw $31, 0x0($29)
	addiu $4, $29, -12
	move $29, $4
	jal FUNC_output_id
	addiu $29, $29, 12
	lw $31, 0x0($29)
	# MUL, INT(tmp_int_10019[temp]), 3, 3
	li $17, 9
	# ADD, INT(tmp_int_10018[temp]), 80, INT(tmp_int_10019[temp])
	addiu $18, $17, 80
	# Call FUNC_isPrime; Params: INT(tmp_int_10018[temp]); RET INT(tmp_int_10020[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -16
	sw $18, -0x4($4)
	move $29, $4
	jal FUNC_isPrime
	addiu $29, $29, 16
	lw $31, 0x0($29)
	move $19, $2
	# PRINT_INT INT(tmp_int_10020[temp])
	li $2, 1
	move $4, $19
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP L_OR_EXP_135
L_OR_EXP_135:
	# JUMP L_AND_EXP_136
L_AND_EXP_136:
	# GE, INT(tmp_int_10021[temp]), INT(const_b[data+0x4]), INT(int_c[data+0x10])
	lw $20, 0x4($28)
	lw $21, 0x10($28)
	sge $22, $20, $21
	# JUMP AND_END_137
	sw $22, -0xc($29)
	sw $20, 0x4($28)
	sw $21, 0x10($28)
AND_END_137:
	# JUMP OR_END_138
OR_END_138:
	# Branch INT(tmp_int_10021[sp-0xc]) ? IF_BODY_139 : IF_END_140
	lw $23, -0xc($29)
	bne $23, $0, IF_BODY_139
	j IF_END_140
IF_BODY_139:
	# JUMP B_141
B_141:
	# ASS, INT(int_d[data+0x14]), 1
	li $24, 1
	# JUMP B_142
	sw $24, 0x14($28)
B_142:
	# JUMP IF_END_140
IF_END_140:
	# JUMP L_OR_EXP_143
L_OR_EXP_143:
	# JUMP L_AND_EXP_144
L_AND_EXP_144:
	# EQ, INT(tmp_int_10022[temp]), INT(const_b[data+0x4]), INT(int_d[data+0x14])
	lw $25, 0x4($28)
	lw $26, 0x14($28)
	seq $27, $25, $26
	# JUMP AND_END_145
	sw $27, -0x10($29)
	sw $25, 0x4($28)
	sw $26, 0x14($28)
AND_END_145:
	# JUMP OR_END_146
OR_END_146:
	# Branch INT(tmp_int_10022[sp-0x10]) ? IF_BODY_147 : IF_END_148
	lw $17, -0x10($29)
	bne $17, $0, IF_BODY_147
	j IF_END_148
IF_BODY_147:
	# JUMP B_149
B_149:
	# ASS, INT(int_e[data+0x18]), 0
	li $18, 0
	# JUMP B_150
	sw $18, 0x18($28)
B_150:
	# JUMP IF_END_148
IF_END_148:
	# JUMP L_OR_EXP_151
L_OR_EXP_151:
	# JUMP L_AND_EXP_152
L_AND_EXP_152:
	# GT, INT(tmp_int_10023[temp]), INT(const_b[data+0x4]), INT(int_e[data+0x18])
	lw $19, 0x4($28)
	lw $22, 0x18($28)
	sgt $20, $19, $22
	# JUMP AND_END_153
	sw $20, -0x14($29)
	sw $19, 0x4($28)
	sw $22, 0x18($28)
AND_END_153:
	# JUMP OR_END_154
OR_END_154:
	# Branch INT(tmp_int_10023[sp-0x14]) ? IF_BODY_155 : IF_ELSE_157
	lw $21, -0x14($29)
	bne $21, $0, IF_BODY_155
	j IF_ELSE_157
IF_BODY_155:
	# JUMP B_158
B_158:
	# ASS, INT(int_d[data+0x14]), 3
	li $23, 3
	# JUMP B_159
	sw $23, 0x14($28)
B_159:
	# JUMP IF_END_156
	j IF_END_156
IF_ELSE_157:
	# JUMP B_160
B_160:
	# ASS, INT(int_d[data+0x14]), 4
	li $24, 4
	# JUMP B_161
	sw $24, 0x14($28)
B_161:
	# JUMP IF_END_156
IF_END_156:
	# DEF, INT(i[sp-0x4]), 5
	li $5, 5
	# MUL, INT(tmp_int_10025[temp]), 3, 2
	li $27, 6
	# DIV, INT(tmp_int_10026[temp]), INT(tmp_int_10025[temp]), 2
	bltz $27, DIV_519
	srl $25, $27, 1
	j DIV_END_520
DIV_519:
	subu $27, $0, $27
	srl $25, $27, 1
	subu $25, $0, $25
DIV_END_520:
	# ADD, INT(tmp_int_10024[temp]), INT(i[sp-0x4]), INT(tmp_int_10026[temp])
	addu $26, $5, $25
	# ASS, INT(int_c[data+0x10]), INT(tmp_int_10024[temp])
	move $17, $26
	# ASS, INT(i[sp-0x4]), 0
	li $5, 0
	# JUMP L_OR_EXP_165
	sw $17, 0x10($28)
L_OR_EXP_165:
	# JUMP L_AND_EXP_166
L_AND_EXP_166:
	# LT, INT(tmp_int_10027[temp]), INT(i[sp-0x4]), 100
	li $3, 100
	slt $18, $5, $3
	# JUMP AND_END_167
	sw $18, -0x18($29)
AND_END_167:
	# JUMP OR_END_168
OR_END_168:
	# Branch INT(tmp_int_10027[sp-0x18]) ? DO_BODY_162 : DO_END_164
	lw $20, -0x18($29)
	bne $20, $0, DO_BODY_162
	j DO_END_164
	# JUMP DO_BODY_162
DO_BODY_162:
	# JUMP B_169
B_169:
	# JUMP L_OR_EXP_170
	j L_OR_EXP_170
	# JUMP B_185
	j B_185
L_OR_EXP_170:
	# JUMP L_AND_EXP_171
L_AND_EXP_171:
	# EQ, INT(tmp_int_10028[temp]), INT(i[sp-0x4]), 0
	seq $19, $5, 0
	# JUMP AND_END_172
	sw $19, -0x1c($29)
AND_END_172:
	# ASS, INT(tmp_int_10029[temp]), INT(tmp_int_10028[sp-0x1c])
	lw $22, -0x1c($29)
	move $21, $22
	# Branch INT(tmp_int_10029[temp]) ? OR_END_173 : OR_174
	sw $21, -0x20($29)
	lw $23, -0x20($29)
	bne $23, $0, OR_END_173
OR_174:
	# JUMP L_AND_EXP_175
L_AND_EXP_175:
	# EQ, INT(tmp_int_10030[temp]), INT(i[sp-0x4]), 1
	seq $24, $5, 1
	# JUMP AND_END_176
	sw $24, -0x24($29)
AND_END_176:
	# OR, INT(tmp_int_10029[sp-0x20]), INT(tmp_int_10030[sp-0x24]), INT(tmp_int_10029[sp-0x20])
	lw $27, -0x24($29)
	lw $25, -0x20($29)
	or $25, $27, $25
	# Branch INT(tmp_int_10029[sp-0x20]) ? OR_END_173 : OR_177
	sw $25, -0x20($29)
	lw $26, -0x20($29)
	bne $26, $0, OR_END_173
OR_177:
	# JUMP OR_END_173
OR_END_173:
	# Branch INT(tmp_int_10029[sp-0x20]) ? IF_BODY_178 : IF_ELSE_180
	lw $17, -0x20($29)
	bne $17, $0, IF_BODY_178
	j IF_ELSE_180
IF_BODY_178:
	# JUMP B_181
B_181:
	# MUL, INT(tmp_int_10031[temp]), INT(i[sp-0x4]), 4
	sll $18, $5, 2
	# ADD, INT(tmp_int_10031[temp]), INT(tmp_int_10031[temp]), 0
	addiu $18, $18, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_10031[temp]))->POINTER(tmp_pointer_3253[temp])
	addiu $3, $28, 36
	addu $20, $3, $18
	# STORE POINTER(tmp_pointer_3253[temp]), 1
	li $3, 1
	sw $3, 0x0($20)
	# JUMP B_182
B_182:
	# JUMP IF_END_179
	j IF_END_179
IF_ELSE_180:
	# JUMP B_183
B_183:
	# MUL, INT(tmp_int_10032[temp]), INT(i[sp-0x4]), 4
	sll $19, $5, 2
	# ADD, INT(tmp_int_10032[temp]), INT(tmp_int_10032[temp]), 0
	addiu $19, $19, 0
	# OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_10032[temp]))->POINTER(tmp_pointer_3254[temp])
	addiu $3, $28, 36
	addu $22, $3, $19
	# STORE POINTER(tmp_pointer_3254[temp]), 0
	li $3, 0
	sw $3, 0x0($22)
	# JUMP B_184
B_184:
	# JUMP IF_END_179
IF_END_179:
	# ADD, INT(tmp_int_10033[temp]), INT(i[sp-0x4]), 1
	addiu $21, $5, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_10033[temp])
	move $5, $21
	# JUMP B_185
B_185:
	# JUMP DO_CHECK_163
DO_CHECK_163:
	# JUMP L_OR_EXP_186
L_OR_EXP_186:
	# JUMP L_AND_EXP_187
L_AND_EXP_187:
	# LT, INT(tmp_int_10034[temp]), INT(i[sp-0x4]), 100
	li $3, 100
	slt $23, $5, $3
	# JUMP AND_END_188
	sw $23, -0x28($29)
AND_END_188:
	# JUMP OR_END_189
OR_END_189:
	# Branch INT(tmp_int_10034[sp-0x28]) ? DO_BODY_162 : DO_END_164
	lw $24, -0x28($29)
	bne $24, $0, DO_BODY_162
	j DO_END_164
	# JUMP DO_END_164
DO_END_164:
	# ASS, INT(i[sp-0x4]), 5
	li $5, 5
	# JUMP B_190
B_190:
	# JUMP B_191
B_191:
	# JUMP L_OR_EXP_195
L_OR_EXP_195:
	# JUMP L_AND_EXP_196
L_AND_EXP_196:
	# LT, INT(tmp_int_10035[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $27, 0x10($28)
	slt $25, $5, $27
	# JUMP AND_END_197
	sw $27, 0x10($28)
	sw $25, -0x2c($29)
AND_END_197:
	# ASS, INT(tmp_int_10036[temp]), INT(tmp_int_10035[sp-0x2c])
	lw $26, -0x2c($29)
	move $17, $26
	# Branch INT(tmp_int_10036[temp]) ? OR_END_198 : OR_199
	sw $17, -0x30($29)
	lw $18, -0x30($29)
	bne $18, $0, OR_END_198
OR_199:
	# JUMP L_AND_EXP_200
L_AND_EXP_200:
	# GT, INT(tmp_int_10037[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $20, 0x10($28)
	sgt $19, $5, $20
	# JUMP AND_END_201
	sw $20, 0x10($28)
	sw $19, -0x34($29)
AND_END_201:
	# OR, INT(tmp_int_10036[sp-0x30]), INT(tmp_int_10037[sp-0x34]), INT(tmp_int_10036[sp-0x30])
	lw $22, -0x34($29)
	lw $21, -0x30($29)
	or $21, $22, $21
	# Branch INT(tmp_int_10036[sp-0x30]) ? OR_END_198 : OR_202
	sw $21, -0x30($29)
	lw $23, -0x30($29)
	bne $23, $0, OR_END_198
OR_202:
	# JUMP OR_END_198
OR_END_198:
	# Branch INT(tmp_int_10036[sp-0x30]) ? DO_BODY_192 : DO_END_194
	lw $24, -0x30($29)
	bne $24, $0, DO_BODY_192
	j DO_END_194
	# JUMP DO_BODY_192
DO_BODY_192:
	# JUMP B_203
B_203:
	# Call FUNC_factorial; Params: INT(i[sp-0x4]); RET INT(tmp_int_10038[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -56
	sw $5, -0x4($4)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_factorial
	addiu $29, $29, 56
	lw $31, 0x0($29)
	move $27, $2
	lw $5, -0x4($29)
	# PRINT_INT INT(tmp_int_10038[temp])
	li $2, 1
	move $4, $27
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ADD, INT(tmp_int_10039[temp]), INT(i[sp-0x4]), 1
	addiu $25, $5, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_10039[temp])
	move $5, $25
	# JUMP L_OR_EXP_204
	j L_OR_EXP_204
	# JUMP B_215
	j B_215
L_OR_EXP_204:
	# JUMP L_AND_EXP_205
L_AND_EXP_205:
	# EQ, INT(tmp_int_10040[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $26, 0x10($28)
	seq $17, $5, $26
	# JUMP AND_END_206
	sw $26, 0x10($28)
	sw $17, -0x38($29)
AND_END_206:
	# JUMP OR_END_207
OR_END_207:
	# Branch INT(tmp_int_10040[sp-0x38]) ? IF_BODY_208 : IF_ELSE_210
	lw $18, -0x38($29)
	bne $18, $0, IF_BODY_208
	j IF_ELSE_210
IF_BODY_208:
	# JUMP B_211
B_211:
	# JUMP DO_END_194
	j DO_END_194
	# JUMP B_212
B_212:
	# JUMP IF_END_209
	j IF_END_209
IF_ELSE_210:
	# JUMP B_213
B_213:
	# JUMP DO_CHECK_193
	j DO_CHECK_193
	# JUMP B_214
B_214:
	# JUMP IF_END_209
IF_END_209:
	# JUMP B_215
B_215:
	# JUMP DO_CHECK_193
DO_CHECK_193:
	# JUMP L_OR_EXP_216
L_OR_EXP_216:
	# JUMP L_AND_EXP_217
L_AND_EXP_217:
	# LT, INT(tmp_int_10041[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $20, 0x10($28)
	slt $19, $5, $20
	# JUMP AND_END_218
	sw $20, 0x10($28)
	sw $19, -0x3c($29)
AND_END_218:
	# ASS, INT(tmp_int_10042[temp]), INT(tmp_int_10041[sp-0x3c])
	lw $22, -0x3c($29)
	move $21, $22
	# Branch INT(tmp_int_10042[temp]) ? OR_END_219 : OR_220
	sw $21, -0x40($29)
	lw $23, -0x40($29)
	bne $23, $0, OR_END_219
OR_220:
	# JUMP L_AND_EXP_221
L_AND_EXP_221:
	# GT, INT(tmp_int_10043[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $24, 0x10($28)
	sgt $27, $5, $24
	# JUMP AND_END_222
	sw $27, -0x44($29)
	sw $24, 0x10($28)
AND_END_222:
	# OR, INT(tmp_int_10042[sp-0x40]), INT(tmp_int_10043[sp-0x44]), INT(tmp_int_10042[sp-0x40])
	lw $25, -0x44($29)
	lw $26, -0x40($29)
	or $26, $25, $26
	# Branch INT(tmp_int_10042[sp-0x40]) ? OR_END_219 : OR_223
	sw $26, -0x40($29)
	lw $17, -0x40($29)
	bne $17, $0, OR_END_219
OR_223:
	# JUMP OR_END_219
OR_END_219:
	# Branch INT(tmp_int_10042[sp-0x40]) ? DO_BODY_192 : DO_END_194
	lw $18, -0x40($29)
	bne $18, $0, DO_BODY_192
	j DO_END_194
	# JUMP DO_END_194
DO_END_194:
	# JUMP L_OR_EXP_224
L_OR_EXP_224:
	# JUMP L_AND_EXP_225
L_AND_EXP_225:
	# EQ, INT(tmp_int_10044[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	lw $20, 0x10($28)
	seq $19, $5, $20
	# JUMP AND_END_226
	sw $19, -0x48($29)
	sw $20, 0x10($28)
AND_END_226:
	# JUMP OR_END_227
OR_END_227:
	# Branch INT(tmp_int_10044[sp-0x48]) ? IF_BODY_228 : IF_END_229
	lw $22, -0x48($29)
	bne $22, $0, IF_BODY_228
	j IF_END_229
IF_BODY_228:
	# JUMP B_230
B_230:
	# Call FUNC_return_one; Params: ; RET INT(tmp_int_10045[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -76
	move $29, $4
	jal FUNC_return_one
	addiu $29, $29, 76
	lw $31, 0x0($29)
	move $21, $2
	# PRINT_INT INT(tmp_int_10045[temp])
	li $2, 1
	move $4, $21
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# JUMP B_231
B_231:
	# JUMP IF_END_229
IF_END_229:
	# Call FUNC_A_plus_B; Params: 1, 1; RET INT(tmp_int_10046[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -76
	li $3, 1
	sw $3, -0x4($4)
	li $3, 1
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_A_plus_B
	addiu $29, $29, 76
	lw $31, 0x0($29)
	move $23, $2
	# PRINT_INT INT(tmp_int_10046[temp])
	li $2, 1
	move $4, $23
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# Call FUNC_output_a_plus_b; Params: 2, 2
	sw $31, 0x0($29)
	addiu $4, $29, -76
	li $3, 2
	sw $3, -0x4($4)
	li $3, 2
	sw $3, -0x8($4)
	move $29, $4
	jal FUNC_output_a_plus_b
	addiu $29, $29, 76
	lw $31, 0x0($29)
	# GETINT INT(i[sp-0x4])
	li $2, 5
	syscall
	move $5, $2
	# PRINT_INT INT(i[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# ASS, INT(i[sp-0x4]), 0
	li $5, 0
	# JUMP L_OR_EXP_235
L_OR_EXP_235:
	# JUMP L_AND_EXP_236
L_AND_EXP_236:
	# LT, INT(tmp_int_10047[temp]), INT(i[sp-0x4]), 10
	li $3, 10
	slt $27, $5, $3
	# JUMP AND_END_237
	sw $27, -0x4c($29)
AND_END_237:
	# JUMP OR_END_238
OR_END_238:
	# Branch INT(tmp_int_10047[sp-0x4c]) ? DO_BODY_232 : DO_END_234
	lw $24, -0x4c($29)
	bne $24, $0, DO_BODY_232
	j DO_END_234
	# JUMP DO_BODY_232
DO_BODY_232:
	# JUMP B_239
B_239:
	# ASS, INT(j[sp-0x8]), 0
	li $6, 0
	# JUMP L_OR_EXP_243
	j L_OR_EXP_243
	# JUMP B_253
	j B_253
L_OR_EXP_243:
	# JUMP L_AND_EXP_244
L_AND_EXP_244:
	# LT, INT(tmp_int_10048[temp]), INT(j[sp-0x8]), 10
	li $3, 10
	slt $25, $6, $3
	# JUMP AND_END_245
	sw $25, -0x50($29)
AND_END_245:
	# JUMP OR_END_246
OR_END_246:
	# Branch INT(tmp_int_10048[sp-0x50]) ? DO_BODY_240 : DO_END_242
	lw $26, -0x50($29)
	bne $26, $0, DO_BODY_240
	j DO_END_242
	# JUMP DO_BODY_240
DO_BODY_240:
	# JUMP B_247
B_247:
	# MUL, INT(tmp_int_10049[temp]), INT(j[sp-0x8]), 4
	sll $17, $6, 2
	# ADD, INT(tmp_int_10049[temp]), INT(tmp_int_10049[temp]), 0
	addiu $17, $17, 0
	# MUL, INT(tmp_int_10050[temp]), INT(i[sp-0x4]), 40
	sll $18, $5, 5
	sll $3, $5, 3
	addu $18, $18, $3
	# ADD, INT(tmp_int_10050[temp]), INT(tmp_int_10050[temp]), INT(tmp_int_10049[temp])
	addu $18, $18, $17
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_10050[temp]))->POINTER(tmp_pointer_3255[temp])
	addiu $3, $28, 436
	addu $19, $3, $18
	# ADD, INT(tmp_int_10051[temp]), INT(i[sp-0x4]), 1
	addiu $20, $5, 1
	# STORE POINTER(tmp_pointer_3255[temp]), INT(tmp_int_10051[temp])
	sw $20, 0x0($19)
	# MUL, INT(tmp_int_10052[temp]), INT(j[sp-0x8]), 4
	sll $22, $6, 2
	# ADD, INT(tmp_int_10052[temp]), INT(tmp_int_10052[temp]), 0
	addiu $22, $22, 0
	# MUL, INT(tmp_int_10053[temp]), INT(i[sp-0x4]), 40
	sll $21, $5, 5
	sll $3, $5, 3
	addu $21, $21, $3
	# ADD, INT(tmp_int_10053[temp]), INT(tmp_int_10053[temp]), INT(tmp_int_10052[temp])
	addu $21, $21, $22
	# OFFSET (ARRAY(matrix_B[data+0x344])+INT(tmp_int_10053[temp]))->POINTER(tmp_pointer_3256[temp])
	addiu $3, $28, 836
	addu $23, $3, $21
	# ADD, INT(tmp_int_10054[temp]), INT(j[sp-0x8]), 1
	addiu $27, $6, 1
	# STORE POINTER(tmp_pointer_3256[temp]), INT(tmp_int_10054[temp])
	sw $27, 0x0($23)
	# ADD, INT(tmp_int_10055[temp]), INT(j[sp-0x8]), 1
	addiu $24, $6, 1
	# ASS, INT(j[sp-0x8]), INT(tmp_int_10055[temp])
	move $6, $24
	# JUMP B_248
B_248:
	# JUMP DO_CHECK_241
DO_CHECK_241:
	# JUMP L_OR_EXP_249
L_OR_EXP_249:
	# JUMP L_AND_EXP_250
L_AND_EXP_250:
	# LT, INT(tmp_int_10056[temp]), INT(j[sp-0x8]), 10
	li $3, 10
	slt $25, $6, $3
	# JUMP AND_END_251
	sw $25, -0x54($29)
AND_END_251:
	# JUMP OR_END_252
OR_END_252:
	# Branch INT(tmp_int_10056[sp-0x54]) ? DO_BODY_240 : DO_END_242
	lw $26, -0x54($29)
	bne $26, $0, DO_BODY_240
	j DO_END_242
	# JUMP DO_END_242
DO_END_242:
	# ADD, INT(tmp_int_10057[temp]), INT(i[sp-0x4]), 1
	addiu $17, $5, 1
	# ASS, INT(i[sp-0x4]), INT(tmp_int_10057[temp])
	move $5, $17
	# JUMP B_253
B_253:
	# JUMP DO_CHECK_233
DO_CHECK_233:
	# JUMP L_OR_EXP_254
L_OR_EXP_254:
	# JUMP L_AND_EXP_255
L_AND_EXP_255:
	# LT, INT(tmp_int_10058[temp]), INT(i[sp-0x4]), 10
	li $3, 10
	slt $18, $5, $3
	# JUMP AND_END_256
	sw $18, -0x58($29)
AND_END_256:
	# JUMP OR_END_257
OR_END_257:
	# Branch INT(tmp_int_10058[sp-0x58]) ? DO_BODY_232 : DO_END_234
	lw $19, -0x58($29)
	bne $19, $0, DO_BODY_232
	j DO_END_234
	# JUMP DO_END_234
DO_END_234:
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+0)->POINTER(tmp_pointer_3257[temp])
	addiu $20, $28, 436
	# OFFSET (ARRAY(matrix_B[data+0x344])+0)->POINTER(tmp_pointer_3258[temp])
	addiu $22, $28, 836
	# MUL, INT(tmp_int_10059[temp]), 1, 4
	li $21, 4
	# ADD, INT(tmp_int_10059[temp]), INT(tmp_int_10059[temp]), 0
	addiu $21, $21, 0
	# MUL, INT(tmp_int_10060[temp]), 1, 40
	li $23, 40
	# ADD, INT(tmp_int_10060[temp]), INT(tmp_int_10060[temp]), INT(tmp_int_10059[temp])
	addu $23, $23, $21
	# OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_10060[temp]))->POINTER(tmp_pointer_3259[temp])
	addiu $3, $28, 436
	addu $27, $3, $23
	# LOAD POINTER(tmp_pointer_3259[temp]), INT(tmp_int_10061[temp])
	lw $24, 0x0($27)
	# Call FUNC_matrixMulti; Params: POINTER(tmp_pointer_3257[temp]), POINTER(tmp_pointer_3258[temp]), INT(tmp_int_10061[temp]); RET INT(tmp_int_10062[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -104
	sw $20, -0x4($4)
	sw $22, -0x8($4)
	sw $24, -0xc($4)
	move $29, $4
	jal FUNC_matrixMulti
	addiu $29, $29, 104
	lw $31, 0x0($29)
	move $25, $2
	# PRINT_INT INT(tmp_int_10062[temp])
	li $2, 1
	move $4, $25
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
