###### GLOBAL STRING ######
STR_1 : m = 
STR_2 : , n = 
STR_3 : \n
STR_4 :  
STR_5 : assign to temp[
STR_6 : ]\n
STR_7 : m + 1 is 
STR_8 : , n is 
STR_9 : 20373354\n

###### GLOBAL ARRAY ######
[0x0]array wzy: 2 0 3 7 3 3 5 4
[0x20]array id: 2 0 0 6 1 3
[0x38]array zeroArray: 0 0 0
[0x44]array useless: 0 0 0 0

###### GLOBAL VAR ######

###### TEXT ######
JUMP FUNC_main
# func Permutation : stack size 0x14
# param: INT(m[sp-0x4]), INT(n[sp-0x8]), ARRAY(arr[sp-0xc]), ARRAY(temp[sp-0x10])
FUNC_Permutation:
	PRINT_STR STR_1
	PRINT_INT INT(m[sp-0x4])
	PRINT_STR STR_2
	PRINT_INT INT(n[sp-0x8])
	PRINT_STR STR_3
	DEF, INT(i[sp-0x14]), 0
	JUMP L_OR_EXP_0
L_OR_EXP_0:
	JUMP L_AND_EXP_2
L_AND_EXP_2:
	GE, INT(tmp_int_0[temp]), INT(m[sp-0x4]), INT(n[sp-0x8])
	ASS, INT(tmp_int_1[temp]), INT(tmp_int_0[temp])
	Branch INT(tmp_int_0[temp]) ? AND_4 : AND_END_3
AND_4:
	JUMP AND_END_3
AND_END_3:
	ASS, INT(tmp_int_2[temp]), INT(tmp_int_1[temp])
	Branch INT(tmp_int_2[temp]) ? OR_END_1 : OR_5
OR_5:
	JUMP OR_END_1
OR_END_1:
	Branch INT(tmp_int_2[temp]) ? IF_BODY_6 : IF_ELSE_8
IF_BODY_6:
	JUMP B_9
B_9:
	JUMP WHILE_10
	JUMP B_21
WHILE_10:
	JUMP L_OR_EXP_13
L_OR_EXP_13:
	JUMP L_AND_EXP_15
L_AND_EXP_15:
	SUB, INT(tmp_int_4[temp]), INT(n[sp-0x8]), 1
	LT, INT(tmp_int_3[temp]), INT(i[sp-0x14]), INT(tmp_int_4[temp])
	ASS, INT(tmp_int_5[temp]), INT(tmp_int_3[temp])
	Branch INT(tmp_int_3[temp]) ? AND_17 : AND_END_16
AND_17:
	JUMP AND_END_16
AND_END_16:
	ASS, INT(tmp_int_6[temp]), INT(tmp_int_5[temp])
	Branch INT(tmp_int_6[temp]) ? OR_END_14 : OR_18
OR_18:
	JUMP OR_END_14
OR_END_14:
	Branch INT(tmp_int_6[temp]) ? WHILE_BODY_11 : WHILE_END_12
WHILE_BODY_11:
	JUMP B_19
B_19:
	MUL, INT(tmp_int_7[temp]), INT(i[sp-0x14]), 4
	ADD, INT(tmp_int_7[temp]), INT(tmp_int_7[temp]), 0
	OFFSET (12+INT(tmp_int_7[temp]))->POINTER(tmp_pointer_0[temp])
	LOAD POINTER(tmp_pointer_0[temp]), INT(tmp_int_8[temp])
	PRINT_INT INT(tmp_int_8[temp])
	PRINT_STR STR_4
	ADD, INT(tmp_int_9[temp]), INT(i[sp-0x14]), 1
	ASS, INT(i[sp-0x14]), INT(tmp_int_9[temp])
	JUMP B_20
B_20:
	JUMP WHILE_10
WHILE_END_12:
	MUL, INT(tmp_int_10[temp]), INT(i[sp-0x14]), 4
	ADD, INT(tmp_int_10[temp]), INT(tmp_int_10[temp]), 0
	OFFSET (12+INT(tmp_int_10[temp]))->POINTER(tmp_pointer_1[temp])
	LOAD POINTER(tmp_pointer_1[temp]), INT(tmp_int_11[temp])
	PRINT_INT INT(tmp_int_11[temp])
	PRINT_STR STR_3
	JUMP B_21
B_21:
	JUMP IF_END_7
IF_ELSE_8:
	JUMP B_22
B_22:
	JUMP WHILE_23
	JUMP B_44
WHILE_23:
	JUMP L_OR_EXP_26
L_OR_EXP_26:
	JUMP L_AND_EXP_28
L_AND_EXP_28:
	LT, INT(tmp_int_12[temp]), INT(i[sp-0x14]), INT(n[sp-0x8])
	ASS, INT(tmp_int_13[temp]), INT(tmp_int_12[temp])
	Branch INT(tmp_int_12[temp]) ? AND_30 : AND_END_29
AND_30:
	JUMP AND_END_29
AND_END_29:
	ASS, INT(tmp_int_14[temp]), INT(tmp_int_13[temp])
	Branch INT(tmp_int_14[temp]) ? OR_END_27 : OR_31
OR_31:
	JUMP OR_END_27
OR_END_27:
	Branch INT(tmp_int_14[temp]) ? WHILE_BODY_24 : WHILE_END_25
WHILE_BODY_24:
	JUMP B_32
B_32:
	JUMP L_OR_EXP_33
	JUMP B_43
L_OR_EXP_33:
	JUMP L_AND_EXP_35
L_AND_EXP_35:
	MUL, INT(tmp_int_15[temp]), INT(i[sp-0x14]), 4
	ADD, INT(tmp_int_15[temp]), INT(tmp_int_15[temp]), 0
	OFFSET (16+INT(tmp_int_15[temp]))->POINTER(tmp_pointer_2[temp])
	LOAD POINTER(tmp_pointer_2[temp]), INT(tmp_int_16[temp])
	EQ, INT(tmp_int_17[temp]), INT(tmp_int_16[temp]), 0
	ASS, INT(tmp_int_18[temp]), INT(tmp_int_17[temp])
	Branch INT(tmp_int_17[temp]) ? AND_37 : AND_END_36
AND_37:
	JUMP AND_END_36
AND_END_36:
	ASS, INT(tmp_int_19[temp]), INT(tmp_int_18[temp])
	Branch INT(tmp_int_19[temp]) ? OR_END_34 : OR_38
OR_38:
	JUMP OR_END_34
OR_END_34:
	Branch INT(tmp_int_19[temp]) ? IF_BODY_39 : IF_END_40
IF_BODY_39:
	JUMP B_41
B_41:
	PRINT_STR STR_5
	PRINT_INT INT(i[sp-0x14])
	PRINT_STR STR_6
	MUL, INT(tmp_int_20[temp]), INT(i[sp-0x14]), 4
	ADD, INT(tmp_int_20[temp]), INT(tmp_int_20[temp]), 0
	OFFSET (16+INT(tmp_int_20[temp]))->POINTER(tmp_pointer_3[temp])
	STORE POINTER(tmp_pointer_3[temp]), 1
	MUL, INT(tmp_int_21[temp]), INT(m[sp-0x4]), 4
	ADD, INT(tmp_int_21[temp]), INT(tmp_int_21[temp]), 0
	OFFSET (12+INT(tmp_int_21[temp]))->POINTER(tmp_pointer_4[temp])
	ADD, INT(tmp_int_22[temp]), INT(i[sp-0x14]), 1
	STORE POINTER(tmp_pointer_4[temp]), INT(tmp_int_22[temp])
	ADD, INT(tmp_int_23[temp]), INT(m[sp-0x4]), 1
	PRINT_STR STR_7
	PRINT_INT INT(tmp_int_23[temp])
	PRINT_STR STR_8
	PRINT_INT INT(n[sp-0x8])
	PRINT_STR STR_3
	ADD, INT(tmp_int_24[temp]), INT(m[sp-0x4]), 1
	OFFSET (12+0)->POINTER(tmp_pointer_5[temp])
	OFFSET (16+0)->POINTER(tmp_pointer_6[temp])
	Call FUNC_Permutation; Params: INT(tmp_int_24[temp]), INT(n[sp-0x8]), POINTER(tmp_pointer_5[temp]), POINTER(tmp_pointer_6[temp])
	MUL, INT(tmp_int_25[temp]), INT(i[sp-0x14]), 4
	ADD, INT(tmp_int_25[temp]), INT(tmp_int_25[temp]), 0
	OFFSET (16+INT(tmp_int_25[temp]))->POINTER(tmp_pointer_7[temp])
	STORE POINTER(tmp_pointer_7[temp]), 0
	JUMP B_42
B_42:
	JUMP IF_END_40
IF_END_40:
	ADD, INT(tmp_int_26[temp]), INT(i[sp-0x14]), 1
	ASS, INT(i[sp-0x14]), INT(tmp_int_26[temp])
	JUMP B_43
B_43:
	JUMP WHILE_23
WHILE_END_25:
	JUMP B_44
B_44:
	JUMP IF_END_7
IF_END_7:
	RETURN VOID
# func main : stack size 0x80
# param: 
FUNC_main:
	DEF, INT(n[sp-0x7c]), 0
	GETINT INT(n[sp-0x7c])
	PRINT_STR STR_9
	MUL, INT(tmp_int_27[temp]), 0, 4
	ADD, INT(tmp_int_27[temp]), INT(tmp_int_27[temp]), 0
	OFFSET (56+INT(tmp_int_27[temp]))->POINTER(tmp_pointer_8[temp])
	LOAD POINTER(tmp_pointer_8[temp]), INT(tmp_int_28[temp])
	DEF, INT(i[sp-0x80]), INT(tmp_int_28[temp])
	MUL, INT(tmp_int_29[temp]), 0, 4
	ADD, INT(tmp_int_29[temp]), INT(tmp_int_29[temp]), 0
	MUL, INT(tmp_int_30[temp]), 0, 8
	ADD, INT(tmp_int_30[temp]), INT(tmp_int_30[temp]), INT(tmp_int_29[temp])
	OFFSET (68+INT(tmp_int_30[temp]))->POINTER(tmp_pointer_9[temp])
	LOAD POINTER(tmp_pointer_9[temp]), INT(tmp_int_31[temp])
	ASS, INT(i[sp-0x80]), INT(tmp_int_31[temp])
	JUMP WHILE_46
WHILE_46:
	JUMP L_OR_EXP_49
L_OR_EXP_49:
	JUMP L_AND_EXP_51
L_AND_EXP_51:
	LT, INT(tmp_int_32[temp]), INT(i[sp-0x80]), INT(n[sp-0x7c])
	ASS, INT(tmp_int_33[temp]), INT(tmp_int_32[temp])
	Branch INT(tmp_int_32[temp]) ? AND_53 : AND_END_52
AND_53:
	JUMP AND_END_52
AND_END_52:
	ASS, INT(tmp_int_34[temp]), INT(tmp_int_33[temp])
	Branch INT(tmp_int_34[temp]) ? OR_END_50 : OR_54
OR_54:
	JUMP OR_END_50
OR_END_50:
	Branch INT(tmp_int_34[temp]) ? WHILE_BODY_47 : WHILE_END_48
WHILE_BODY_47:
	JUMP B_55
B_55:
	MUL, INT(tmp_int_35[temp]), INT(i[sp-0x80]), 4
	ADD, INT(tmp_int_35[temp]), INT(tmp_int_35[temp]), 0
	OFFSET (120+INT(tmp_int_35[temp]))->POINTER(tmp_pointer_10[temp])
	STORE POINTER(tmp_pointer_10[temp]), 0
	ADD, INT(tmp_int_36[temp]), INT(i[sp-0x80]), 1
	ASS, INT(i[sp-0x80]), INT(tmp_int_36[temp])
	JUMP B_56
B_56:
	JUMP WHILE_46
WHILE_END_48:
	OFFSET (60+0)->POINTER(tmp_pointer_11[temp])
	OFFSET (120+0)->POINTER(tmp_pointer_12[temp])
	Call FUNC_Permutation; Params: 0, INT(n[sp-0x7c]), POINTER(tmp_pointer_11[temp]), POINTER(tmp_pointer_12[temp])
	RETURN 0
