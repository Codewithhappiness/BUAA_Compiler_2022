###### GLOBAL STRING ######
STR_1 : 19373630\n
STR_2 : \n

###### GLOBAL ARRAY ######
[0x1c]array const_array: 0
[0x20]array const_double: 0
[0x24]array array: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[0x1b4]array matrix_A: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[0x344]array matrix_B: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

###### GLOBAL VAR ######
[0x0]const_a: 1
[0x4]const_b: 2
[0x8]const_c: 2
[0xc]const_d: 3
[0x10]int_c: 3
[0x14]int_d: 0
[0x18]int_e: 2

###### TEXT ######
JUMP FUNC_main
# func output_id : stack size 0x0
# param: 
FUNC_output_id:
	JUMP L_OR_EXP_0
L_OR_EXP_0:
	JUMP L_AND_EXP_1
L_AND_EXP_1:
	NOT, INT(tmp_int_9949[temp]), 0
	ASS, INT(tmp_int_9950[temp]), INT(tmp_int_9949[temp])
	Branch INT(tmp_int_9949[temp]) ? AND_3 : AND_END_2
AND_3:
	AND, INT(tmp_int_9950[temp]), 0, INT(tmp_int_9950[temp])
	Branch INT(tmp_int_9950[temp]) ? AND_4 : AND_END_2
AND_4:
	JUMP AND_END_2
AND_END_2:
	ASS, INT(tmp_int_9951[temp]), INT(tmp_int_9950[temp])
	Branch INT(tmp_int_9951[temp]) ? OR_END_5 : OR_6
OR_6:
	JUMP L_AND_EXP_7
L_AND_EXP_7:
	JUMP AND_END_8
AND_END_8:
	OR, INT(tmp_int_9951[temp]), 1, INT(tmp_int_9951[temp])
	Branch INT(tmp_int_9951[temp]) ? OR_END_5 : OR_9
OR_9:
	JUMP OR_END_5
OR_END_5:
	Branch INT(tmp_int_9951[temp]) ? IF_BODY_10 : IF_END_11
IF_BODY_10:
	JUMP B_12
B_12:
	PRINT_STR STR_1
	JUMP B_13
B_13:
	JUMP IF_END_11
IF_END_11:
	RETURN VOID
# func output_a_plus_b : stack size 0x8
# param: INT(a[sp-0x4]), INT(b[sp-0x8])
FUNC_output_a_plus_b:
	ADD, INT(tmp_int_9952[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	PRINT_INT INT(tmp_int_9952[temp])
	PRINT_STR STR_2
	RETURN VOID
# func A_plus_B : stack size 0x8
# param: INT(a[sp-0x4]), INT(b[sp-0x8])
FUNC_A_plus_B:
	ADD, INT(tmp_int_9953[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	RETURN INT(tmp_int_9953[temp])
# func return_one : stack size 0x0
# param: 
FUNC_return_one:
	RETURN 1
# func factorial : stack size 0x4
# param: INT(n[sp-0x4])
FUNC_factorial:
	JUMP L_OR_EXP_18
L_OR_EXP_18:
	JUMP L_AND_EXP_19
L_AND_EXP_19:
	MUL, INT(tmp_int_9954[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_9954[temp]), INT(tmp_int_9954[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9954[temp]))->POINTER(tmp_pointer_3240[temp])
	LOAD POINTER(tmp_pointer_3240[temp]), INT(tmp_int_9955[temp])
	NEQ, INT(tmp_int_9956[temp]), INT(tmp_int_9955[temp]), 0
	JUMP AND_END_20
AND_END_20:
	JUMP OR_END_21
OR_END_21:
	Branch INT(tmp_int_9956[temp]) ? IF_BODY_22 : IF_ELSE_24
IF_BODY_22:
	JUMP B_25
B_25:
	MUL, INT(tmp_int_9957[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_9957[temp]), INT(tmp_int_9957[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9957[temp]))->POINTER(tmp_pointer_3241[temp])
	LOAD POINTER(tmp_pointer_3241[temp]), INT(tmp_int_9958[temp])
	RETURN INT(tmp_int_9958[temp])
	JUMP B_26
B_26:
	JUMP IF_END_23
IF_ELSE_24:
	JUMP B_27
B_27:
	SUB, INT(tmp_int_9960[temp]), INT(n[sp-0x4]), 1
	MUL, INT(tmp_int_9959[temp]), INT(tmp_int_9960[temp]), 4
	ADD, INT(tmp_int_9959[temp]), INT(tmp_int_9959[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9959[temp]))->POINTER(tmp_pointer_3242[temp])
	SUB, INT(tmp_int_9961[temp]), INT(n[sp-0x4]), 1
	Call FUNC_factorial; Params: INT(tmp_int_9961[temp]); RET INT(tmp_int_9962[temp])
	STORE POINTER(tmp_pointer_3242[temp]), INT(tmp_int_9962[temp])
	MUL, INT(tmp_int_9963[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_9963[temp]), INT(tmp_int_9963[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9963[temp]))->POINTER(tmp_pointer_3243[temp])
	SUB, INT(tmp_int_9965[temp]), INT(n[sp-0x4]), 1
	MUL, INT(tmp_int_9964[temp]), INT(tmp_int_9965[temp]), 4
	ADD, INT(tmp_int_9964[temp]), INT(tmp_int_9964[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9964[temp]))->POINTER(tmp_pointer_3244[temp])
	LOAD POINTER(tmp_pointer_3244[temp]), INT(tmp_int_9966[temp])
	MUL, INT(tmp_int_9967[temp]), INT(tmp_int_9966[temp]), INT(n[sp-0x4])
	STORE POINTER(tmp_pointer_3243[temp]), INT(tmp_int_9967[temp])
	MUL, INT(tmp_int_9968[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_9968[temp]), INT(tmp_int_9968[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_9968[temp]))->POINTER(tmp_pointer_3245[temp])
	LOAD POINTER(tmp_pointer_3245[temp]), INT(tmp_int_9969[temp])
	RETURN INT(tmp_int_9969[temp])
	JUMP B_28
B_28:
	JUMP IF_END_23
IF_END_23:
	RETURN 0
# func isPrime : stack size 0x8
# param: INT(n[sp-0x4])
FUNC_isPrime:
	DEF, INT(i[sp-0x8]), 3
	JUMP L_OR_EXP_30
L_OR_EXP_30:
	JUMP L_AND_EXP_31
L_AND_EXP_31:
	LE, INT(tmp_int_9970[temp]), INT(n[sp-0x4]), 0
	JUMP AND_END_32
AND_END_32:
	JUMP OR_END_33
OR_END_33:
	Branch INT(tmp_int_9970[temp]) ? IF_BODY_34 : IF_END_35
IF_BODY_34:
	JUMP B_36
B_36:
	RETURN 0
	JUMP B_37
B_37:
	JUMP IF_END_35
IF_END_35:
	JUMP L_OR_EXP_38
L_OR_EXP_38:
	JUMP L_AND_EXP_39
L_AND_EXP_39:
	MOD, INT(tmp_int_9971[temp]), INT(n[sp-0x4]), 2
	EQ, INT(tmp_int_9972[temp]), INT(tmp_int_9971[temp]), 0
	JUMP AND_END_40
AND_END_40:
	JUMP OR_END_41
OR_END_41:
	Branch INT(tmp_int_9972[temp]) ? IF_BODY_42 : IF_END_43
IF_BODY_42:
	JUMP B_44
B_44:
	RETURN 0
	JUMP B_45
B_45:
	JUMP IF_END_43
IF_END_43:
	JUMP L_OR_EXP_49
L_OR_EXP_49:
	JUMP L_AND_EXP_50
L_AND_EXP_50:
	DIV, INT(tmp_int_9974[temp]), INT(n[sp-0x4]), 2
	LT, INT(tmp_int_9973[temp]), INT(i[sp-0x8]), INT(tmp_int_9974[temp])
	JUMP AND_END_51
AND_END_51:
	JUMP OR_END_52
OR_END_52:
	Branch INT(tmp_int_9973[temp]) ? DO_BODY_46 : DO_END_48
	JUMP DO_BODY_46
DO_BODY_46:
	JUMP B_53
B_53:
	JUMP L_OR_EXP_54
	JUMP B_62
L_OR_EXP_54:
	JUMP L_AND_EXP_55
L_AND_EXP_55:
	MOD, INT(tmp_int_9975[temp]), INT(n[sp-0x4]), INT(i[sp-0x8])
	EQ, INT(tmp_int_9976[temp]), INT(tmp_int_9975[temp]), 0
	JUMP AND_END_56
AND_END_56:
	JUMP OR_END_57
OR_END_57:
	Branch INT(tmp_int_9976[temp]) ? IF_BODY_58 : IF_END_59
IF_BODY_58:
	JUMP B_60
B_60:
	RETURN 0
	JUMP B_61
B_61:
	JUMP IF_END_59
IF_END_59:
	ADD, INT(tmp_int_9977[temp]), INT(i[sp-0x8]), 2
	ASS, INT(i[sp-0x8]), INT(tmp_int_9977[temp])
	JUMP B_62
B_62:
	JUMP DO_CHECK_47
DO_CHECK_47:
	JUMP L_OR_EXP_63
L_OR_EXP_63:
	JUMP L_AND_EXP_64
L_AND_EXP_64:
	DIV, INT(tmp_int_9979[temp]), INT(n[sp-0x4]), 2
	LT, INT(tmp_int_9978[temp]), INT(i[sp-0x8]), INT(tmp_int_9979[temp])
	JUMP AND_END_65
AND_END_65:
	JUMP OR_END_66
OR_END_66:
	Branch INT(tmp_int_9978[temp]) ? DO_BODY_46 : DO_END_48
	JUMP DO_END_48
DO_END_48:
	ADD, INT(tmp_int_9980[temp]), 1, 1
	DIV, INT(tmp_int_9982[temp]), 1, 1
	SUB, INT(tmp_int_9981[temp]), INT(tmp_int_9980[temp]), INT(tmp_int_9982[temp])
	RETURN INT(tmp_int_9981[temp])
# func sumMatrix : stack size 0x10
# param: ARRAY(array_f[sp-0x4])
FUNC_sumMatrix:
	DEF, INT(i[sp-0x8]), 0
	DEF, INT(j[sp-0xc]), 0
	DEF, INT(sum[sp-0x10]), 0
	JUMP L_OR_EXP_71
L_OR_EXP_71:
	JUMP L_AND_EXP_72
L_AND_EXP_72:
	LT, INT(tmp_int_9983[temp]), INT(i[sp-0x8]), 10
	JUMP AND_END_73
AND_END_73:
	JUMP OR_END_74
OR_END_74:
	Branch INT(tmp_int_9983[temp]) ? DO_BODY_68 : DO_END_70
	JUMP DO_BODY_68
DO_BODY_68:
	JUMP B_75
B_75:
	ASS, INT(j[sp-0xc]), 0
	JUMP L_OR_EXP_79
	JUMP B_89
L_OR_EXP_79:
	JUMP L_AND_EXP_80
L_AND_EXP_80:
	LT, INT(tmp_int_9984[temp]), INT(j[sp-0xc]), 10
	JUMP AND_END_81
AND_END_81:
	JUMP OR_END_82
OR_END_82:
	Branch INT(tmp_int_9984[temp]) ? DO_BODY_76 : DO_END_78
	JUMP DO_BODY_76
DO_BODY_76:
	JUMP B_83
B_83:
	MUL, INT(tmp_int_9986[temp]), INT(j[sp-0xc]), 4
	ADD, INT(tmp_int_9986[temp]), INT(tmp_int_9986[temp]), 0
	MUL, INT(tmp_int_9987[temp]), INT(i[sp-0x8]), 40
	ADD, INT(tmp_int_9987[temp]), INT(tmp_int_9987[temp]), INT(tmp_int_9986[temp])
	OFFSET (ARRAY(array_f[sp-0x4])+INT(tmp_int_9987[temp]))->POINTER(tmp_pointer_3246[temp])
	LOAD POINTER(tmp_pointer_3246[temp]), INT(tmp_int_9988[temp])
	ADD, INT(tmp_int_9985[temp]), INT(sum[sp-0x10]), INT(tmp_int_9988[temp])
	ASS, INT(sum[sp-0x10]), INT(tmp_int_9985[temp])
	ADD, INT(tmp_int_9989[temp]), INT(j[sp-0xc]), 1
	ASS, INT(j[sp-0xc]), INT(tmp_int_9989[temp])
	JUMP B_84
B_84:
	JUMP DO_CHECK_77
DO_CHECK_77:
	JUMP L_OR_EXP_85
L_OR_EXP_85:
	JUMP L_AND_EXP_86
L_AND_EXP_86:
	LT, INT(tmp_int_9990[temp]), INT(j[sp-0xc]), 10
	JUMP AND_END_87
AND_END_87:
	JUMP OR_END_88
OR_END_88:
	Branch INT(tmp_int_9990[temp]) ? DO_BODY_76 : DO_END_78
	JUMP DO_END_78
DO_END_78:
	ADD, INT(tmp_int_9991[temp]), INT(i[sp-0x8]), 1
	ASS, INT(i[sp-0x8]), INT(tmp_int_9991[temp])
	JUMP B_89
B_89:
	JUMP DO_CHECK_69
DO_CHECK_69:
	JUMP L_OR_EXP_90
L_OR_EXP_90:
	JUMP L_AND_EXP_91
L_AND_EXP_91:
	LT, INT(tmp_int_9992[temp]), INT(i[sp-0x8]), 10
	JUMP AND_END_92
AND_END_92:
	JUMP OR_END_93
OR_END_93:
	Branch INT(tmp_int_9992[temp]) ? DO_BODY_68 : DO_END_70
	JUMP DO_END_70
DO_END_70:
	RETURN INT(sum[sp-0x10])
# func matrixMulti : stack size 0x1a8
# param: ARRAY(matrix_a[sp-0x4]), ARRAY(matrix_b[sp-0x8]), INT(row[sp-0xc])
FUNC_matrixMulti:
	DEF, INT(i[sp-0x1a0]), 0
	DEF, INT(j[sp-0x1a4]), 0
	DEF, INT(k[sp-0x1a8]), 0
	JUMP L_OR_EXP_98
L_OR_EXP_98:
	JUMP L_AND_EXP_99
L_AND_EXP_99:
	LT, INT(tmp_int_9993[temp]), INT(i[sp-0x1a0]), 10
	JUMP AND_END_100
AND_END_100:
	JUMP OR_END_101
OR_END_101:
	Branch INT(tmp_int_9993[temp]) ? DO_BODY_95 : DO_END_97
	JUMP DO_BODY_95
DO_BODY_95:
	JUMP B_102
B_102:
	ASS, INT(j[sp-0x1a4]), 0
	JUMP L_OR_EXP_106
	JUMP B_129
L_OR_EXP_106:
	JUMP L_AND_EXP_107
L_AND_EXP_107:
	LT, INT(tmp_int_9994[temp]), INT(j[sp-0x1a4]), 10
	JUMP AND_END_108
AND_END_108:
	JUMP OR_END_109
OR_END_109:
	Branch INT(tmp_int_9994[temp]) ? DO_BODY_103 : DO_END_105
	JUMP DO_BODY_103
DO_BODY_103:
	JUMP B_110
B_110:
	ASS, INT(k[sp-0x1a8]), 0
	MUL, INT(tmp_int_9995[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_9995[temp]), INT(tmp_int_9995[temp]), 0
	MUL, INT(tmp_int_9996[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_9996[temp]), INT(tmp_int_9996[temp]), INT(tmp_int_9995[temp])
	OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_9996[temp]))->POINTER(tmp_pointer_3247[temp])
	STORE POINTER(tmp_pointer_3247[temp]), 0
	JUMP L_OR_EXP_114
	JUMP B_124
L_OR_EXP_114:
	JUMP L_AND_EXP_115
L_AND_EXP_115:
	LT, INT(tmp_int_9997[temp]), INT(k[sp-0x1a8]), 10
	JUMP AND_END_116
AND_END_116:
	JUMP OR_END_117
OR_END_117:
	Branch INT(tmp_int_9997[temp]) ? DO_BODY_111 : DO_END_113
	JUMP DO_BODY_111
DO_BODY_111:
	JUMP B_118
B_118:
	MUL, INT(tmp_int_9998[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_9998[temp]), INT(tmp_int_9998[temp]), 0
	MUL, INT(tmp_int_9999[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_9999[temp]), INT(tmp_int_9999[temp]), INT(tmp_int_9998[temp])
	OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_9999[temp]))->POINTER(tmp_pointer_3248[temp])
	MUL, INT(tmp_int_10000[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_10000[temp]), INT(tmp_int_10000[temp]), 0
	MUL, INT(tmp_int_10001[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_10001[temp]), INT(tmp_int_10001[temp]), INT(tmp_int_10000[temp])
	OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_10001[temp]))->POINTER(tmp_pointer_3249[temp])
	LOAD POINTER(tmp_pointer_3249[temp]), INT(tmp_int_10002[temp])
	MUL, INT(tmp_int_10004[temp]), INT(k[sp-0x1a8]), 4
	ADD, INT(tmp_int_10004[temp]), INT(tmp_int_10004[temp]), 0
	MUL, INT(tmp_int_10005[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_10005[temp]), INT(tmp_int_10005[temp]), INT(tmp_int_10004[temp])
	OFFSET (ARRAY(matrix_a[sp-0x4])+INT(tmp_int_10005[temp]))->POINTER(tmp_pointer_3250[temp])
	LOAD POINTER(tmp_pointer_3250[temp]), INT(tmp_int_10006[temp])
	MUL, INT(tmp_int_10008[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_10008[temp]), INT(tmp_int_10008[temp]), 0
	MUL, INT(tmp_int_10009[temp]), INT(k[sp-0x1a8]), 40
	ADD, INT(tmp_int_10009[temp]), INT(tmp_int_10009[temp]), INT(tmp_int_10008[temp])
	OFFSET (ARRAY(matrix_b[sp-0x8])+INT(tmp_int_10009[temp]))->POINTER(tmp_pointer_3251[temp])
	LOAD POINTER(tmp_pointer_3251[temp]), INT(tmp_int_10010[temp])
	MUL, INT(tmp_int_10007[temp]), INT(tmp_int_10006[temp]), INT(tmp_int_10010[temp])
	ADD, INT(tmp_int_10003[temp]), INT(tmp_int_10002[temp]), INT(tmp_int_10007[temp])
	STORE POINTER(tmp_pointer_3248[temp]), INT(tmp_int_10003[temp])
	ADD, INT(tmp_int_10011[temp]), INT(k[sp-0x1a8]), 1
	ASS, INT(k[sp-0x1a8]), INT(tmp_int_10011[temp])
	JUMP B_119
B_119:
	JUMP DO_CHECK_112
DO_CHECK_112:
	JUMP L_OR_EXP_120
L_OR_EXP_120:
	JUMP L_AND_EXP_121
L_AND_EXP_121:
	LT, INT(tmp_int_10012[temp]), INT(k[sp-0x1a8]), 10
	JUMP AND_END_122
AND_END_122:
	JUMP OR_END_123
OR_END_123:
	Branch INT(tmp_int_10012[temp]) ? DO_BODY_111 : DO_END_113
	JUMP DO_END_113
DO_END_113:
	ADD, INT(tmp_int_10013[temp]), INT(j[sp-0x1a4]), 1
	ASS, INT(j[sp-0x1a4]), INT(tmp_int_10013[temp])
	JUMP B_124
B_124:
	JUMP DO_CHECK_104
DO_CHECK_104:
	JUMP L_OR_EXP_125
L_OR_EXP_125:
	JUMP L_AND_EXP_126
L_AND_EXP_126:
	LT, INT(tmp_int_10014[temp]), INT(j[sp-0x1a4]), 10
	JUMP AND_END_127
AND_END_127:
	JUMP OR_END_128
OR_END_128:
	Branch INT(tmp_int_10014[temp]) ? DO_BODY_103 : DO_END_105
	JUMP DO_END_105
DO_END_105:
	ADD, INT(tmp_int_10015[temp]), INT(i[sp-0x1a0]), 1
	ASS, INT(i[sp-0x1a0]), INT(tmp_int_10015[temp])
	JUMP B_129
B_129:
	JUMP DO_CHECK_96
DO_CHECK_96:
	JUMP L_OR_EXP_130
L_OR_EXP_130:
	JUMP L_AND_EXP_131
L_AND_EXP_131:
	LT, INT(tmp_int_10016[temp]), INT(i[sp-0x1a0]), 10
	JUMP AND_END_132
AND_END_132:
	JUMP OR_END_133
OR_END_133:
	Branch INT(tmp_int_10016[temp]) ? DO_BODY_95 : DO_END_97
	JUMP DO_END_97
DO_END_97:
	OFFSET (ARRAY(matrix_c[sp-0x19c])+0)->POINTER(tmp_pointer_3252[temp])
	Call FUNC_sumMatrix; Params: POINTER(tmp_pointer_3252[temp]); RET INT(tmp_int_10017[temp])
	RETURN INT(tmp_int_10017[temp])
# func main : stack size 0x8
# param: 
FUNC_main:
	Call FUNC_output_id; Params: 
	MUL, INT(tmp_int_10019[temp]), 3, 3
	ADD, INT(tmp_int_10018[temp]), 80, INT(tmp_int_10019[temp])
	Call FUNC_isPrime; Params: INT(tmp_int_10018[temp]); RET INT(tmp_int_10020[temp])
	PRINT_INT INT(tmp_int_10020[temp])
	PRINT_STR STR_2
	JUMP L_OR_EXP_135
L_OR_EXP_135:
	JUMP L_AND_EXP_136
L_AND_EXP_136:
	GE, INT(tmp_int_10021[temp]), INT(const_b[data+0x4]), INT(int_c[data+0x10])
	JUMP AND_END_137
AND_END_137:
	JUMP OR_END_138
OR_END_138:
	Branch INT(tmp_int_10021[temp]) ? IF_BODY_139 : IF_END_140
IF_BODY_139:
	JUMP B_141
B_141:
	ASS, INT(int_d[data+0x14]), 1
	JUMP B_142
B_142:
	JUMP IF_END_140
IF_END_140:
	JUMP L_OR_EXP_143
L_OR_EXP_143:
	JUMP L_AND_EXP_144
L_AND_EXP_144:
	EQ, INT(tmp_int_10022[temp]), INT(const_b[data+0x4]), INT(int_d[data+0x14])
	JUMP AND_END_145
AND_END_145:
	JUMP OR_END_146
OR_END_146:
	Branch INT(tmp_int_10022[temp]) ? IF_BODY_147 : IF_END_148
IF_BODY_147:
	JUMP B_149
B_149:
	ASS, INT(int_e[data+0x18]), 0
	JUMP B_150
B_150:
	JUMP IF_END_148
IF_END_148:
	JUMP L_OR_EXP_151
L_OR_EXP_151:
	JUMP L_AND_EXP_152
L_AND_EXP_152:
	GT, INT(tmp_int_10023[temp]), INT(const_b[data+0x4]), INT(int_e[data+0x18])
	JUMP AND_END_153
AND_END_153:
	JUMP OR_END_154
OR_END_154:
	Branch INT(tmp_int_10023[temp]) ? IF_BODY_155 : IF_ELSE_157
IF_BODY_155:
	JUMP B_158
B_158:
	ASS, INT(int_d[data+0x14]), 3
	JUMP B_159
B_159:
	JUMP IF_END_156
IF_ELSE_157:
	JUMP B_160
B_160:
	ASS, INT(int_d[data+0x14]), 4
	JUMP B_161
B_161:
	JUMP IF_END_156
IF_END_156:
	DEF, INT(i[sp-0x4]), 5
	DEF, INT(j[sp-0x8]), 0
	MUL, INT(tmp_int_10025[temp]), 3, 2
	DIV, INT(tmp_int_10026[temp]), INT(tmp_int_10025[temp]), 2
	ADD, INT(tmp_int_10024[temp]), INT(i[sp-0x4]), INT(tmp_int_10026[temp])
	ASS, INT(int_c[data+0x10]), INT(tmp_int_10024[temp])
	ASS, INT(i[sp-0x4]), 0
	JUMP L_OR_EXP_165
L_OR_EXP_165:
	JUMP L_AND_EXP_166
L_AND_EXP_166:
	LT, INT(tmp_int_10027[temp]), INT(i[sp-0x4]), 100
	JUMP AND_END_167
AND_END_167:
	JUMP OR_END_168
OR_END_168:
	Branch INT(tmp_int_10027[temp]) ? DO_BODY_162 : DO_END_164
	JUMP DO_BODY_162
DO_BODY_162:
	JUMP B_169
B_169:
	JUMP L_OR_EXP_170
	JUMP B_185
L_OR_EXP_170:
	JUMP L_AND_EXP_171
L_AND_EXP_171:
	EQ, INT(tmp_int_10028[temp]), INT(i[sp-0x4]), 0
	JUMP AND_END_172
AND_END_172:
	ASS, INT(tmp_int_10029[temp]), INT(tmp_int_10028[temp])
	Branch INT(tmp_int_10029[temp]) ? OR_END_173 : OR_174
OR_174:
	JUMP L_AND_EXP_175
L_AND_EXP_175:
	EQ, INT(tmp_int_10030[temp]), INT(i[sp-0x4]), 1
	JUMP AND_END_176
AND_END_176:
	OR, INT(tmp_int_10029[temp]), INT(tmp_int_10030[temp]), INT(tmp_int_10029[temp])
	Branch INT(tmp_int_10029[temp]) ? OR_END_173 : OR_177
OR_177:
	JUMP OR_END_173
OR_END_173:
	Branch INT(tmp_int_10029[temp]) ? IF_BODY_178 : IF_ELSE_180
IF_BODY_178:
	JUMP B_181
B_181:
	MUL, INT(tmp_int_10031[temp]), INT(i[sp-0x4]), 4
	ADD, INT(tmp_int_10031[temp]), INT(tmp_int_10031[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_10031[temp]))->POINTER(tmp_pointer_3253[temp])
	STORE POINTER(tmp_pointer_3253[temp]), 1
	JUMP B_182
B_182:
	JUMP IF_END_179
IF_ELSE_180:
	JUMP B_183
B_183:
	MUL, INT(tmp_int_10032[temp]), INT(i[sp-0x4]), 4
	ADD, INT(tmp_int_10032[temp]), INT(tmp_int_10032[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_10032[temp]))->POINTER(tmp_pointer_3254[temp])
	STORE POINTER(tmp_pointer_3254[temp]), 0
	JUMP B_184
B_184:
	JUMP IF_END_179
IF_END_179:
	ADD, INT(tmp_int_10033[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_10033[temp])
	JUMP B_185
B_185:
	JUMP DO_CHECK_163
DO_CHECK_163:
	JUMP L_OR_EXP_186
L_OR_EXP_186:
	JUMP L_AND_EXP_187
L_AND_EXP_187:
	LT, INT(tmp_int_10034[temp]), INT(i[sp-0x4]), 100
	JUMP AND_END_188
AND_END_188:
	JUMP OR_END_189
OR_END_189:
	Branch INT(tmp_int_10034[temp]) ? DO_BODY_162 : DO_END_164
	JUMP DO_END_164
DO_END_164:
	ASS, INT(i[sp-0x4]), 5
	JUMP B_190
B_190:
	JUMP B_191
B_191:
	JUMP L_OR_EXP_195
L_OR_EXP_195:
	JUMP L_AND_EXP_196
L_AND_EXP_196:
	LT, INT(tmp_int_10035[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	JUMP AND_END_197
AND_END_197:
	ASS, INT(tmp_int_10036[temp]), INT(tmp_int_10035[temp])
	Branch INT(tmp_int_10036[temp]) ? OR_END_198 : OR_199
OR_199:
	JUMP L_AND_EXP_200
L_AND_EXP_200:
	GT, INT(tmp_int_10037[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	JUMP AND_END_201
AND_END_201:
	OR, INT(tmp_int_10036[temp]), INT(tmp_int_10037[temp]), INT(tmp_int_10036[temp])
	Branch INT(tmp_int_10036[temp]) ? OR_END_198 : OR_202
OR_202:
	JUMP OR_END_198
OR_END_198:
	Branch INT(tmp_int_10036[temp]) ? DO_BODY_192 : DO_END_194
	JUMP DO_BODY_192
DO_BODY_192:
	JUMP B_203
B_203:
	Call FUNC_factorial; Params: INT(i[sp-0x4]); RET INT(tmp_int_10038[temp])
	PRINT_INT INT(tmp_int_10038[temp])
	PRINT_STR STR_2
	ADD, INT(tmp_int_10039[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_10039[temp])
	JUMP L_OR_EXP_204
	JUMP B_215
L_OR_EXP_204:
	JUMP L_AND_EXP_205
L_AND_EXP_205:
	EQ, INT(tmp_int_10040[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	JUMP AND_END_206
AND_END_206:
	JUMP OR_END_207
OR_END_207:
	Branch INT(tmp_int_10040[temp]) ? IF_BODY_208 : IF_ELSE_210
IF_BODY_208:
	JUMP B_211
B_211:
	JUMP DO_END_194
	JUMP B_212
B_212:
	JUMP IF_END_209
IF_ELSE_210:
	JUMP B_213
B_213:
	JUMP DO_CHECK_193
	JUMP B_214
B_214:
	JUMP IF_END_209
IF_END_209:
	JUMP B_215
B_215:
	JUMP DO_CHECK_193
DO_CHECK_193:
	JUMP L_OR_EXP_216
L_OR_EXP_216:
	JUMP L_AND_EXP_217
L_AND_EXP_217:
	LT, INT(tmp_int_10041[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	JUMP AND_END_218
AND_END_218:
	ASS, INT(tmp_int_10042[temp]), INT(tmp_int_10041[temp])
	Branch INT(tmp_int_10042[temp]) ? OR_END_219 : OR_220
OR_220:
	JUMP L_AND_EXP_221
L_AND_EXP_221:
	GT, INT(tmp_int_10043[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	JUMP AND_END_222
AND_END_222:
	OR, INT(tmp_int_10042[temp]), INT(tmp_int_10043[temp]), INT(tmp_int_10042[temp])
	Branch INT(tmp_int_10042[temp]) ? OR_END_219 : OR_223
OR_223:
	JUMP OR_END_219
OR_END_219:
	Branch INT(tmp_int_10042[temp]) ? DO_BODY_192 : DO_END_194
	JUMP DO_END_194
DO_END_194:
	JUMP L_OR_EXP_224
L_OR_EXP_224:
	JUMP L_AND_EXP_225
L_AND_EXP_225:
	EQ, INT(tmp_int_10044[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	JUMP AND_END_226
AND_END_226:
	JUMP OR_END_227
OR_END_227:
	Branch INT(tmp_int_10044[temp]) ? IF_BODY_228 : IF_END_229
IF_BODY_228:
	JUMP B_230
B_230:
	Call FUNC_return_one; Params: ; RET INT(tmp_int_10045[temp])
	PRINT_INT INT(tmp_int_10045[temp])
	PRINT_STR STR_2
	JUMP B_231
B_231:
	JUMP IF_END_229
IF_END_229:
	Call FUNC_A_plus_B; Params: 1, 1; RET INT(tmp_int_10046[temp])
	PRINT_INT INT(tmp_int_10046[temp])
	PRINT_STR STR_2
	Call FUNC_output_a_plus_b; Params: 2, 2
	GETINT INT(i[sp-0x4])
	PRINT_INT INT(i[sp-0x4])
	PRINT_STR STR_2
	ASS, INT(i[sp-0x4]), 0
	JUMP L_OR_EXP_235
L_OR_EXP_235:
	JUMP L_AND_EXP_236
L_AND_EXP_236:
	LT, INT(tmp_int_10047[temp]), INT(i[sp-0x4]), 10
	JUMP AND_END_237
AND_END_237:
	JUMP OR_END_238
OR_END_238:
	Branch INT(tmp_int_10047[temp]) ? DO_BODY_232 : DO_END_234
	JUMP DO_BODY_232
DO_BODY_232:
	JUMP B_239
B_239:
	ASS, INT(j[sp-0x8]), 0
	JUMP L_OR_EXP_243
	JUMP B_253
L_OR_EXP_243:
	JUMP L_AND_EXP_244
L_AND_EXP_244:
	LT, INT(tmp_int_10048[temp]), INT(j[sp-0x8]), 10
	JUMP AND_END_245
AND_END_245:
	JUMP OR_END_246
OR_END_246:
	Branch INT(tmp_int_10048[temp]) ? DO_BODY_240 : DO_END_242
	JUMP DO_BODY_240
DO_BODY_240:
	JUMP B_247
B_247:
	MUL, INT(tmp_int_10049[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_10049[temp]), INT(tmp_int_10049[temp]), 0
	MUL, INT(tmp_int_10050[temp]), INT(i[sp-0x4]), 40
	ADD, INT(tmp_int_10050[temp]), INT(tmp_int_10050[temp]), INT(tmp_int_10049[temp])
	OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_10050[temp]))->POINTER(tmp_pointer_3255[temp])
	ADD, INT(tmp_int_10051[temp]), INT(i[sp-0x4]), 1
	STORE POINTER(tmp_pointer_3255[temp]), INT(tmp_int_10051[temp])
	MUL, INT(tmp_int_10052[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_10052[temp]), INT(tmp_int_10052[temp]), 0
	MUL, INT(tmp_int_10053[temp]), INT(i[sp-0x4]), 40
	ADD, INT(tmp_int_10053[temp]), INT(tmp_int_10053[temp]), INT(tmp_int_10052[temp])
	OFFSET (ARRAY(matrix_B[data+0x344])+INT(tmp_int_10053[temp]))->POINTER(tmp_pointer_3256[temp])
	ADD, INT(tmp_int_10054[temp]), INT(j[sp-0x8]), 1
	STORE POINTER(tmp_pointer_3256[temp]), INT(tmp_int_10054[temp])
	ADD, INT(tmp_int_10055[temp]), INT(j[sp-0x8]), 1
	ASS, INT(j[sp-0x8]), INT(tmp_int_10055[temp])
	JUMP B_248
B_248:
	JUMP DO_CHECK_241
DO_CHECK_241:
	JUMP L_OR_EXP_249
L_OR_EXP_249:
	JUMP L_AND_EXP_250
L_AND_EXP_250:
	LT, INT(tmp_int_10056[temp]), INT(j[sp-0x8]), 10
	JUMP AND_END_251
AND_END_251:
	JUMP OR_END_252
OR_END_252:
	Branch INT(tmp_int_10056[temp]) ? DO_BODY_240 : DO_END_242
	JUMP DO_END_242
DO_END_242:
	ADD, INT(tmp_int_10057[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_10057[temp])
	JUMP B_253
B_253:
	JUMP DO_CHECK_233
DO_CHECK_233:
	JUMP L_OR_EXP_254
L_OR_EXP_254:
	JUMP L_AND_EXP_255
L_AND_EXP_255:
	LT, INT(tmp_int_10058[temp]), INT(i[sp-0x4]), 10
	JUMP AND_END_256
AND_END_256:
	JUMP OR_END_257
OR_END_257:
	Branch INT(tmp_int_10058[temp]) ? DO_BODY_232 : DO_END_234
	JUMP DO_END_234
DO_END_234:
	OFFSET (ARRAY(matrix_A[data+0x1b4])+0)->POINTER(tmp_pointer_3257[temp])
	OFFSET (ARRAY(matrix_B[data+0x344])+0)->POINTER(tmp_pointer_3258[temp])
	MUL, INT(tmp_int_10059[temp]), 1, 4
	ADD, INT(tmp_int_10059[temp]), INT(tmp_int_10059[temp]), 0
	MUL, INT(tmp_int_10060[temp]), 1, 40
	ADD, INT(tmp_int_10060[temp]), INT(tmp_int_10060[temp]), INT(tmp_int_10059[temp])
	OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_10060[temp]))->POINTER(tmp_pointer_3259[temp])
	LOAD POINTER(tmp_pointer_3259[temp]), INT(tmp_int_10061[temp])
	Call FUNC_matrixMulti; Params: POINTER(tmp_pointer_3257[temp]), POINTER(tmp_pointer_3258[temp]), INT(tmp_int_10061[temp]); RET INT(tmp_int_10062[temp])
	PRINT_INT INT(tmp_int_10062[temp])
	PRINT_STR STR_2
	RETURN 0
