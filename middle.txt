###### GLOBAL STRING ######
STR_1 : 20231097\n
STR_2 : a
STR_3 : \n

###### GLOBAL ARRAY ######

###### GLOBAL VAR ######

###### TEXT ######
JUMP FUNC_main
# func getnum : stack size 0x4
# param: INT(num[sp-0x4])
FUNC_getnum:
	MUL, INT(tmp_int_0[temp]), INT(num[sp-0x4]), INT(num[sp-0x4])
	ADD, INT(tmp_int_1[temp]), INT(tmp_int_0[temp]), 1
	RETURN INT(tmp_int_1[temp])
# func main : stack size 0xc
# param: 
FUNC_main:
	PRINT_STR STR_1
	DEF, INT(num[sp-0x4]), 0
	GETINT INT(num[sp-0x4])
	JUMP L_OR_EXP_1
L_OR_EXP_1:
	JUMP L_AND_EXP_3
L_AND_EXP_3:
	LE, INT(tmp_int_2[temp]), INT(num[sp-0x4]), 0
	ASS, INT(tmp_int_3[temp]), INT(tmp_int_2[temp])
	Branch INT(tmp_int_2[temp]) ? AND_5 : AND_END_4
AND_5:
	JUMP AND_END_4
AND_END_4:
	ASS, INT(tmp_int_4[temp]), INT(tmp_int_3[temp])
	Branch INT(tmp_int_4[temp]) ? OR_END_2 : OR_6
OR_6:
	JUMP OR_END_2
OR_END_2:
	Branch INT(tmp_int_4[temp]) ? IF_BODY_7 : IF_ELSE_9
IF_BODY_7:
	JUMP B_10
B_10:
	DEF, INT(i[sp-0x8]), 0
	JUMP WHILE_11
	JUMP B_42
WHILE_11:
	JUMP L_OR_EXP_14
L_OR_EXP_14:
	JUMP L_AND_EXP_16
L_AND_EXP_16:
	LT, INT(tmp_int_5[temp]), INT(i[sp-0x8]), 11
	ASS, INT(tmp_int_6[temp]), INT(tmp_int_5[temp])
	Branch INT(tmp_int_5[temp]) ? AND_18 : AND_END_17
AND_18:
	JUMP AND_END_17
AND_END_17:
	ASS, INT(tmp_int_7[temp]), INT(tmp_int_6[temp])
	Branch INT(tmp_int_7[temp]) ? OR_END_15 : OR_19
OR_19:
	JUMP OR_END_15
OR_END_15:
	Branch INT(tmp_int_7[temp]) ? WHILE_BODY_12 : WHILE_END_13
WHILE_BODY_12:
	JUMP B_20
B_20:
	JUMP L_OR_EXP_21
	JUMP B_41
L_OR_EXP_21:
	JUMP L_AND_EXP_23
L_AND_EXP_23:
	EQ, INT(tmp_int_8[temp]), INT(i[sp-0x8]), 10
	ASS, INT(tmp_int_9[temp]), INT(tmp_int_8[temp])
	Branch INT(tmp_int_8[temp]) ? AND_25 : AND_END_24
AND_25:
	JUMP AND_END_24
AND_END_24:
	ASS, INT(tmp_int_10[temp]), INT(tmp_int_9[temp])
	Branch INT(tmp_int_10[temp]) ? OR_END_22 : OR_26
OR_26:
	JUMP OR_END_22
OR_END_22:
	Branch INT(tmp_int_10[temp]) ? IF_BODY_27 : IF_END_28
IF_BODY_27:
	JUMP B_29
B_29:
	JUMP WHILE_END_13
	JUMP B_30
B_30:
	JUMP IF_END_28
IF_END_28:
	JUMP L_OR_EXP_31
L_OR_EXP_31:
	JUMP L_AND_EXP_33
L_AND_EXP_33:
	EQ, INT(tmp_int_11[temp]), INT(i[sp-0x8]), 1
	ASS, INT(tmp_int_12[temp]), INT(tmp_int_11[temp])
	Branch INT(tmp_int_11[temp]) ? AND_35 : AND_END_34
AND_35:
	JUMP AND_END_34
AND_END_34:
	ASS, INT(tmp_int_13[temp]), INT(tmp_int_12[temp])
	Branch INT(tmp_int_13[temp]) ? OR_END_32 : OR_36
OR_36:
	JUMP OR_END_32
OR_END_32:
	Branch INT(tmp_int_13[temp]) ? IF_BODY_37 : IF_END_38
IF_BODY_37:
	JUMP B_39
B_39:
	JUMP WHILE_11
	JUMP B_40
B_40:
	JUMP IF_END_38
IF_END_38:
	PRINT_STR STR_2
	ADD, INT(tmp_int_14[temp]), INT(i[sp-0x8]), 1
	ASS, INT(i[sp-0x8]), INT(tmp_int_14[temp])
	JUMP B_41
B_41:
	JUMP WHILE_11
WHILE_END_13:
	JUMP B_42
B_42:
	JUMP IF_END_8
IF_ELSE_9:
	JUMP B_43
B_43:
	DEF, INT(i[sp-0xc]), 0
	Call FUNC_getnum; Params: INT(num[sp-0x4]); RET INT(tmp_int_15[temp])
	PRINT_INT INT(tmp_int_15[temp])
	PRINT_STR STR_3
	JUMP B_44
B_44:
	JUMP IF_END_8
IF_END_8:
	RETURN 0
