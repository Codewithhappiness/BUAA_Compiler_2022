###### GLOBAL STRING ######
STR_1 : 19182604\n
STR_2 : \n

###### GLOBAL ARRAY ######
[0x0]array a: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[0x40]array b: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[0x98]array c: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

###### GLOBAL VAR ######
[0x80]a_row: 0
[0x84]a_col: 0
[0x88]b_row: 0
[0x8c]b_col: 0
[0x90]c_row: 0
[0x94]c_col: 0
[0xd8]err: 0
[0xdc]l: 0
[0xe0]r: 0

###### TEXT ######
JUMP FUNC_main
# func Matrix_mult : stack size 0xc
# param: 
FUNC_Matrix_mult:
	DEF, INT(i[sp-0x4]), 0
	DEF, INT(j[sp-0x8]), 0
	DEF, INT(k[sp-0xc]), 0
	ASS, INT(i[sp-0x4]), 0
	JUMP WHILE_0
WHILE_0:
	JUMP L_OR_EXP_3
L_OR_EXP_3:
	JUMP L_AND_EXP_4
L_AND_EXP_4:
	LT, INT(tmp_int_7584[temp]), INT(i[sp-0x4]), INT(a_row[data+0x80])
	JUMP AND_END_5
AND_END_5:
	JUMP OR_END_6
OR_END_6:
	Branch INT(tmp_int_7584[temp]) ? WHILE_BODY_1 : WHILE_END_2
WHILE_BODY_1:
	JUMP B_7
B_7:
	ASS, INT(j[sp-0x8]), 0
	JUMP WHILE_8
	JUMP B_26
WHILE_8:
	JUMP L_OR_EXP_11
L_OR_EXP_11:
	JUMP L_AND_EXP_12
L_AND_EXP_12:
	LT, INT(tmp_int_7585[temp]), INT(j[sp-0x8]), INT(b_col[data+0x8c])
	JUMP AND_END_13
AND_END_13:
	JUMP OR_END_14
OR_END_14:
	Branch INT(tmp_int_7585[temp]) ? WHILE_BODY_9 : WHILE_END_10
WHILE_BODY_9:
	JUMP B_15
B_15:
	ASS, INT(k[sp-0xc]), 0
	JUMP WHILE_16
	JUMP B_25
WHILE_16:
	JUMP L_OR_EXP_19
L_OR_EXP_19:
	JUMP L_AND_EXP_20
L_AND_EXP_20:
	LT, INT(tmp_int_7586[temp]), INT(k[sp-0xc]), INT(a_col[data+0x84])
	JUMP AND_END_21
AND_END_21:
	JUMP OR_END_22
OR_END_22:
	Branch INT(tmp_int_7586[temp]) ? WHILE_BODY_17 : WHILE_END_18
WHILE_BODY_17:
	JUMP B_23
B_23:
	MUL, INT(tmp_int_7587[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_7587[temp]), INT(tmp_int_7587[temp]), 0
	MUL, INT(tmp_int_7588[temp]), INT(i[sp-0x4]), 16
	ADD, INT(tmp_int_7588[temp]), INT(tmp_int_7588[temp]), INT(tmp_int_7587[temp])
	OFFSET (ARRAY(c[data+0x98])+INT(tmp_int_7588[temp]))->POINTER(tmp_pointer_2642[temp])
	MUL, INT(tmp_int_7589[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_7589[temp]), INT(tmp_int_7589[temp]), 0
	MUL, INT(tmp_int_7590[temp]), INT(i[sp-0x4]), 16
	ADD, INT(tmp_int_7590[temp]), INT(tmp_int_7590[temp]), INT(tmp_int_7589[temp])
	OFFSET (ARRAY(c[data+0x98])+INT(tmp_int_7590[temp]))->POINTER(tmp_pointer_2643[temp])
	LOAD POINTER(tmp_pointer_2643[temp]), INT(tmp_int_7591[temp])
	MUL, INT(tmp_int_7593[temp]), INT(k[sp-0xc]), 4
	ADD, INT(tmp_int_7593[temp]), INT(tmp_int_7593[temp]), 0
	MUL, INT(tmp_int_7594[temp]), INT(i[sp-0x4]), 16
	ADD, INT(tmp_int_7594[temp]), INT(tmp_int_7594[temp]), INT(tmp_int_7593[temp])
	OFFSET (ARRAY(a[data+0x0])+INT(tmp_int_7594[temp]))->POINTER(tmp_pointer_2644[temp])
	LOAD POINTER(tmp_pointer_2644[temp]), INT(tmp_int_7595[temp])
	MUL, INT(tmp_int_7597[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_7597[temp]), INT(tmp_int_7597[temp]), 0
	MUL, INT(tmp_int_7598[temp]), INT(k[sp-0xc]), 16
	ADD, INT(tmp_int_7598[temp]), INT(tmp_int_7598[temp]), INT(tmp_int_7597[temp])
	OFFSET (ARRAY(b[data+0x40])+INT(tmp_int_7598[temp]))->POINTER(tmp_pointer_2645[temp])
	LOAD POINTER(tmp_pointer_2645[temp]), INT(tmp_int_7599[temp])
	MUL, INT(tmp_int_7596[temp]), INT(tmp_int_7595[temp]), INT(tmp_int_7599[temp])
	ADD, INT(tmp_int_7592[temp]), INT(tmp_int_7591[temp]), INT(tmp_int_7596[temp])
	STORE POINTER(tmp_pointer_2642[temp]), INT(tmp_int_7592[temp])
	ADD, INT(tmp_int_7600[temp]), INT(k[sp-0xc]), 1
	ASS, INT(k[sp-0xc]), INT(tmp_int_7600[temp])
	JUMP B_24
B_24:
	JUMP WHILE_16
WHILE_END_18:
	ADD, INT(tmp_int_7601[temp]), INT(j[sp-0x8]), 1
	ASS, INT(j[sp-0x8]), INT(tmp_int_7601[temp])
	JUMP B_25
B_25:
	JUMP WHILE_8
WHILE_END_10:
	ADD, INT(tmp_int_7602[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_7602[temp])
	JUMP B_26
B_26:
	JUMP WHILE_0
WHILE_END_2:
	ASS, INT(c_row[data+0x90]), INT(i[sp-0x4])
	ASS, INT(c_col[data+0x94]), INT(j[sp-0x8])
	RETURN VOID
# func Matrix_add : stack size 0x10
# param: INT(row[sp-0x4]), INT(col[sp-0x8])
FUNC_Matrix_add:
	DEF, INT(i[sp-0xc]), 0
	DEF, INT(j[sp-0x10]), 0
	ASS, INT(i[sp-0xc]), 0
	JUMP WHILE_28
WHILE_28:
	JUMP L_OR_EXP_31
L_OR_EXP_31:
	JUMP L_AND_EXP_32
L_AND_EXP_32:
	LT, INT(tmp_int_7603[temp]), INT(i[sp-0xc]), INT(row[sp-0x4])
	JUMP AND_END_33
AND_END_33:
	JUMP OR_END_34
OR_END_34:
	Branch INT(tmp_int_7603[temp]) ? WHILE_BODY_29 : WHILE_END_30
WHILE_BODY_29:
	JUMP B_35
B_35:
	ASS, INT(j[sp-0x10]), 0
	JUMP WHILE_36
	JUMP B_45
WHILE_36:
	JUMP L_OR_EXP_39
L_OR_EXP_39:
	JUMP L_AND_EXP_40
L_AND_EXP_40:
	LT, INT(tmp_int_7604[temp]), INT(j[sp-0x10]), INT(col[sp-0x8])
	JUMP AND_END_41
AND_END_41:
	JUMP OR_END_42
OR_END_42:
	Branch INT(tmp_int_7604[temp]) ? WHILE_BODY_37 : WHILE_END_38
WHILE_BODY_37:
	JUMP B_43
B_43:
	MUL, INT(tmp_int_7605[temp]), INT(j[sp-0x10]), 4
	ADD, INT(tmp_int_7605[temp]), INT(tmp_int_7605[temp]), 0
	MUL, INT(tmp_int_7606[temp]), INT(i[sp-0xc]), 16
	ADD, INT(tmp_int_7606[temp]), INT(tmp_int_7606[temp]), INT(tmp_int_7605[temp])
	OFFSET (ARRAY(c[data+0x98])+INT(tmp_int_7606[temp]))->POINTER(tmp_pointer_2646[temp])
	MUL, INT(tmp_int_7607[temp]), INT(j[sp-0x10]), 4
	ADD, INT(tmp_int_7607[temp]), INT(tmp_int_7607[temp]), 0
	MUL, INT(tmp_int_7608[temp]), INT(i[sp-0xc]), 16
	ADD, INT(tmp_int_7608[temp]), INT(tmp_int_7608[temp]), INT(tmp_int_7607[temp])
	OFFSET (ARRAY(a[data+0x0])+INT(tmp_int_7608[temp]))->POINTER(tmp_pointer_2647[temp])
	LOAD POINTER(tmp_pointer_2647[temp]), INT(tmp_int_7609[temp])
	MUL, INT(tmp_int_7611[temp]), INT(j[sp-0x10]), 4
	ADD, INT(tmp_int_7611[temp]), INT(tmp_int_7611[temp]), 0
	MUL, INT(tmp_int_7612[temp]), INT(i[sp-0xc]), 16
	ADD, INT(tmp_int_7612[temp]), INT(tmp_int_7612[temp]), INT(tmp_int_7611[temp])
	OFFSET (ARRAY(b[data+0x40])+INT(tmp_int_7612[temp]))->POINTER(tmp_pointer_2648[temp])
	LOAD POINTER(tmp_pointer_2648[temp]), INT(tmp_int_7613[temp])
	ADD, INT(tmp_int_7610[temp]), INT(tmp_int_7609[temp]), INT(tmp_int_7613[temp])
	STORE POINTER(tmp_pointer_2646[temp]), INT(tmp_int_7610[temp])
	ADD, INT(tmp_int_7614[temp]), INT(j[sp-0x10]), 1
	ASS, INT(j[sp-0x10]), INT(tmp_int_7614[temp])
	JUMP B_44
B_44:
	JUMP WHILE_36
WHILE_END_38:
	ADD, INT(tmp_int_7615[temp]), INT(i[sp-0xc]), 1
	ASS, INT(i[sp-0xc]), INT(tmp_int_7615[temp])
	JUMP B_45
B_45:
	JUMP WHILE_28
WHILE_END_30:
	ASS, INT(c_row[data+0x90]), INT(i[sp-0xc])
	ASS, INT(c_col[data+0x94]), INT(j[sp-0x10])
	RETURN VOID
# func Matrix_sub : stack size 0x10
# param: INT(row[sp-0x4]), INT(col[sp-0x8])
FUNC_Matrix_sub:
	DEF, INT(i[sp-0xc]), 0
	DEF, INT(j[sp-0x10]), 0
	ASS, INT(i[sp-0xc]), 0
	JUMP WHILE_47
WHILE_47:
	JUMP L_OR_EXP_50
L_OR_EXP_50:
	JUMP L_AND_EXP_51
L_AND_EXP_51:
	LT, INT(tmp_int_7616[temp]), INT(i[sp-0xc]), INT(row[sp-0x4])
	JUMP AND_END_52
AND_END_52:
	JUMP OR_END_53
OR_END_53:
	Branch INT(tmp_int_7616[temp]) ? WHILE_BODY_48 : WHILE_END_49
WHILE_BODY_48:
	JUMP B_54
B_54:
	ASS, INT(j[sp-0x10]), 0
	JUMP WHILE_55
	JUMP B_64
WHILE_55:
	JUMP L_OR_EXP_58
L_OR_EXP_58:
	JUMP L_AND_EXP_59
L_AND_EXP_59:
	LT, INT(tmp_int_7617[temp]), INT(j[sp-0x10]), INT(col[sp-0x8])
	JUMP AND_END_60
AND_END_60:
	JUMP OR_END_61
OR_END_61:
	Branch INT(tmp_int_7617[temp]) ? WHILE_BODY_56 : WHILE_END_57
WHILE_BODY_56:
	JUMP B_62
B_62:
	MUL, INT(tmp_int_7618[temp]), INT(j[sp-0x10]), 4
	ADD, INT(tmp_int_7618[temp]), INT(tmp_int_7618[temp]), 0
	MUL, INT(tmp_int_7619[temp]), INT(i[sp-0xc]), 16
	ADD, INT(tmp_int_7619[temp]), INT(tmp_int_7619[temp]), INT(tmp_int_7618[temp])
	OFFSET (ARRAY(c[data+0x98])+INT(tmp_int_7619[temp]))->POINTER(tmp_pointer_2649[temp])
	MUL, INT(tmp_int_7620[temp]), INT(j[sp-0x10]), 4
	ADD, INT(tmp_int_7620[temp]), INT(tmp_int_7620[temp]), 0
	MUL, INT(tmp_int_7621[temp]), INT(i[sp-0xc]), 16
	ADD, INT(tmp_int_7621[temp]), INT(tmp_int_7621[temp]), INT(tmp_int_7620[temp])
	OFFSET (ARRAY(a[data+0x0])+INT(tmp_int_7621[temp]))->POINTER(tmp_pointer_2650[temp])
	LOAD POINTER(tmp_pointer_2650[temp]), INT(tmp_int_7622[temp])
	MUL, INT(tmp_int_7624[temp]), INT(j[sp-0x10]), 4
	ADD, INT(tmp_int_7624[temp]), INT(tmp_int_7624[temp]), 0
	MUL, INT(tmp_int_7625[temp]), INT(i[sp-0xc]), 16
	ADD, INT(tmp_int_7625[temp]), INT(tmp_int_7625[temp]), INT(tmp_int_7624[temp])
	OFFSET (ARRAY(b[data+0x40])+INT(tmp_int_7625[temp]))->POINTER(tmp_pointer_2651[temp])
	LOAD POINTER(tmp_pointer_2651[temp]), INT(tmp_int_7626[temp])
	SUB, INT(tmp_int_7623[temp]), INT(tmp_int_7622[temp]), INT(tmp_int_7626[temp])
	STORE POINTER(tmp_pointer_2649[temp]), INT(tmp_int_7623[temp])
	ADD, INT(tmp_int_7627[temp]), INT(j[sp-0x10]), 1
	ASS, INT(j[sp-0x10]), INT(tmp_int_7627[temp])
	JUMP B_63
B_63:
	JUMP WHILE_55
WHILE_END_57:
	ADD, INT(tmp_int_7628[temp]), INT(i[sp-0xc]), 1
	ASS, INT(i[sp-0xc]), INT(tmp_int_7628[temp])
	JUMP B_64
B_64:
	JUMP WHILE_47
WHILE_END_49:
	ASS, INT(c_row[data+0x90]), INT(i[sp-0xc])
	ASS, INT(c_col[data+0x94]), INT(j[sp-0x10])
	RETURN VOID
# func Error : stack size 0x0
# param: 
FUNC_Error:
	ASS, INT(err[data+0xd8]), 1
	RETURN VOID
# func init : stack size 0x10
# param: INT(row[sp-0x4]), INT(col[sp-0x8])
FUNC_init:
	DEF, INT(i[sp-0xc]), 0
	DEF, INT(j[sp-0x10]), 0
	JUMP WHILE_67
WHILE_67:
	JUMP L_OR_EXP_70
L_OR_EXP_70:
	JUMP L_AND_EXP_71
L_AND_EXP_71:
	LT, INT(tmp_int_7629[temp]), INT(i[sp-0xc]), INT(row[sp-0x4])
	JUMP AND_END_72
AND_END_72:
	JUMP OR_END_73
OR_END_73:
	Branch INT(tmp_int_7629[temp]) ? WHILE_BODY_68 : WHILE_END_69
WHILE_BODY_68:
	JUMP B_74
B_74:
	ASS, INT(j[sp-0x10]), 0
	JUMP WHILE_75
	JUMP B_84
WHILE_75:
	JUMP L_OR_EXP_78
L_OR_EXP_78:
	JUMP L_AND_EXP_79
L_AND_EXP_79:
	LT, INT(tmp_int_7630[temp]), INT(j[sp-0x10]), INT(col[sp-0x8])
	JUMP AND_END_80
AND_END_80:
	JUMP OR_END_81
OR_END_81:
	Branch INT(tmp_int_7630[temp]) ? WHILE_BODY_76 : WHILE_END_77
WHILE_BODY_76:
	JUMP B_82
B_82:
	MUL, INT(tmp_int_7631[temp]), INT(j[sp-0x10]), 4
	ADD, INT(tmp_int_7631[temp]), INT(tmp_int_7631[temp]), 0
	MUL, INT(tmp_int_7632[temp]), INT(i[sp-0xc]), 16
	ADD, INT(tmp_int_7632[temp]), INT(tmp_int_7632[temp]), INT(tmp_int_7631[temp])
	OFFSET (ARRAY(c[data+0x98])+INT(tmp_int_7632[temp]))->POINTER(tmp_pointer_2652[temp])
	STORE POINTER(tmp_pointer_2652[temp]), 0
	ADD, INT(tmp_int_7633[temp]), INT(j[sp-0x10]), 1
	ASS, INT(j[sp-0x10]), INT(tmp_int_7633[temp])
	JUMP B_83
B_83:
	JUMP WHILE_75
WHILE_END_77:
	ADD, INT(tmp_int_7634[temp]), INT(i[sp-0xc]), 1
	ASS, INT(i[sp-0xc]), INT(tmp_int_7634[temp])
	JUMP B_84
B_84:
	JUMP WHILE_67
WHILE_END_69:
	RETURN VOID
# func Print : stack size 0x10
# param: INT(row[sp-0x4]), INT(col[sp-0x8])
FUNC_Print:
	DEF, INT(i[sp-0xc]), 0
	DEF, INT(j[sp-0x10]), 0
	ASS, INT(i[sp-0xc]), 0
	JUMP WHILE_86
WHILE_86:
	JUMP L_OR_EXP_89
L_OR_EXP_89:
	JUMP L_AND_EXP_90
L_AND_EXP_90:
	LT, INT(tmp_int_7635[temp]), INT(i[sp-0xc]), INT(row[sp-0x4])
	JUMP AND_END_91
AND_END_91:
	JUMP OR_END_92
OR_END_92:
	Branch INT(tmp_int_7635[temp]) ? WHILE_BODY_87 : WHILE_END_88
WHILE_BODY_87:
	JUMP B_93
B_93:
	ASS, INT(j[sp-0x10]), 0
	JUMP WHILE_94
	JUMP B_103
WHILE_94:
	JUMP L_OR_EXP_97
L_OR_EXP_97:
	JUMP L_AND_EXP_98
L_AND_EXP_98:
	LT, INT(tmp_int_7636[temp]), INT(j[sp-0x10]), INT(col[sp-0x8])
	JUMP AND_END_99
AND_END_99:
	JUMP OR_END_100
OR_END_100:
	Branch INT(tmp_int_7636[temp]) ? WHILE_BODY_95 : WHILE_END_96
WHILE_BODY_95:
	JUMP B_101
B_101:
	ADD, INT(tmp_int_7637[temp]), INT(j[sp-0x10]), 1
	ASS, INT(j[sp-0x10]), INT(tmp_int_7637[temp])
	JUMP B_102
B_102:
	JUMP WHILE_94
WHILE_END_96:
	ADD, INT(tmp_int_7638[temp]), INT(i[sp-0xc]), 1
	ASS, INT(i[sp-0xc]), INT(tmp_int_7638[temp])
	JUMP B_103
B_103:
	JUMP WHILE_86
WHILE_END_88:
	Call FUNC_init; Params: INT(row[sp-0x4]), INT(col[sp-0x8])
	RETURN VOID
# func meet_conditions : stack size 0x14
# param: INT(kind[sp-0x4])
FUNC_meet_conditions:
	JUMP L_OR_EXP_105
L_OR_EXP_105:
	JUMP L_AND_EXP_106
L_AND_EXP_106:
	EQ, INT(tmp_int_7639[temp]), INT(kind[sp-0x4]), 1
	JUMP AND_END_107
AND_END_107:
	JUMP OR_END_108
OR_END_108:
	Branch INT(tmp_int_7639[temp]) ? IF_BODY_109 : IF_ELSE_111
IF_BODY_109:
	JUMP B_112
B_112:
	JUMP L_OR_EXP_113
	JUMP B_132
L_OR_EXP_113:
	JUMP L_AND_EXP_114
L_AND_EXP_114:
	EQ, INT(tmp_int_7640[temp]), INT(a_row[data+0x80]), INT(b_row[data+0x88])
	JUMP AND_END_115
AND_END_115:
	JUMP OR_END_116
OR_END_116:
	Branch INT(tmp_int_7640[temp]) ? IF_BODY_117 : IF_ELSE_119
IF_BODY_117:
	JUMP B_120
B_120:
	JUMP L_OR_EXP_121
	JUMP B_129
L_OR_EXP_121:
	JUMP L_AND_EXP_122
L_AND_EXP_122:
	EQ, INT(tmp_int_7641[temp]), INT(a_col[data+0x84]), INT(b_col[data+0x8c])
	JUMP AND_END_123
AND_END_123:
	JUMP OR_END_124
OR_END_124:
	Branch INT(tmp_int_7641[temp]) ? IF_BODY_125 : IF_END_126
IF_BODY_125:
	JUMP B_127
B_127:
	DEF, INT(row[sp-0x8]), INT(a_row[data+0x80])
	DEF, INT(col[sp-0xc]), INT(b_col[data+0x8c])
	Call FUNC_Matrix_add; Params: INT(row[sp-0x8]), INT(col[sp-0xc])
	JUMP B_128
B_128:
	JUMP IF_END_126
IF_END_126:
	JUMP B_129
B_129:
	JUMP IF_END_118
IF_ELSE_119:
	JUMP B_130
B_130:
	Call FUNC_Error; Params: 
	JUMP B_131
B_131:
	JUMP IF_END_118
IF_END_118:
	JUMP B_132
B_132:
	JUMP IF_END_110
IF_ELSE_111:
	JUMP L_OR_EXP_133
L_OR_EXP_133:
	JUMP L_AND_EXP_134
L_AND_EXP_134:
	EQ, INT(tmp_int_7642[temp]), INT(kind[sp-0x4]), 2
	JUMP AND_END_135
AND_END_135:
	JUMP OR_END_136
OR_END_136:
	Branch INT(tmp_int_7642[temp]) ? IF_BODY_137 : IF_ELSE_139
IF_BODY_137:
	JUMP B_140
B_140:
	JUMP L_OR_EXP_141
	JUMP B_160
L_OR_EXP_141:
	JUMP L_AND_EXP_142
L_AND_EXP_142:
	EQ, INT(tmp_int_7643[temp]), INT(a_row[data+0x80]), INT(b_row[data+0x88])
	JUMP AND_END_143
AND_END_143:
	JUMP OR_END_144
OR_END_144:
	Branch INT(tmp_int_7643[temp]) ? IF_BODY_145 : IF_ELSE_147
IF_BODY_145:
	JUMP B_148
B_148:
	JUMP L_OR_EXP_149
	JUMP B_157
L_OR_EXP_149:
	JUMP L_AND_EXP_150
L_AND_EXP_150:
	EQ, INT(tmp_int_7644[temp]), INT(a_col[data+0x84]), INT(b_col[data+0x8c])
	JUMP AND_END_151
AND_END_151:
	JUMP OR_END_152
OR_END_152:
	Branch INT(tmp_int_7644[temp]) ? IF_BODY_153 : IF_END_154
IF_BODY_153:
	JUMP B_155
B_155:
	DEF, INT(row[sp-0x10]), INT(a_row[data+0x80])
	DEF, INT(col[sp-0x14]), INT(b_col[data+0x8c])
	Call FUNC_Matrix_sub; Params: INT(row[sp-0x10]), INT(col[sp-0x14])
	JUMP B_156
B_156:
	JUMP IF_END_154
IF_END_154:
	JUMP B_157
B_157:
	JUMP IF_END_146
IF_ELSE_147:
	JUMP B_158
B_158:
	Call FUNC_Error; Params: 
	JUMP B_159
B_159:
	JUMP IF_END_146
IF_END_146:
	JUMP B_160
B_160:
	JUMP IF_END_138
IF_ELSE_139:
	JUMP L_OR_EXP_161
L_OR_EXP_161:
	JUMP L_AND_EXP_162
L_AND_EXP_162:
	EQ, INT(tmp_int_7645[temp]), INT(kind[sp-0x4]), 3
	JUMP AND_END_163
AND_END_163:
	JUMP OR_END_164
OR_END_164:
	Branch INT(tmp_int_7645[temp]) ? IF_BODY_165 : IF_ELSE_167
IF_BODY_165:
	JUMP B_168
B_168:
	JUMP L_OR_EXP_169
	JUMP B_180
L_OR_EXP_169:
	JUMP L_AND_EXP_170
L_AND_EXP_170:
	EQ, INT(tmp_int_7646[temp]), INT(a_col[data+0x84]), INT(b_row[data+0x88])
	JUMP AND_END_171
AND_END_171:
	JUMP OR_END_172
OR_END_172:
	Branch INT(tmp_int_7646[temp]) ? IF_BODY_173 : IF_ELSE_175
IF_BODY_173:
	JUMP B_176
B_176:
	Call FUNC_Matrix_mult; Params: 
	JUMP B_177
B_177:
	JUMP IF_END_174
IF_ELSE_175:
	JUMP B_178
B_178:
	Call FUNC_Error; Params: 
	JUMP B_179
B_179:
	JUMP IF_END_174
IF_END_174:
	JUMP B_180
B_180:
	JUMP IF_END_166
IF_ELSE_167:
	JUMP B_181
B_181:
	Call FUNC_Error; Params: 
	JUMP B_182
B_182:
	JUMP IF_END_166
IF_END_166:
	JUMP IF_END_138
IF_END_138:
	JUMP IF_END_110
IF_END_110:
	RETURN VOID
# func main : stack size 0x10
# param: 
FUNC_main:
	PRINT_STR STR_1
	DEF, INT(i[sp-0x4]), 0
	DEF, INT(j[sp-0x8]), 0
	DEF, INT(num[sp-0xc]), 0
	JUMP WHILE_184
WHILE_184:
	JUMP L_OR_EXP_187
L_OR_EXP_187:
	JUMP L_AND_EXP_188
L_AND_EXP_188:
	LT, INT(tmp_int_7647[temp]), INT(num[sp-0xc]), 9
	JUMP AND_END_189
AND_END_189:
	JUMP OR_END_190
OR_END_190:
	Branch INT(tmp_int_7647[temp]) ? WHILE_BODY_185 : WHILE_END_186
WHILE_BODY_185:
	JUMP B_191
B_191:
	ASS, INT(err[data+0xd8]), 0
	GETINT INT(a_row[data+0x80])
	GETINT INT(a_col[data+0x84])
	ASS, INT(i[sp-0x4]), 0
	JUMP WHILE_192
	JUMP B_236
WHILE_192:
	JUMP L_OR_EXP_195
L_OR_EXP_195:
	JUMP L_AND_EXP_196
L_AND_EXP_196:
	LT, INT(tmp_int_7648[temp]), INT(i[sp-0x4]), INT(a_row[data+0x80])
	JUMP AND_END_197
AND_END_197:
	JUMP OR_END_198
OR_END_198:
	Branch INT(tmp_int_7648[temp]) ? WHILE_BODY_193 : WHILE_END_194
WHILE_BODY_193:
	JUMP B_199
B_199:
	ASS, INT(j[sp-0x8]), 0
	JUMP WHILE_200
	JUMP B_209
WHILE_200:
	JUMP L_OR_EXP_203
L_OR_EXP_203:
	JUMP L_AND_EXP_204
L_AND_EXP_204:
	LT, INT(tmp_int_7649[temp]), INT(j[sp-0x8]), INT(a_col[data+0x84])
	JUMP AND_END_205
AND_END_205:
	JUMP OR_END_206
OR_END_206:
	Branch INT(tmp_int_7649[temp]) ? WHILE_BODY_201 : WHILE_END_202
WHILE_BODY_201:
	JUMP B_207
B_207:
	MUL, INT(tmp_int_7650[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_7650[temp]), INT(tmp_int_7650[temp]), 0
	MUL, INT(tmp_int_7651[temp]), INT(i[sp-0x4]), 16
	ADD, INT(tmp_int_7651[temp]), INT(tmp_int_7651[temp]), INT(tmp_int_7650[temp])
	OFFSET (ARRAY(a[data+0x0])+INT(tmp_int_7651[temp]))->POINTER(tmp_pointer_2653[temp])
	GETINT POINTER(tmp_pointer_2653[temp])
	ADD, INT(tmp_int_7652[temp]), INT(j[sp-0x8]), 1
	ASS, INT(j[sp-0x8]), INT(tmp_int_7652[temp])
	JUMP B_208
B_208:
	JUMP WHILE_200
WHILE_END_202:
	ADD, INT(tmp_int_7653[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_7653[temp])
	JUMP B_209
B_209:
	JUMP WHILE_192
WHILE_END_194:
	GETINT INT(b_row[data+0x88])
	GETINT INT(b_col[data+0x8c])
	ASS, INT(i[sp-0x4]), 0
	JUMP WHILE_210
WHILE_210:
	JUMP L_OR_EXP_213
L_OR_EXP_213:
	JUMP L_AND_EXP_214
L_AND_EXP_214:
	LT, INT(tmp_int_7654[temp]), INT(i[sp-0x4]), INT(b_row[data+0x88])
	JUMP AND_END_215
AND_END_215:
	JUMP OR_END_216
OR_END_216:
	Branch INT(tmp_int_7654[temp]) ? WHILE_BODY_211 : WHILE_END_212
WHILE_BODY_211:
	JUMP B_217
B_217:
	ASS, INT(j[sp-0x8]), 0
	JUMP WHILE_218
	JUMP B_227
WHILE_218:
	JUMP L_OR_EXP_221
L_OR_EXP_221:
	JUMP L_AND_EXP_222
L_AND_EXP_222:
	LT, INT(tmp_int_7655[temp]), INT(j[sp-0x8]), INT(b_col[data+0x8c])
	JUMP AND_END_223
AND_END_223:
	JUMP OR_END_224
OR_END_224:
	Branch INT(tmp_int_7655[temp]) ? WHILE_BODY_219 : WHILE_END_220
WHILE_BODY_219:
	JUMP B_225
B_225:
	MUL, INT(tmp_int_7656[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_7656[temp]), INT(tmp_int_7656[temp]), 0
	MUL, INT(tmp_int_7657[temp]), INT(i[sp-0x4]), 16
	ADD, INT(tmp_int_7657[temp]), INT(tmp_int_7657[temp]), INT(tmp_int_7656[temp])
	OFFSET (ARRAY(b[data+0x40])+INT(tmp_int_7657[temp]))->POINTER(tmp_pointer_2654[temp])
	GETINT POINTER(tmp_pointer_2654[temp])
	ADD, INT(tmp_int_7658[temp]), INT(j[sp-0x8]), 1
	ASS, INT(j[sp-0x8]), INT(tmp_int_7658[temp])
	JUMP B_226
B_226:
	JUMP WHILE_218
WHILE_END_220:
	ADD, INT(tmp_int_7659[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_7659[temp])
	JUMP B_227
B_227:
	JUMP WHILE_210
WHILE_END_212:
	PRINT_INT INT(num[sp-0xc])
	PRINT_STR STR_2
	DEF, INT(kind[sp-0x10]), 0
	GETINT INT(kind[sp-0x10])
	Call FUNC_meet_conditions; Params: INT(kind[sp-0x10])
	JUMP L_OR_EXP_228
L_OR_EXP_228:
	JUMP L_AND_EXP_229
L_AND_EXP_229:
	NEQ, INT(tmp_int_7660[temp]), INT(err[data+0xd8]), 1
	JUMP AND_END_230
AND_END_230:
	JUMP OR_END_231
OR_END_231:
	Branch INT(tmp_int_7660[temp]) ? IF_BODY_232 : IF_END_233
IF_BODY_232:
	JUMP B_234
B_234:
	JUMP B_235
B_235:
	JUMP IF_END_233
IF_END_233:
	ADD, INT(tmp_int_7661[temp]), INT(num[sp-0xc]), 1
	ASS, INT(num[sp-0xc]), INT(tmp_int_7661[temp])
	JUMP B_236
B_236:
	JUMP WHILE_184
WHILE_END_186:
	RETURN 0
