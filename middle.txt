###### GLOBAL STRING ######
STR_1 :  
STR_2 : \n
STR_3 : 20373236\n

###### GLOBAL ARRAY ######
[0x0]array A: 1 2
[0x8]array B: 2 4 6 9 8 7
[0x20]array a: 0 0
[0x28]array b: 0 0 0 0 0 0
[0x40]array c: 0 1 2
[0x4c]array d: 9 8 7 6

###### GLOBAL VAR ######

###### TEXT ######
JUMP FUNC_main
# func print_array : stack size 0xc
# param: ARRAY(r[sp-0x4]), INT(l[sp-0x8])
FUNC_print_array:
	DEF, INT(i[sp-0xc]), 1
	MUL, INT(tmp_int_0[temp]), 0, 4
	ADD, INT(tmp_int_0[temp]), INT(tmp_int_0[temp]), 0
	OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_0[temp]))->POINTER(tmp_pointer_0[temp])
	LOAD POINTER(tmp_pointer_0[temp]), INT(tmp_int_1[temp])
	PRINT_INT INT(tmp_int_1[temp])
	JUMP WHILE_0
WHILE_0:
	JUMP L_OR_EXP_3
L_OR_EXP_3:
	JUMP L_AND_EXP_5
L_AND_EXP_5:
	LT, INT(tmp_int_2[temp]), INT(i[sp-0xc]), INT(l[sp-0x8])
	ASS, INT(tmp_int_3[temp]), INT(tmp_int_2[temp])
	Branch INT(tmp_int_2[temp]) ? AND_7 : AND_END_6
AND_7:
	JUMP AND_END_6
AND_END_6:
	ASS, INT(tmp_int_4[temp]), INT(tmp_int_3[temp])
	Branch INT(tmp_int_4[temp]) ? OR_END_4 : OR_8
OR_8:
	JUMP OR_END_4
OR_END_4:
	Branch INT(tmp_int_4[temp]) ? WHILE_BODY_1 : WHILE_END_2
WHILE_BODY_1:
	JUMP B_9
B_9:
	MUL, INT(tmp_int_5[temp]), INT(i[sp-0xc]), 4
	ADD, INT(tmp_int_5[temp]), INT(tmp_int_5[temp]), 0
	OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_5[temp]))->POINTER(tmp_pointer_1[temp])
	LOAD POINTER(tmp_pointer_1[temp]), INT(tmp_int_6[temp])
	PRINT_STR STR_1
	PRINT_INT INT(tmp_int_6[temp])
	ADD, INT(tmp_int_7[temp]), INT(i[sp-0xc]), 1
	ASS, INT(i[sp-0xc]), INT(tmp_int_7[temp])
	JUMP B_10
B_10:
	JUMP WHILE_0
WHILE_END_2:
	PRINT_STR STR_2
	RETURN VOID
# func print_array_2 : stack size 0xc
# param: ARRAY(r[sp-0x4]), INT(l[sp-0x8])
FUNC_print_array_2:
	DEF, INT(i[sp-0xc]), 1
	MUL, INT(tmp_int_8[temp]), 0, 8
	ADD, INT(tmp_int_8[temp]), INT(tmp_int_8[temp]), 0
	OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_8[temp]))->POINTER(tmp_pointer_2[temp])
	Call FUNC_print_array; Params: POINTER(tmp_pointer_2[temp]), INT(l[sp-0x8])
	JUMP WHILE_12
WHILE_12:
	JUMP L_OR_EXP_15
L_OR_EXP_15:
	JUMP L_AND_EXP_17
L_AND_EXP_17:
	LT, INT(tmp_int_9[temp]), INT(i[sp-0xc]), INT(l[sp-0x8])
	ASS, INT(tmp_int_10[temp]), INT(tmp_int_9[temp])
	Branch INT(tmp_int_9[temp]) ? AND_19 : AND_END_18
AND_19:
	JUMP AND_END_18
AND_END_18:
	ASS, INT(tmp_int_11[temp]), INT(tmp_int_10[temp])
	Branch INT(tmp_int_11[temp]) ? OR_END_16 : OR_20
OR_20:
	JUMP OR_END_16
OR_END_16:
	Branch INT(tmp_int_11[temp]) ? WHILE_BODY_13 : WHILE_END_14
WHILE_BODY_13:
	JUMP B_21
B_21:
	MUL, INT(tmp_int_12[temp]), INT(i[sp-0xc]), 8
	ADD, INT(tmp_int_12[temp]), INT(tmp_int_12[temp]), 0
	OFFSET (ARRAY(r[sp-0x4])+INT(tmp_int_12[temp]))->POINTER(tmp_pointer_3[temp])
	Call FUNC_print_array; Params: POINTER(tmp_pointer_3[temp]), INT(l[sp-0x8])
	ADD, INT(tmp_int_13[temp]), INT(i[sp-0xc]), 1
	ASS, INT(i[sp-0xc]), INT(tmp_int_13[temp])
	JUMP B_22
B_22:
	JUMP WHILE_12
WHILE_END_14:
	RETURN VOID
# func main : stack size 0x0
# param: 
FUNC_main:
	PRINT_STR STR_3
	MUL, INT(tmp_int_14[temp]), 0, 4
	ADD, INT(tmp_int_14[temp]), INT(tmp_int_14[temp]), 0
	OFFSET (ARRAY(a[data+0x20])+INT(tmp_int_14[temp]))->POINTER(tmp_pointer_4[temp])
	STORE POINTER(tmp_pointer_4[temp]), 100
	MUL, INT(tmp_int_15[temp]), 1, 4
	ADD, INT(tmp_int_15[temp]), INT(tmp_int_15[temp]), 0
	OFFSET (ARRAY(a[data+0x20])+INT(tmp_int_15[temp]))->POINTER(tmp_pointer_5[temp])
	STORE POINTER(tmp_pointer_5[temp]), 0
	MUL, INT(tmp_int_16[temp]), 0, 4
	ADD, INT(tmp_int_16[temp]), INT(tmp_int_16[temp]), 0
	MUL, INT(tmp_int_17[temp]), 0, 12
	ADD, INT(tmp_int_17[temp]), INT(tmp_int_17[temp]), INT(tmp_int_16[temp])
	OFFSET (ARRAY(b[data+0x28])+INT(tmp_int_17[temp]))->POINTER(tmp_pointer_6[temp])
	STORE POINTER(tmp_pointer_6[temp]), 0
	OFFSET (ARRAY(a[data+0x20])+0)->POINTER(tmp_pointer_7[temp])
	Call FUNC_print_array; Params: POINTER(tmp_pointer_7[temp]), 2
	OFFSET (ARRAY(c[data+0x40])+0)->POINTER(tmp_pointer_8[temp])
	Call FUNC_print_array; Params: POINTER(tmp_pointer_8[temp]), 3
	PRINT_STR STR_2
	OFFSET (ARRAY(d[data+0x4c])+0)->POINTER(tmp_pointer_9[temp])
	Call FUNC_print_array_2; Params: POINTER(tmp_pointer_9[temp]), 2
	RETURN 0
