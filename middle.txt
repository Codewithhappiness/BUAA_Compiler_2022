###### GLOBAL STRING ######
STR_1 : 19373630\n
STR_2 : \n

###### GLOBAL ARRAY ######
[0x1c]array const_array: 0
[0x20]array const_double: 0
[0x24]array array: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[0x1b4]array matrix_A: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[0x344]array matrix_B: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

###### GLOBAL VAR ######
[0x0]const_a: 1
[0x4]const_b: 2
[0x8]const_c: 2
[0xc]const_d: 3
[0x10]int_c: 3
[0x14]int_d: 0
[0x18]int_e: 2

###### TEXT ######
JUMP FUNC_main
# func output_id : stack size 0x0
# param: 
FUNC_output_id:
	JUMP L_OR_EXP_0
L_OR_EXP_0:
	JUMP L_AND_EXP_2
L_AND_EXP_2:
	NOT, INT(tmp_int_12406[temp]), 0
	ASS, INT(tmp_int_12407[temp]), INT(tmp_int_12406[temp])
	Branch INT(tmp_int_12406[temp]) ? AND_4 : AND_END_3
AND_4:
	AND, INT(tmp_int_12407[temp]), 0, INT(tmp_int_12407[temp])
	Branch INT(tmp_int_12407[temp]) ? AND_5 : AND_END_3
AND_5:
	JUMP AND_END_3
AND_END_3:
	ASS, INT(tmp_int_12408[temp]), INT(tmp_int_12407[temp])
	Branch INT(tmp_int_12408[temp]) ? OR_END_1 : OR_6
OR_6:
	JUMP L_AND_EXP_7
L_AND_EXP_7:
	ASS, INT(tmp_int_12409[temp]), 1
	Branch 1 ? AND_9 : AND_END_8
AND_9:
	JUMP AND_END_8
AND_END_8:
	OR, INT(tmp_int_12408[temp]), INT(tmp_int_12409[temp]), INT(tmp_int_12408[temp])
	Branch INT(tmp_int_12408[temp]) ? OR_END_1 : OR_10
OR_10:
	JUMP OR_END_1
OR_END_1:
	Branch INT(tmp_int_12408[temp]) ? IF_BODY_11 : IF_END_12
IF_BODY_11:
	JUMP B_13
B_13:
	PRINT_STR STR_1
	JUMP B_14
B_14:
	JUMP IF_END_12
IF_END_12:
	RETURN VOID
# func output_a_plus_b : stack size 0x8
# param: INT(a[sp-0x4]), INT(b[sp-0x8])
FUNC_output_a_plus_b:
	ADD, INT(tmp_int_12410[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	PRINT_INT INT(tmp_int_12410[temp])
	PRINT_STR STR_2
	RETURN VOID
# func A_plus_B : stack size 0x8
# param: INT(a[sp-0x4]), INT(b[sp-0x8])
FUNC_A_plus_B:
	ADD, INT(tmp_int_12411[temp]), INT(a[sp-0x4]), INT(b[sp-0x8])
	RETURN INT(tmp_int_12411[temp])
# func return_one : stack size 0x0
# param: 
FUNC_return_one:
	RETURN 1
# func factorial : stack size 0x4
# param: INT(n[sp-0x4])
FUNC_factorial:
	JUMP L_OR_EXP_19
L_OR_EXP_19:
	JUMP L_AND_EXP_21
L_AND_EXP_21:
	MUL, INT(tmp_int_12412[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_12412[temp]), INT(tmp_int_12412[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12412[temp]))->POINTER(tmp_pointer_3209[temp])
	LOAD POINTER(tmp_pointer_3209[temp]), INT(tmp_int_12413[temp])
	NEQ, INT(tmp_int_12414[temp]), INT(tmp_int_12413[temp]), 0
	ASS, INT(tmp_int_12415[temp]), INT(tmp_int_12414[temp])
	Branch INT(tmp_int_12414[temp]) ? AND_23 : AND_END_22
AND_23:
	JUMP AND_END_22
AND_END_22:
	ASS, INT(tmp_int_12416[temp]), INT(tmp_int_12415[temp])
	Branch INT(tmp_int_12416[temp]) ? OR_END_20 : OR_24
OR_24:
	JUMP OR_END_20
OR_END_20:
	Branch INT(tmp_int_12416[temp]) ? IF_BODY_25 : IF_ELSE_27
IF_BODY_25:
	JUMP B_28
B_28:
	MUL, INT(tmp_int_12417[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_12417[temp]), INT(tmp_int_12417[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12417[temp]))->POINTER(tmp_pointer_3210[temp])
	LOAD POINTER(tmp_pointer_3210[temp]), INT(tmp_int_12418[temp])
	RETURN INT(tmp_int_12418[temp])
	JUMP B_29
B_29:
	JUMP IF_END_26
IF_ELSE_27:
	JUMP B_30
B_30:
	SUB, INT(tmp_int_12420[temp]), INT(n[sp-0x4]), 1
	MUL, INT(tmp_int_12419[temp]), INT(tmp_int_12420[temp]), 4
	ADD, INT(tmp_int_12419[temp]), INT(tmp_int_12419[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12419[temp]))->POINTER(tmp_pointer_3211[temp])
	SUB, INT(tmp_int_12421[temp]), INT(n[sp-0x4]), 1
	Call FUNC_factorial; Params: INT(tmp_int_12421[temp]); RET INT(tmp_int_12422[temp])
	STORE POINTER(tmp_pointer_3211[temp]), INT(tmp_int_12422[temp])
	MUL, INT(tmp_int_12423[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_12423[temp]), INT(tmp_int_12423[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12423[temp]))->POINTER(tmp_pointer_3212[temp])
	SUB, INT(tmp_int_12425[temp]), INT(n[sp-0x4]), 1
	MUL, INT(tmp_int_12424[temp]), INT(tmp_int_12425[temp]), 4
	ADD, INT(tmp_int_12424[temp]), INT(tmp_int_12424[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12424[temp]))->POINTER(tmp_pointer_3213[temp])
	LOAD POINTER(tmp_pointer_3213[temp]), INT(tmp_int_12426[temp])
	MUL, INT(tmp_int_12427[temp]), INT(tmp_int_12426[temp]), INT(n[sp-0x4])
	STORE POINTER(tmp_pointer_3212[temp]), INT(tmp_int_12427[temp])
	MUL, INT(tmp_int_12428[temp]), INT(n[sp-0x4]), 4
	ADD, INT(tmp_int_12428[temp]), INT(tmp_int_12428[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12428[temp]))->POINTER(tmp_pointer_3214[temp])
	LOAD POINTER(tmp_pointer_3214[temp]), INT(tmp_int_12429[temp])
	RETURN INT(tmp_int_12429[temp])
	JUMP B_31
B_31:
	JUMP IF_END_26
IF_END_26:
	RETURN 0
# func isPrime : stack size 0x8
# param: INT(n[sp-0x4])
FUNC_isPrime:
	DEF, INT(i[sp-0x8]), 3
	JUMP L_OR_EXP_33
L_OR_EXP_33:
	JUMP L_AND_EXP_35
L_AND_EXP_35:
	LE, INT(tmp_int_12430[temp]), INT(n[sp-0x4]), 0
	ASS, INT(tmp_int_12431[temp]), INT(tmp_int_12430[temp])
	Branch INT(tmp_int_12430[temp]) ? AND_37 : AND_END_36
AND_37:
	JUMP AND_END_36
AND_END_36:
	ASS, INT(tmp_int_12432[temp]), INT(tmp_int_12431[temp])
	Branch INT(tmp_int_12432[temp]) ? OR_END_34 : OR_38
OR_38:
	JUMP OR_END_34
OR_END_34:
	Branch INT(tmp_int_12432[temp]) ? IF_BODY_39 : IF_END_40
IF_BODY_39:
	JUMP B_41
B_41:
	RETURN 0
	JUMP B_42
B_42:
	JUMP IF_END_40
IF_END_40:
	JUMP L_OR_EXP_43
L_OR_EXP_43:
	JUMP L_AND_EXP_45
L_AND_EXP_45:
	MOD, INT(tmp_int_12433[temp]), INT(n[sp-0x4]), 2
	EQ, INT(tmp_int_12434[temp]), INT(tmp_int_12433[temp]), 0
	ASS, INT(tmp_int_12435[temp]), INT(tmp_int_12434[temp])
	Branch INT(tmp_int_12434[temp]) ? AND_47 : AND_END_46
AND_47:
	JUMP AND_END_46
AND_END_46:
	ASS, INT(tmp_int_12436[temp]), INT(tmp_int_12435[temp])
	Branch INT(tmp_int_12436[temp]) ? OR_END_44 : OR_48
OR_48:
	JUMP OR_END_44
OR_END_44:
	Branch INT(tmp_int_12436[temp]) ? IF_BODY_49 : IF_END_50
IF_BODY_49:
	JUMP B_51
B_51:
	RETURN 0
	JUMP B_52
B_52:
	JUMP IF_END_50
IF_END_50:
	JUMP WHILE_53
WHILE_53:
	JUMP L_OR_EXP_56
L_OR_EXP_56:
	JUMP L_AND_EXP_58
L_AND_EXP_58:
	DIV, INT(tmp_int_12438[temp]), INT(n[sp-0x4]), 2
	LT, INT(tmp_int_12437[temp]), INT(i[sp-0x8]), INT(tmp_int_12438[temp])
	ASS, INT(tmp_int_12439[temp]), INT(tmp_int_12437[temp])
	Branch INT(tmp_int_12437[temp]) ? AND_60 : AND_END_59
AND_60:
	JUMP AND_END_59
AND_END_59:
	ASS, INT(tmp_int_12440[temp]), INT(tmp_int_12439[temp])
	Branch INT(tmp_int_12440[temp]) ? OR_END_57 : OR_61
OR_61:
	JUMP OR_END_57
OR_END_57:
	Branch INT(tmp_int_12440[temp]) ? WHILE_BODY_54 : WHILE_END_55
WHILE_BODY_54:
	JUMP B_62
B_62:
	JUMP L_OR_EXP_63
	JUMP B_73
L_OR_EXP_63:
	JUMP L_AND_EXP_65
L_AND_EXP_65:
	MOD, INT(tmp_int_12441[temp]), INT(n[sp-0x4]), INT(i[sp-0x8])
	EQ, INT(tmp_int_12442[temp]), INT(tmp_int_12441[temp]), 0
	ASS, INT(tmp_int_12443[temp]), INT(tmp_int_12442[temp])
	Branch INT(tmp_int_12442[temp]) ? AND_67 : AND_END_66
AND_67:
	JUMP AND_END_66
AND_END_66:
	ASS, INT(tmp_int_12444[temp]), INT(tmp_int_12443[temp])
	Branch INT(tmp_int_12444[temp]) ? OR_END_64 : OR_68
OR_68:
	JUMP OR_END_64
OR_END_64:
	Branch INT(tmp_int_12444[temp]) ? IF_BODY_69 : IF_END_70
IF_BODY_69:
	JUMP B_71
B_71:
	RETURN 0
	JUMP B_72
B_72:
	JUMP IF_END_70
IF_END_70:
	ADD, INT(tmp_int_12445[temp]), INT(i[sp-0x8]), 2
	ASS, INT(i[sp-0x8]), INT(tmp_int_12445[temp])
	JUMP B_73
B_73:
	JUMP WHILE_53
WHILE_END_55:
	ADD, INT(tmp_int_12446[temp]), 1, 1
	DIV, INT(tmp_int_12448[temp]), 1, 1
	SUB, INT(tmp_int_12447[temp]), INT(tmp_int_12446[temp]), INT(tmp_int_12448[temp])
	RETURN INT(tmp_int_12447[temp])
# func sumMatrix : stack size 0x10
# param: ARRAY(array_f[sp-0x4])
FUNC_sumMatrix:
	DEF, INT(i[sp-0x8]), 0
	DEF, INT(j[sp-0xc]), 0
	DEF, INT(sum[sp-0x10]), 0
	JUMP WHILE_75
WHILE_75:
	JUMP L_OR_EXP_78
L_OR_EXP_78:
	JUMP L_AND_EXP_80
L_AND_EXP_80:
	LT, INT(tmp_int_12449[temp]), INT(i[sp-0x8]), 10
	ASS, INT(tmp_int_12450[temp]), INT(tmp_int_12449[temp])
	Branch INT(tmp_int_12449[temp]) ? AND_82 : AND_END_81
AND_82:
	JUMP AND_END_81
AND_END_81:
	ASS, INT(tmp_int_12451[temp]), INT(tmp_int_12450[temp])
	Branch INT(tmp_int_12451[temp]) ? OR_END_79 : OR_83
OR_83:
	JUMP OR_END_79
OR_END_79:
	Branch INT(tmp_int_12451[temp]) ? WHILE_BODY_76 : WHILE_END_77
WHILE_BODY_76:
	JUMP B_84
B_84:
	ASS, INT(j[sp-0xc]), 0
	JUMP WHILE_85
	JUMP B_96
WHILE_85:
	JUMP L_OR_EXP_88
L_OR_EXP_88:
	JUMP L_AND_EXP_90
L_AND_EXP_90:
	LT, INT(tmp_int_12452[temp]), INT(j[sp-0xc]), 10
	ASS, INT(tmp_int_12453[temp]), INT(tmp_int_12452[temp])
	Branch INT(tmp_int_12452[temp]) ? AND_92 : AND_END_91
AND_92:
	JUMP AND_END_91
AND_END_91:
	ASS, INT(tmp_int_12454[temp]), INT(tmp_int_12453[temp])
	Branch INT(tmp_int_12454[temp]) ? OR_END_89 : OR_93
OR_93:
	JUMP OR_END_89
OR_END_89:
	Branch INT(tmp_int_12454[temp]) ? WHILE_BODY_86 : WHILE_END_87
WHILE_BODY_86:
	JUMP B_94
B_94:
	MUL, INT(tmp_int_12456[temp]), INT(j[sp-0xc]), 4
	ADD, INT(tmp_int_12456[temp]), INT(tmp_int_12456[temp]), 0
	MUL, INT(tmp_int_12457[temp]), INT(i[sp-0x8]), 40
	ADD, INT(tmp_int_12457[temp]), INT(tmp_int_12457[temp]), INT(tmp_int_12456[temp])
	OFFSET (ARRAY(array_f[sp-0x4])+INT(tmp_int_12457[temp]))->POINTER(tmp_pointer_3215[temp])
	LOAD POINTER(tmp_pointer_3215[temp]), INT(tmp_int_12458[temp])
	ADD, INT(tmp_int_12455[temp]), INT(sum[sp-0x10]), INT(tmp_int_12458[temp])
	ASS, INT(sum[sp-0x10]), INT(tmp_int_12455[temp])
	ADD, INT(tmp_int_12459[temp]), INT(j[sp-0xc]), 1
	ASS, INT(j[sp-0xc]), INT(tmp_int_12459[temp])
	JUMP B_95
B_95:
	JUMP WHILE_85
WHILE_END_87:
	ADD, INT(tmp_int_12460[temp]), INT(i[sp-0x8]), 1
	ASS, INT(i[sp-0x8]), INT(tmp_int_12460[temp])
	JUMP B_96
B_96:
	JUMP WHILE_75
WHILE_END_77:
	RETURN INT(sum[sp-0x10])
# func matrixMulti : stack size 0x1a8
# param: ARRAY(matrix_a[sp-0x4]), ARRAY(matrix_b[sp-0x8]), INT(row[sp-0xc])
FUNC_matrixMulti:
	DEF, INT(i[sp-0x1a0]), 0
	DEF, INT(j[sp-0x1a4]), 0
	DEF, INT(k[sp-0x1a8]), 0
	JUMP WHILE_98
WHILE_98:
	JUMP L_OR_EXP_101
L_OR_EXP_101:
	JUMP L_AND_EXP_103
L_AND_EXP_103:
	LT, INT(tmp_int_12461[temp]), INT(i[sp-0x1a0]), 10
	ASS, INT(tmp_int_12462[temp]), INT(tmp_int_12461[temp])
	Branch INT(tmp_int_12461[temp]) ? AND_105 : AND_END_104
AND_105:
	JUMP AND_END_104
AND_END_104:
	ASS, INT(tmp_int_12463[temp]), INT(tmp_int_12462[temp])
	Branch INT(tmp_int_12463[temp]) ? OR_END_102 : OR_106
OR_106:
	JUMP OR_END_102
OR_END_102:
	Branch INT(tmp_int_12463[temp]) ? WHILE_BODY_99 : WHILE_END_100
WHILE_BODY_99:
	JUMP B_107
B_107:
	ASS, INT(j[sp-0x1a4]), 0
	JUMP WHILE_108
	JUMP B_130
WHILE_108:
	JUMP L_OR_EXP_111
L_OR_EXP_111:
	JUMP L_AND_EXP_113
L_AND_EXP_113:
	LT, INT(tmp_int_12464[temp]), INT(j[sp-0x1a4]), 10
	ASS, INT(tmp_int_12465[temp]), INT(tmp_int_12464[temp])
	Branch INT(tmp_int_12464[temp]) ? AND_115 : AND_END_114
AND_115:
	JUMP AND_END_114
AND_END_114:
	ASS, INT(tmp_int_12466[temp]), INT(tmp_int_12465[temp])
	Branch INT(tmp_int_12466[temp]) ? OR_END_112 : OR_116
OR_116:
	JUMP OR_END_112
OR_END_112:
	Branch INT(tmp_int_12466[temp]) ? WHILE_BODY_109 : WHILE_END_110
WHILE_BODY_109:
	JUMP B_117
B_117:
	ASS, INT(k[sp-0x1a8]), 0
	MUL, INT(tmp_int_12467[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_12467[temp]), INT(tmp_int_12467[temp]), 0
	MUL, INT(tmp_int_12468[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_12468[temp]), INT(tmp_int_12468[temp]), INT(tmp_int_12467[temp])
	OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_12468[temp]))->POINTER(tmp_pointer_3216[temp])
	STORE POINTER(tmp_pointer_3216[temp]), 0
	JUMP WHILE_118
	JUMP B_129
WHILE_118:
	JUMP L_OR_EXP_121
L_OR_EXP_121:
	JUMP L_AND_EXP_123
L_AND_EXP_123:
	LT, INT(tmp_int_12469[temp]), INT(k[sp-0x1a8]), 10
	ASS, INT(tmp_int_12470[temp]), INT(tmp_int_12469[temp])
	Branch INT(tmp_int_12469[temp]) ? AND_125 : AND_END_124
AND_125:
	JUMP AND_END_124
AND_END_124:
	ASS, INT(tmp_int_12471[temp]), INT(tmp_int_12470[temp])
	Branch INT(tmp_int_12471[temp]) ? OR_END_122 : OR_126
OR_126:
	JUMP OR_END_122
OR_END_122:
	Branch INT(tmp_int_12471[temp]) ? WHILE_BODY_119 : WHILE_END_120
WHILE_BODY_119:
	JUMP B_127
B_127:
	MUL, INT(tmp_int_12472[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_12472[temp]), INT(tmp_int_12472[temp]), 0
	MUL, INT(tmp_int_12473[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_12473[temp]), INT(tmp_int_12473[temp]), INT(tmp_int_12472[temp])
	OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_12473[temp]))->POINTER(tmp_pointer_3217[temp])
	MUL, INT(tmp_int_12474[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_12474[temp]), INT(tmp_int_12474[temp]), 0
	MUL, INT(tmp_int_12475[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_12475[temp]), INT(tmp_int_12475[temp]), INT(tmp_int_12474[temp])
	OFFSET (ARRAY(matrix_c[sp-0x19c])+INT(tmp_int_12475[temp]))->POINTER(tmp_pointer_3218[temp])
	LOAD POINTER(tmp_pointer_3218[temp]), INT(tmp_int_12476[temp])
	MUL, INT(tmp_int_12478[temp]), INT(k[sp-0x1a8]), 4
	ADD, INT(tmp_int_12478[temp]), INT(tmp_int_12478[temp]), 0
	MUL, INT(tmp_int_12479[temp]), INT(i[sp-0x1a0]), 40
	ADD, INT(tmp_int_12479[temp]), INT(tmp_int_12479[temp]), INT(tmp_int_12478[temp])
	OFFSET (ARRAY(matrix_a[sp-0x4])+INT(tmp_int_12479[temp]))->POINTER(tmp_pointer_3219[temp])
	LOAD POINTER(tmp_pointer_3219[temp]), INT(tmp_int_12480[temp])
	MUL, INT(tmp_int_12482[temp]), INT(j[sp-0x1a4]), 4
	ADD, INT(tmp_int_12482[temp]), INT(tmp_int_12482[temp]), 0
	MUL, INT(tmp_int_12483[temp]), INT(k[sp-0x1a8]), 40
	ADD, INT(tmp_int_12483[temp]), INT(tmp_int_12483[temp]), INT(tmp_int_12482[temp])
	OFFSET (ARRAY(matrix_b[sp-0x8])+INT(tmp_int_12483[temp]))->POINTER(tmp_pointer_3220[temp])
	LOAD POINTER(tmp_pointer_3220[temp]), INT(tmp_int_12484[temp])
	MUL, INT(tmp_int_12481[temp]), INT(tmp_int_12480[temp]), INT(tmp_int_12484[temp])
	ADD, INT(tmp_int_12477[temp]), INT(tmp_int_12476[temp]), INT(tmp_int_12481[temp])
	STORE POINTER(tmp_pointer_3217[temp]), INT(tmp_int_12477[temp])
	ADD, INT(tmp_int_12485[temp]), INT(k[sp-0x1a8]), 1
	ASS, INT(k[sp-0x1a8]), INT(tmp_int_12485[temp])
	JUMP B_128
B_128:
	JUMP WHILE_118
WHILE_END_120:
	ADD, INT(tmp_int_12486[temp]), INT(j[sp-0x1a4]), 1
	ASS, INT(j[sp-0x1a4]), INT(tmp_int_12486[temp])
	JUMP B_129
B_129:
	JUMP WHILE_108
WHILE_END_110:
	ADD, INT(tmp_int_12487[temp]), INT(i[sp-0x1a0]), 1
	ASS, INT(i[sp-0x1a0]), INT(tmp_int_12487[temp])
	JUMP B_130
B_130:
	JUMP WHILE_98
WHILE_END_100:
	OFFSET (ARRAY(matrix_c[sp-0x19c])+0)->POINTER(tmp_pointer_3221[temp])
	Call FUNC_sumMatrix; Params: POINTER(tmp_pointer_3221[temp]); RET INT(tmp_int_12488[temp])
	RETURN INT(tmp_int_12488[temp])
# func main : stack size 0x8
# param: 
FUNC_main:
	Call FUNC_output_id; Params: 
	MUL, INT(tmp_int_12490[temp]), 3, 3
	ADD, INT(tmp_int_12489[temp]), 80, INT(tmp_int_12490[temp])
	Call FUNC_isPrime; Params: INT(tmp_int_12489[temp]); RET INT(tmp_int_12491[temp])
	PRINT_INT INT(tmp_int_12491[temp])
	PRINT_STR STR_2
	JUMP L_OR_EXP_132
L_OR_EXP_132:
	JUMP L_AND_EXP_134
L_AND_EXP_134:
	GE, INT(tmp_int_12492[temp]), INT(const_b[data+0x4]), INT(int_c[data+0x10])
	ASS, INT(tmp_int_12493[temp]), INT(tmp_int_12492[temp])
	Branch INT(tmp_int_12492[temp]) ? AND_136 : AND_END_135
AND_136:
	JUMP AND_END_135
AND_END_135:
	ASS, INT(tmp_int_12494[temp]), INT(tmp_int_12493[temp])
	Branch INT(tmp_int_12494[temp]) ? OR_END_133 : OR_137
OR_137:
	JUMP OR_END_133
OR_END_133:
	Branch INT(tmp_int_12494[temp]) ? IF_BODY_138 : IF_END_139
IF_BODY_138:
	JUMP B_140
B_140:
	ASS, INT(int_d[data+0x14]), 1
	JUMP B_141
B_141:
	JUMP IF_END_139
IF_END_139:
	JUMP L_OR_EXP_142
L_OR_EXP_142:
	JUMP L_AND_EXP_144
L_AND_EXP_144:
	EQ, INT(tmp_int_12495[temp]), INT(const_b[data+0x4]), INT(int_d[data+0x14])
	ASS, INT(tmp_int_12496[temp]), INT(tmp_int_12495[temp])
	Branch INT(tmp_int_12495[temp]) ? AND_146 : AND_END_145
AND_146:
	JUMP AND_END_145
AND_END_145:
	ASS, INT(tmp_int_12497[temp]), INT(tmp_int_12496[temp])
	Branch INT(tmp_int_12497[temp]) ? OR_END_143 : OR_147
OR_147:
	JUMP OR_END_143
OR_END_143:
	Branch INT(tmp_int_12497[temp]) ? IF_BODY_148 : IF_END_149
IF_BODY_148:
	JUMP B_150
B_150:
	ASS, INT(int_e[data+0x18]), 0
	JUMP B_151
B_151:
	JUMP IF_END_149
IF_END_149:
	JUMP L_OR_EXP_152
L_OR_EXP_152:
	JUMP L_AND_EXP_154
L_AND_EXP_154:
	GT, INT(tmp_int_12498[temp]), INT(const_b[data+0x4]), INT(int_e[data+0x18])
	ASS, INT(tmp_int_12499[temp]), INT(tmp_int_12498[temp])
	Branch INT(tmp_int_12498[temp]) ? AND_156 : AND_END_155
AND_156:
	JUMP AND_END_155
AND_END_155:
	ASS, INT(tmp_int_12500[temp]), INT(tmp_int_12499[temp])
	Branch INT(tmp_int_12500[temp]) ? OR_END_153 : OR_157
OR_157:
	JUMP OR_END_153
OR_END_153:
	Branch INT(tmp_int_12500[temp]) ? IF_BODY_158 : IF_ELSE_160
IF_BODY_158:
	JUMP B_161
B_161:
	ASS, INT(int_d[data+0x14]), 3
	JUMP B_162
B_162:
	JUMP IF_END_159
IF_ELSE_160:
	JUMP B_163
B_163:
	ASS, INT(int_d[data+0x14]), 4
	JUMP B_164
B_164:
	JUMP IF_END_159
IF_END_159:
	DEF, INT(i[sp-0x4]), 5
	DEF, INT(j[sp-0x8]), 0
	MUL, INT(tmp_int_12502[temp]), 3, 2
	DIV, INT(tmp_int_12503[temp]), INT(tmp_int_12502[temp]), 2
	ADD, INT(tmp_int_12501[temp]), INT(i[sp-0x4]), INT(tmp_int_12503[temp])
	ASS, INT(int_c[data+0x10]), INT(tmp_int_12501[temp])
	ASS, INT(i[sp-0x4]), 0
	JUMP WHILE_165
WHILE_165:
	JUMP L_OR_EXP_168
L_OR_EXP_168:
	JUMP L_AND_EXP_170
L_AND_EXP_170:
	LT, INT(tmp_int_12504[temp]), INT(i[sp-0x4]), 100
	ASS, INT(tmp_int_12505[temp]), INT(tmp_int_12504[temp])
	Branch INT(tmp_int_12504[temp]) ? AND_172 : AND_END_171
AND_172:
	JUMP AND_END_171
AND_END_171:
	ASS, INT(tmp_int_12506[temp]), INT(tmp_int_12505[temp])
	Branch INT(tmp_int_12506[temp]) ? OR_END_169 : OR_173
OR_173:
	JUMP OR_END_169
OR_END_169:
	Branch INT(tmp_int_12506[temp]) ? WHILE_BODY_166 : WHILE_END_167
WHILE_BODY_166:
	JUMP B_174
B_174:
	JUMP L_OR_EXP_175
	JUMP B_192
L_OR_EXP_175:
	JUMP L_AND_EXP_177
L_AND_EXP_177:
	EQ, INT(tmp_int_12507[temp]), INT(i[sp-0x4]), 0
	ASS, INT(tmp_int_12508[temp]), INT(tmp_int_12507[temp])
	Branch INT(tmp_int_12507[temp]) ? AND_179 : AND_END_178
AND_179:
	JUMP AND_END_178
AND_END_178:
	ASS, INT(tmp_int_12509[temp]), INT(tmp_int_12508[temp])
	Branch INT(tmp_int_12509[temp]) ? OR_END_176 : OR_180
OR_180:
	JUMP L_AND_EXP_181
L_AND_EXP_181:
	EQ, INT(tmp_int_12510[temp]), INT(i[sp-0x4]), 1
	ASS, INT(tmp_int_12511[temp]), INT(tmp_int_12510[temp])
	Branch INT(tmp_int_12510[temp]) ? AND_183 : AND_END_182
AND_183:
	JUMP AND_END_182
AND_END_182:
	OR, INT(tmp_int_12509[temp]), INT(tmp_int_12511[temp]), INT(tmp_int_12509[temp])
	Branch INT(tmp_int_12509[temp]) ? OR_END_176 : OR_184
OR_184:
	JUMP OR_END_176
OR_END_176:
	Branch INT(tmp_int_12509[temp]) ? IF_BODY_185 : IF_ELSE_187
IF_BODY_185:
	JUMP B_188
B_188:
	MUL, INT(tmp_int_12512[temp]), INT(i[sp-0x4]), 4
	ADD, INT(tmp_int_12512[temp]), INT(tmp_int_12512[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12512[temp]))->POINTER(tmp_pointer_3222[temp])
	STORE POINTER(tmp_pointer_3222[temp]), 1
	JUMP B_189
B_189:
	JUMP IF_END_186
IF_ELSE_187:
	JUMP B_190
B_190:
	MUL, INT(tmp_int_12513[temp]), INT(i[sp-0x4]), 4
	ADD, INT(tmp_int_12513[temp]), INT(tmp_int_12513[temp]), 0
	OFFSET (ARRAY(array[data+0x24])+INT(tmp_int_12513[temp]))->POINTER(tmp_pointer_3223[temp])
	STORE POINTER(tmp_pointer_3223[temp]), 0
	JUMP B_191
B_191:
	JUMP IF_END_186
IF_END_186:
	ADD, INT(tmp_int_12514[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_12514[temp])
	JUMP B_192
B_192:
	JUMP WHILE_165
WHILE_END_167:
	ASS, INT(i[sp-0x4]), 5
	JUMP B_193
B_193:
	JUMP B_194
B_194:
	JUMP WHILE_195
WHILE_195:
	JUMP L_OR_EXP_198
L_OR_EXP_198:
	JUMP L_AND_EXP_200
L_AND_EXP_200:
	LT, INT(tmp_int_12515[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	ASS, INT(tmp_int_12516[temp]), INT(tmp_int_12515[temp])
	Branch INT(tmp_int_12515[temp]) ? AND_202 : AND_END_201
AND_202:
	JUMP AND_END_201
AND_END_201:
	ASS, INT(tmp_int_12517[temp]), INT(tmp_int_12516[temp])
	Branch INT(tmp_int_12517[temp]) ? OR_END_199 : OR_203
OR_203:
	JUMP L_AND_EXP_204
L_AND_EXP_204:
	GT, INT(tmp_int_12518[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	ASS, INT(tmp_int_12519[temp]), INT(tmp_int_12518[temp])
	Branch INT(tmp_int_12518[temp]) ? AND_206 : AND_END_205
AND_206:
	JUMP AND_END_205
AND_END_205:
	OR, INT(tmp_int_12517[temp]), INT(tmp_int_12519[temp]), INT(tmp_int_12517[temp])
	Branch INT(tmp_int_12517[temp]) ? OR_END_199 : OR_207
OR_207:
	JUMP OR_END_199
OR_END_199:
	Branch INT(tmp_int_12517[temp]) ? WHILE_BODY_196 : WHILE_END_197
WHILE_BODY_196:
	JUMP B_208
B_208:
	Call FUNC_factorial; Params: INT(i[sp-0x4]); RET INT(tmp_int_12520[temp])
	PRINT_INT INT(tmp_int_12520[temp])
	PRINT_STR STR_2
	ADD, INT(tmp_int_12521[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_12521[temp])
	JUMP L_OR_EXP_209
	JUMP B_222
L_OR_EXP_209:
	JUMP L_AND_EXP_211
L_AND_EXP_211:
	EQ, INT(tmp_int_12522[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	ASS, INT(tmp_int_12523[temp]), INT(tmp_int_12522[temp])
	Branch INT(tmp_int_12522[temp]) ? AND_213 : AND_END_212
AND_213:
	JUMP AND_END_212
AND_END_212:
	ASS, INT(tmp_int_12524[temp]), INT(tmp_int_12523[temp])
	Branch INT(tmp_int_12524[temp]) ? OR_END_210 : OR_214
OR_214:
	JUMP OR_END_210
OR_END_210:
	Branch INT(tmp_int_12524[temp]) ? IF_BODY_215 : IF_ELSE_217
IF_BODY_215:
	JUMP B_218
B_218:
	JUMP WHILE_END_197
	JUMP B_219
B_219:
	JUMP IF_END_216
IF_ELSE_217:
	JUMP B_220
B_220:
	JUMP WHILE_195
	JUMP B_221
B_221:
	JUMP IF_END_216
IF_END_216:
	JUMP B_222
B_222:
	JUMP WHILE_195
WHILE_END_197:
	JUMP L_OR_EXP_223
L_OR_EXP_223:
	JUMP L_AND_EXP_225
L_AND_EXP_225:
	EQ, INT(tmp_int_12525[temp]), INT(i[sp-0x4]), INT(int_c[data+0x10])
	ASS, INT(tmp_int_12526[temp]), INT(tmp_int_12525[temp])
	Branch INT(tmp_int_12525[temp]) ? AND_227 : AND_END_226
AND_227:
	JUMP AND_END_226
AND_END_226:
	ASS, INT(tmp_int_12527[temp]), INT(tmp_int_12526[temp])
	Branch INT(tmp_int_12527[temp]) ? OR_END_224 : OR_228
OR_228:
	JUMP OR_END_224
OR_END_224:
	Branch INT(tmp_int_12527[temp]) ? IF_BODY_229 : IF_END_230
IF_BODY_229:
	JUMP B_231
B_231:
	Call FUNC_return_one; Params: ; RET INT(tmp_int_12528[temp])
	PRINT_INT INT(tmp_int_12528[temp])
	PRINT_STR STR_2
	JUMP B_232
B_232:
	JUMP IF_END_230
IF_END_230:
	Call FUNC_A_plus_B; Params: 1, 1; RET INT(tmp_int_12529[temp])
	PRINT_INT INT(tmp_int_12529[temp])
	PRINT_STR STR_2
	Call FUNC_output_a_plus_b; Params: 2, 2
	GETINT INT(i[sp-0x4])
	PRINT_INT INT(i[sp-0x4])
	PRINT_STR STR_2
	ASS, INT(i[sp-0x4]), 0
	JUMP WHILE_233
WHILE_233:
	JUMP L_OR_EXP_236
L_OR_EXP_236:
	JUMP L_AND_EXP_238
L_AND_EXP_238:
	LT, INT(tmp_int_12530[temp]), INT(i[sp-0x4]), 10
	ASS, INT(tmp_int_12531[temp]), INT(tmp_int_12530[temp])
	Branch INT(tmp_int_12530[temp]) ? AND_240 : AND_END_239
AND_240:
	JUMP AND_END_239
AND_END_239:
	ASS, INT(tmp_int_12532[temp]), INT(tmp_int_12531[temp])
	Branch INT(tmp_int_12532[temp]) ? OR_END_237 : OR_241
OR_241:
	JUMP OR_END_237
OR_END_237:
	Branch INT(tmp_int_12532[temp]) ? WHILE_BODY_234 : WHILE_END_235
WHILE_BODY_234:
	JUMP B_242
B_242:
	ASS, INT(j[sp-0x8]), 0
	JUMP WHILE_243
	JUMP B_254
WHILE_243:
	JUMP L_OR_EXP_246
L_OR_EXP_246:
	JUMP L_AND_EXP_248
L_AND_EXP_248:
	LT, INT(tmp_int_12533[temp]), INT(j[sp-0x8]), 10
	ASS, INT(tmp_int_12534[temp]), INT(tmp_int_12533[temp])
	Branch INT(tmp_int_12533[temp]) ? AND_250 : AND_END_249
AND_250:
	JUMP AND_END_249
AND_END_249:
	ASS, INT(tmp_int_12535[temp]), INT(tmp_int_12534[temp])
	Branch INT(tmp_int_12535[temp]) ? OR_END_247 : OR_251
OR_251:
	JUMP OR_END_247
OR_END_247:
	Branch INT(tmp_int_12535[temp]) ? WHILE_BODY_244 : WHILE_END_245
WHILE_BODY_244:
	JUMP B_252
B_252:
	MUL, INT(tmp_int_12536[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_12536[temp]), INT(tmp_int_12536[temp]), 0
	MUL, INT(tmp_int_12537[temp]), INT(i[sp-0x4]), 40
	ADD, INT(tmp_int_12537[temp]), INT(tmp_int_12537[temp]), INT(tmp_int_12536[temp])
	OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_12537[temp]))->POINTER(tmp_pointer_3224[temp])
	ADD, INT(tmp_int_12538[temp]), INT(i[sp-0x4]), 1
	STORE POINTER(tmp_pointer_3224[temp]), INT(tmp_int_12538[temp])
	MUL, INT(tmp_int_12539[temp]), INT(j[sp-0x8]), 4
	ADD, INT(tmp_int_12539[temp]), INT(tmp_int_12539[temp]), 0
	MUL, INT(tmp_int_12540[temp]), INT(i[sp-0x4]), 40
	ADD, INT(tmp_int_12540[temp]), INT(tmp_int_12540[temp]), INT(tmp_int_12539[temp])
	OFFSET (ARRAY(matrix_B[data+0x344])+INT(tmp_int_12540[temp]))->POINTER(tmp_pointer_3225[temp])
	ADD, INT(tmp_int_12541[temp]), INT(j[sp-0x8]), 1
	STORE POINTER(tmp_pointer_3225[temp]), INT(tmp_int_12541[temp])
	ADD, INT(tmp_int_12542[temp]), INT(j[sp-0x8]), 1
	ASS, INT(j[sp-0x8]), INT(tmp_int_12542[temp])
	JUMP B_253
B_253:
	JUMP WHILE_243
WHILE_END_245:
	ADD, INT(tmp_int_12543[temp]), INT(i[sp-0x4]), 1
	ASS, INT(i[sp-0x4]), INT(tmp_int_12543[temp])
	JUMP B_254
B_254:
	JUMP WHILE_233
WHILE_END_235:
	OFFSET (ARRAY(matrix_A[data+0x1b4])+0)->POINTER(tmp_pointer_3226[temp])
	OFFSET (ARRAY(matrix_B[data+0x344])+0)->POINTER(tmp_pointer_3227[temp])
	MUL, INT(tmp_int_12544[temp]), 1, 4
	ADD, INT(tmp_int_12544[temp]), INT(tmp_int_12544[temp]), 0
	MUL, INT(tmp_int_12545[temp]), 1, 40
	ADD, INT(tmp_int_12545[temp]), INT(tmp_int_12545[temp]), INT(tmp_int_12544[temp])
	OFFSET (ARRAY(matrix_A[data+0x1b4])+INT(tmp_int_12545[temp]))->POINTER(tmp_pointer_3228[temp])
	LOAD POINTER(tmp_pointer_3228[temp]), INT(tmp_int_12546[temp])
	Call FUNC_matrixMulti; Params: POINTER(tmp_pointer_3226[temp]), POINTER(tmp_pointer_3227[temp]), INT(tmp_int_12546[temp]); RET INT(tmp_int_12547[temp])
	PRINT_INT INT(tmp_int_12547[temp])
	PRINT_STR STR_2
	RETURN 0
