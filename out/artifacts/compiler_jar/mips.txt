# Yuelin's Compiler

.data
	global:
	10 0 1 2 3 4 5 6 7 8 9
	.space 4
	STR_1: .asciiz ", "
	STR_2: .asciiz "\n"

.text
	la $gp, global
	j FUNC_main
FUNC_fib:
	lw $5, -0x4($29)
	# JUMP L_OR_EXP_0
L_OR_EXP_0:
	# JUMP L_AND_EXP_1
L_AND_EXP_1:
	# EQ, INT(ti_0[temp]), INT(i[sp-0x4]), 1
	seq $17, $5, 1
	# JUMP AND_END_2
	sw $17, -0x8($29)
AND_END_2:
	# JUMP OR_END_3
OR_END_3:
	# Branch INT(ti_0[sp-0x8]) ? IF_BODY_4 : IF_END_5
	lw $18, -0x8($29)
	bne $18, $0, IF_BODY_4
	j IF_END_5
IF_BODY_4:
	# JUMP B_6
B_6:
	# RETURN 1
	li $2, 1
	jr $ra
	# JUMP B_7
B_7:
	# JUMP IF_END_5
IF_END_5:
	# JUMP L_OR_EXP_8
L_OR_EXP_8:
	# JUMP L_AND_EXP_9
L_AND_EXP_9:
	# EQ, INT(ti_1[temp]), INT(i[sp-0x4]), 2
	seq $19, $5, 2
	# JUMP AND_END_10
	sw $19, -0xc($29)
AND_END_10:
	# JUMP OR_END_11
OR_END_11:
	# Branch INT(ti_1[sp-0xc]) ? IF_BODY_12 : IF_END_13
	lw $20, -0xc($29)
	bne $20, $0, IF_BODY_12
	j IF_END_13
IF_BODY_12:
	# JUMP B_14
B_14:
	# RETURN 2
	li $2, 2
	jr $ra
	# JUMP B_15
B_15:
	# JUMP IF_END_13
IF_END_13:
	# SUB, INT(ti_2[temp]), INT(i[sp-0x4]), 1
	addiu $21, $5, -1
	# Call FUNC_fib; Params: INT(ti_2[temp]); RET INT(ti_3[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -20
	sw $21, -0x4($4)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 20
	lw $31, 0x0($29)
	move $22, $2
	lw $5, -0x4($29)
	# SUB, INT(ti_4[temp]), INT(i[sp-0x4]), 2
	addiu $23, $5, -2
	# Call FUNC_fib; Params: INT(ti_4[temp]); RET INT(ti_5[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -24
	sw $23, -0x4($4)
	sw $22, -0x10($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 24
	lw $31, 0x0($29)
	move $24, $2
	# ADD, INT(ti_6[temp]), INT(ti_3[sp-0x10]), INT(ti_5[temp])
	lw $25, -0x10($29)
	addu $26, $25, $24
	# RETURN INT(ti_6[temp])
	move $2, $26
	jr $ra
	
FUNC_main:
	# DEF, INT(i[sp-0x4]), 2
	li $5, 2
	# DEF, INT(j[sp-0x8]), 5
	li $6, 5
	# GETINT INT(i[sp-0x4])
	li $2, 5
	syscall
	move $5, $2
	# GETINT INT(j[sp-0x8])
	li $2, 5
	syscall
	move $6, $2
	# MUL, INT(ti_7[temp]), INT(i[sp-0x4]), INT(j[sp-0x8])
	mult $5, $6
	mflo $17
	# NEG, INT(ti_8[temp]), INT(ti_7[temp])
	subu $18, $0, $17
	# Call FUNC_fib; Params: 4; RET INT(ti_9[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -28
	li $3, 4
	sw $3, -0x4($4)
	sw $18, -0x18($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 28
	lw $31, 0x0($29)
	move $19, $2
	# MUL, INT(ti_10[temp]), INT(ti_8[sp-0x18]), INT(ti_9[temp])
	lw $20, -0x18($29)
	mult $20, $19
	mflo $21
	# LOAD INT(ti_13[temp]), 4[ARRAY(a[data+0x4])]
	lw $22, 0x8($28)
	# ADD, INT(ti_12[temp]), INT(ti_10[temp]), INT(ti_13[temp])
	addu $23, $21, $22
	# MUL, INT(i[sp-0x4]), INT(ti_12[temp]), 5
	sll $30, $23, 2
	addu $5, $30, $23
	# Call FUNC_fib; Params: 5; RET INT(ti_17[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -28
	li $3, 5
	sw $3, -0x4($4)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 28
	lw $31, 0x0($29)
	move $24, $2
	lw $5, -0x4($29)
	# ADD, INT(ti_18[temp]), INT(ti_17[temp]), 2
	addiu $25, $24, 2
	# Call FUNC_fib; Params: INT(ti_18[temp]); RET INT(ti_19[temp])
	sw $31, 0x0($29)
	addiu $4, $29, -32
	sw $25, -0x4($4)
	sw $5, -0x4($29)
	move $29, $4
	jal FUNC_fib
	addiu $29, $29, 32
	lw $31, 0x0($29)
	move $26, $2
	lw $5, -0x4($29)
	# SUB, INT(ti_20[temp]), 1197, INT(ti_19[temp])
	subu $3, $0, $26
	addiu $27, $3, 1197
	# ADD, INT(j[sp-0x8]), INT(ti_20[temp]), -10091
	addiu $6, $27, -10091
	# JUMP L_OR_EXP_20
L_OR_EXP_20:
	# JUMP L_AND_EXP_21
L_AND_EXP_21:
	# LE, INT(ti_22[temp]), INT(i[sp-0x4]), 100
	sle $17, $5, 100
	# JUMP AND_END_22
	sw $17, -0x1c($29)
AND_END_22:
	# JUMP OR_END_23
OR_END_23:
	# Branch INT(ti_22[sp-0x1c]) ? DO_BODY_17 : DO_END_19
	lw $18, -0x1c($29)
	bne $18, $0, DO_BODY_17
	j DO_END_19
	# JUMP DO_BODY_17
DO_BODY_17:
	# JUMP B_24
B_24:
	# LOAD INT(ti_23[temp]), 0[ARRAY(a[data+0x4])]
	lw $20, 0x4($28)
	# MUL, INT(ti_24[temp]), -6, -6
	li $19, 36
	# ADD, INT(ti_25[temp]), INT(ti_23[temp]), INT(ti_24[temp])
	addu $21, $20, $19
	# STORE INT(ti_25[temp]), 0[ARRAY(a[data+0x4])]
	sw $21, 0x4($28)
	# LOAD INT(ti_26[temp]), 4[ARRAY(a[data+0x4])]
	lw $22, 0x8($28)
	# MUL, INT(ti_27[temp]), -6, -6
	li $23, 36
	# ADD, INT(ti_28[temp]), INT(ti_26[temp]), INT(ti_27[temp])
	addu $24, $22, $23
	# STORE INT(ti_28[temp]), 4[ARRAY(a[data+0x4])]
	sw $24, 0x8($28)
	# LOAD INT(ti_29[temp]), 8[ARRAY(a[data+0x4])]
	lw $25, 0xc($28)
	# MUL, INT(ti_30[temp]), -6, -6
	li $26, 36
	# ADD, INT(ti_31[temp]), INT(ti_29[temp]), INT(ti_30[temp])
	addu $27, $25, $26
	# STORE INT(ti_31[temp]), 8[ARRAY(a[data+0x4])]
	sw $27, 0xc($28)
	# LOAD INT(ti_32[temp]), 12[ARRAY(a[data+0x4])]
	lw $17, 0x10($28)
	# MUL, INT(ti_33[temp]), -6, -6
	li $18, 36
	# ADD, INT(ti_34[temp]), INT(ti_32[temp]), INT(ti_33[temp])
	addu $20, $17, $18
	# STORE INT(ti_34[temp]), 12[ARRAY(a[data+0x4])]
	sw $20, 0x10($28)
	# LOAD INT(ti_35[temp]), 16[ARRAY(a[data+0x4])]
	lw $19, 0x14($28)
	# MUL, INT(ti_36[temp]), -6, -6
	li $21, 36
	# ADD, INT(ti_37[temp]), INT(ti_35[temp]), INT(ti_36[temp])
	addu $22, $19, $21
	# STORE INT(ti_37[temp]), 16[ARRAY(a[data+0x4])]
	sw $22, 0x14($28)
	# LOAD INT(ti_38[temp]), 20[ARRAY(a[data+0x4])]
	lw $23, 0x18($28)
	# MUL, INT(ti_39[temp]), -6, -6
	li $24, 36
	# ADD, INT(ti_40[temp]), INT(ti_38[temp]), INT(ti_39[temp])
	addu $25, $23, $24
	# STORE INT(ti_40[temp]), 20[ARRAY(a[data+0x4])]
	sw $25, 0x18($28)
	# LOAD INT(ti_41[temp]), 24[ARRAY(a[data+0x4])]
	lw $26, 0x1c($28)
	# MUL, INT(ti_42[temp]), -6, -6
	li $27, 36
	# ADD, INT(ti_43[temp]), INT(ti_41[temp]), INT(ti_42[temp])
	addu $17, $26, $27
	# STORE INT(ti_43[temp]), 24[ARRAY(a[data+0x4])]
	sw $17, 0x1c($28)
	# LOAD INT(ti_44[temp]), 28[ARRAY(a[data+0x4])]
	lw $18, 0x20($28)
	# MUL, INT(ti_45[temp]), -6, -6
	li $20, 36
	# ADD, INT(ti_46[temp]), INT(ti_44[temp]), INT(ti_45[temp])
	addu $19, $18, $20
	# STORE INT(ti_46[temp]), 28[ARRAY(a[data+0x4])]
	sw $19, 0x20($28)
	# LOAD INT(ti_47[temp]), 32[ARRAY(a[data+0x4])]
	lw $21, 0x24($28)
	# MUL, INT(ti_48[temp]), -6, -6
	li $22, 36
	# ADD, INT(ti_49[temp]), INT(ti_47[temp]), INT(ti_48[temp])
	addu $23, $21, $22
	# STORE INT(ti_49[temp]), 32[ARRAY(a[data+0x4])]
	sw $23, 0x24($28)
	# LOAD INT(ti_50[temp]), 36[ARRAY(a[data+0x4])]
	lw $24, 0x28($28)
	# MUL, INT(ti_51[temp]), -6, -6
	li $25, 36
	# ADD, INT(ti_52[temp]), INT(ti_50[temp]), INT(ti_51[temp])
	addu $26, $24, $25
	# STORE INT(ti_52[temp]), 36[ARRAY(a[data+0x4])]
	sw $26, 0x28($28)
	# ADD, INT(i[sp-0x4]), INT(i[sp-0x4]), 1
	addiu $5, $5, 1
	# JUMP B_25
B_25:
	# JUMP DO_CHECK_18
DO_CHECK_18:
	# JUMP L_OR_EXP_26
L_OR_EXP_26:
	# JUMP L_AND_EXP_27
L_AND_EXP_27:
	# LE, INT(ti_54[temp]), INT(i[sp-0x4]), 100
	sle $27, $5, 100
	# JUMP AND_END_28
	sw $27, -0x20($29)
AND_END_28:
	# JUMP OR_END_29
OR_END_29:
	# Branch INT(ti_54[sp-0x20]) ? DO_BODY_17 : DO_END_19
	lw $17, -0x20($29)
	bne $17, $0, DO_BODY_17
	j DO_END_19
	# JUMP DO_END_19
DO_END_19:
	# ASS, INT(i[sp-0x4]), 0
	li $5, 0
	# JUMP L_OR_EXP_33
L_OR_EXP_33:
	# JUMP L_AND_EXP_34
L_AND_EXP_34:
	# LT, INT(ti_55[temp]), INT(i[sp-0x4]), 10
	li $3, 10
	slt $18, $5, $3
	# JUMP AND_END_35
	sw $18, -0x24($29)
AND_END_35:
	# JUMP OR_END_36
OR_END_36:
	# Branch INT(ti_55[sp-0x24]) ? DO_BODY_30 : DO_END_32
	lw $20, -0x24($29)
	bne $20, $0, DO_BODY_30
	j DO_END_32
	# JUMP DO_BODY_30
DO_BODY_30:
	# JUMP B_37
B_37:
	# MUL, INT(ti_56[temp]), INT(i[sp-0x4]), 4
	sll $19, $5, 2
	# ADD, INT(ti_56[temp]), INT(ti_56[temp]), 0
	# LOAD INT(ti_57[temp]), INT(ti_56[temp])[ARRAY(a[data+0x4])]
	addu $2, $28, $19
	lw $21, 0x4($2)
	# PRINT_INT INT(ti_57[temp])
	li $2, 1
	move $4, $21
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# ADD, INT(i[sp-0x4]), INT(i[sp-0x4]), 1
	addiu $5, $5, 1
	# JUMP B_38
B_38:
	# JUMP DO_CHECK_31
DO_CHECK_31:
	# JUMP L_OR_EXP_39
L_OR_EXP_39:
	# JUMP L_AND_EXP_40
L_AND_EXP_40:
	# LT, INT(ti_59[temp]), INT(i[sp-0x4]), 10
	li $3, 10
	slt $22, $5, $3
	# JUMP AND_END_41
	sw $22, -0x28($29)
AND_END_41:
	# JUMP OR_END_42
OR_END_42:
	# Branch INT(ti_59[sp-0x28]) ? DO_BODY_30 : DO_END_32
	lw $23, -0x28($29)
	bne $23, $0, DO_BODY_30
	j DO_END_32
	# JUMP DO_END_32
DO_END_32:
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# PRINT_INT INT(i[sp-0x4])
	li $2, 1
	move $4, $5
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT INT(j[sp-0x8])
	li $2, 1
	move $4, $6
	syscall
	# PRINT_STR STR_1
	li $2, 4
	la $4, STR_1
	syscall
	# PRINT_INT -6
	li $2, 1
	li $4, -6
	syscall
	# PRINT_STR STR_2
	li $2, 4
	la $4, STR_2
	syscall
	# RETURN 0
	li $2, 10
	syscall
	
